
projects/bin/hFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008030  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  080081d0  080081d0  000181d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008620  08008620  00018620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008628  08008628  00018628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800862c  0800862c  0001862c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  08008630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001254  200001dc  0800880c  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001430  0800880c  00021430  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001816f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000038fa  00000000  00000000  0003837b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006d6a  00000000  00000000  0003bc75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b90  00000000  00000000  000429df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ee0  00000000  00000000  0004356f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00018572  00000000  00000000  0004444f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00007ab8  00000000  00000000  0005c9c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0008e864  00000000  00000000  00064479  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007e  00000000  00000000  000f2cdd  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000327c  00000000  00000000  000f2d5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080081b8 	.word	0x080081b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080081b8 	.word	0x080081b8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <strlen>:
 80004e0:	4603      	mov	r3, r0
 80004e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004e6:	2a00      	cmp	r2, #0
 80004e8:	d1fb      	bne.n	80004e2 <strlen+0x2>
 80004ea:	1a18      	subs	r0, r3, r0
 80004ec:	3801      	subs	r0, #1
 80004ee:	4770      	bx	lr

080004f0 <memchr>:
 80004f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80004f4:	2a10      	cmp	r2, #16
 80004f6:	db2b      	blt.n	8000550 <memchr+0x60>
 80004f8:	f010 0f07 	tst.w	r0, #7
 80004fc:	d008      	beq.n	8000510 <memchr+0x20>
 80004fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000502:	3a01      	subs	r2, #1
 8000504:	428b      	cmp	r3, r1
 8000506:	d02d      	beq.n	8000564 <memchr+0x74>
 8000508:	f010 0f07 	tst.w	r0, #7
 800050c:	b342      	cbz	r2, 8000560 <memchr+0x70>
 800050e:	d1f6      	bne.n	80004fe <memchr+0xe>
 8000510:	b4f0      	push	{r4, r5, r6, r7}
 8000512:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000516:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800051a:	f022 0407 	bic.w	r4, r2, #7
 800051e:	f07f 0700 	mvns.w	r7, #0
 8000522:	2300      	movs	r3, #0
 8000524:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000528:	3c08      	subs	r4, #8
 800052a:	ea85 0501 	eor.w	r5, r5, r1
 800052e:	ea86 0601 	eor.w	r6, r6, r1
 8000532:	fa85 f547 	uadd8	r5, r5, r7
 8000536:	faa3 f587 	sel	r5, r3, r7
 800053a:	fa86 f647 	uadd8	r6, r6, r7
 800053e:	faa5 f687 	sel	r6, r5, r7
 8000542:	b98e      	cbnz	r6, 8000568 <memchr+0x78>
 8000544:	d1ee      	bne.n	8000524 <memchr+0x34>
 8000546:	bcf0      	pop	{r4, r5, r6, r7}
 8000548:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800054c:	f002 0207 	and.w	r2, r2, #7
 8000550:	b132      	cbz	r2, 8000560 <memchr+0x70>
 8000552:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000556:	3a01      	subs	r2, #1
 8000558:	ea83 0301 	eor.w	r3, r3, r1
 800055c:	b113      	cbz	r3, 8000564 <memchr+0x74>
 800055e:	d1f8      	bne.n	8000552 <memchr+0x62>
 8000560:	2000      	movs	r0, #0
 8000562:	4770      	bx	lr
 8000564:	3801      	subs	r0, #1
 8000566:	4770      	bx	lr
 8000568:	2d00      	cmp	r5, #0
 800056a:	bf06      	itte	eq
 800056c:	4635      	moveq	r5, r6
 800056e:	3803      	subeq	r0, #3
 8000570:	3807      	subne	r0, #7
 8000572:	f015 0f01 	tst.w	r5, #1
 8000576:	d107      	bne.n	8000588 <memchr+0x98>
 8000578:	3001      	adds	r0, #1
 800057a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800057e:	bf02      	ittt	eq
 8000580:	3001      	addeq	r0, #1
 8000582:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000586:	3001      	addeq	r0, #1
 8000588:	bcf0      	pop	{r4, r5, r6, r7}
 800058a:	3801      	subs	r0, #1
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <__aeabi_drsub>:
 8000590:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000594:	e002      	b.n	800059c <__adddf3>
 8000596:	bf00      	nop

08000598 <__aeabi_dsub>:
 8000598:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800059c <__adddf3>:
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80005a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	bf1f      	itttt	ne
 80005b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80005b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80005ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80005be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c2:	f000 80e2 	beq.w	800078a <__adddf3+0x1ee>
 80005c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80005ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80005ce:	bfb8      	it	lt
 80005d0:	426d      	neglt	r5, r5
 80005d2:	dd0c      	ble.n	80005ee <__adddf3+0x52>
 80005d4:	442c      	add	r4, r5
 80005d6:	ea80 0202 	eor.w	r2, r0, r2
 80005da:	ea81 0303 	eor.w	r3, r1, r3
 80005de:	ea82 0000 	eor.w	r0, r2, r0
 80005e2:	ea83 0101 	eor.w	r1, r3, r1
 80005e6:	ea80 0202 	eor.w	r2, r0, r2
 80005ea:	ea81 0303 	eor.w	r3, r1, r3
 80005ee:	2d36      	cmp	r5, #54	; 0x36
 80005f0:	bf88      	it	hi
 80005f2:	bd30      	pophi	{r4, r5, pc}
 80005f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000600:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000604:	d002      	beq.n	800060c <__adddf3+0x70>
 8000606:	4240      	negs	r0, r0
 8000608:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000610:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000614:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000618:	d002      	beq.n	8000620 <__adddf3+0x84>
 800061a:	4252      	negs	r2, r2
 800061c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000620:	ea94 0f05 	teq	r4, r5
 8000624:	f000 80a7 	beq.w	8000776 <__adddf3+0x1da>
 8000628:	f1a4 0401 	sub.w	r4, r4, #1
 800062c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000630:	db0d      	blt.n	800064e <__adddf3+0xb2>
 8000632:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000636:	fa22 f205 	lsr.w	r2, r2, r5
 800063a:	1880      	adds	r0, r0, r2
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	fa03 f20e 	lsl.w	r2, r3, lr
 8000644:	1880      	adds	r0, r0, r2
 8000646:	fa43 f305 	asr.w	r3, r3, r5
 800064a:	4159      	adcs	r1, r3
 800064c:	e00e      	b.n	800066c <__adddf3+0xd0>
 800064e:	f1a5 0520 	sub.w	r5, r5, #32
 8000652:	f10e 0e20 	add.w	lr, lr, #32
 8000656:	2a01      	cmp	r2, #1
 8000658:	fa03 fc0e 	lsl.w	ip, r3, lr
 800065c:	bf28      	it	cs
 800065e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000662:	fa43 f305 	asr.w	r3, r3, r5
 8000666:	18c0      	adds	r0, r0, r3
 8000668:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000670:	d507      	bpl.n	8000682 <__adddf3+0xe6>
 8000672:	f04f 0e00 	mov.w	lr, #0
 8000676:	f1dc 0c00 	rsbs	ip, ip, #0
 800067a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800067e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000682:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000686:	d31b      	bcc.n	80006c0 <__adddf3+0x124>
 8000688:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800068c:	d30c      	bcc.n	80006a8 <__adddf3+0x10c>
 800068e:	0849      	lsrs	r1, r1, #1
 8000690:	ea5f 0030 	movs.w	r0, r0, rrx
 8000694:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000698:	f104 0401 	add.w	r4, r4, #1
 800069c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80006a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80006a4:	f080 809a 	bcs.w	80007dc <__adddf3+0x240>
 80006a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	ea41 0105 	orr.w	r1, r1, r5
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80006c4:	4140      	adcs	r0, r0
 80006c6:	eb41 0101 	adc.w	r1, r1, r1
 80006ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006ce:	f1a4 0401 	sub.w	r4, r4, #1
 80006d2:	d1e9      	bne.n	80006a8 <__adddf3+0x10c>
 80006d4:	f091 0f00 	teq	r1, #0
 80006d8:	bf04      	itt	eq
 80006da:	4601      	moveq	r1, r0
 80006dc:	2000      	moveq	r0, #0
 80006de:	fab1 f381 	clz	r3, r1
 80006e2:	bf08      	it	eq
 80006e4:	3320      	addeq	r3, #32
 80006e6:	f1a3 030b 	sub.w	r3, r3, #11
 80006ea:	f1b3 0220 	subs.w	r2, r3, #32
 80006ee:	da0c      	bge.n	800070a <__adddf3+0x16e>
 80006f0:	320c      	adds	r2, #12
 80006f2:	dd08      	ble.n	8000706 <__adddf3+0x16a>
 80006f4:	f102 0c14 	add.w	ip, r2, #20
 80006f8:	f1c2 020c 	rsb	r2, r2, #12
 80006fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000700:	fa21 f102 	lsr.w	r1, r1, r2
 8000704:	e00c      	b.n	8000720 <__adddf3+0x184>
 8000706:	f102 0214 	add.w	r2, r2, #20
 800070a:	bfd8      	it	le
 800070c:	f1c2 0c20 	rsble	ip, r2, #32
 8000710:	fa01 f102 	lsl.w	r1, r1, r2
 8000714:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000718:	bfdc      	itt	le
 800071a:	ea41 010c 	orrle.w	r1, r1, ip
 800071e:	4090      	lslle	r0, r2
 8000720:	1ae4      	subs	r4, r4, r3
 8000722:	bfa2      	ittt	ge
 8000724:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000728:	4329      	orrge	r1, r5
 800072a:	bd30      	popge	{r4, r5, pc}
 800072c:	ea6f 0404 	mvn.w	r4, r4
 8000730:	3c1f      	subs	r4, #31
 8000732:	da1c      	bge.n	800076e <__adddf3+0x1d2>
 8000734:	340c      	adds	r4, #12
 8000736:	dc0e      	bgt.n	8000756 <__adddf3+0x1ba>
 8000738:	f104 0414 	add.w	r4, r4, #20
 800073c:	f1c4 0220 	rsb	r2, r4, #32
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f302 	lsl.w	r3, r1, r2
 8000748:	ea40 0003 	orr.w	r0, r0, r3
 800074c:	fa21 f304 	lsr.w	r3, r1, r4
 8000750:	ea45 0103 	orr.w	r1, r5, r3
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	f1c4 040c 	rsb	r4, r4, #12
 800075a:	f1c4 0220 	rsb	r2, r4, #32
 800075e:	fa20 f002 	lsr.w	r0, r0, r2
 8000762:	fa01 f304 	lsl.w	r3, r1, r4
 8000766:	ea40 0003 	orr.w	r0, r0, r3
 800076a:	4629      	mov	r1, r5
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	fa21 f004 	lsr.w	r0, r1, r4
 8000772:	4629      	mov	r1, r5
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	f094 0f00 	teq	r4, #0
 800077a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800077e:	bf06      	itte	eq
 8000780:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000784:	3401      	addeq	r4, #1
 8000786:	3d01      	subne	r5, #1
 8000788:	e74e      	b.n	8000628 <__adddf3+0x8c>
 800078a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800078e:	bf18      	it	ne
 8000790:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000794:	d029      	beq.n	80007ea <__adddf3+0x24e>
 8000796:	ea94 0f05 	teq	r4, r5
 800079a:	bf08      	it	eq
 800079c:	ea90 0f02 	teqeq	r0, r2
 80007a0:	d005      	beq.n	80007ae <__adddf3+0x212>
 80007a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80007a6:	bf04      	itt	eq
 80007a8:	4619      	moveq	r1, r3
 80007aa:	4610      	moveq	r0, r2
 80007ac:	bd30      	pop	{r4, r5, pc}
 80007ae:	ea91 0f03 	teq	r1, r3
 80007b2:	bf1e      	ittt	ne
 80007b4:	2100      	movne	r1, #0
 80007b6:	2000      	movne	r0, #0
 80007b8:	bd30      	popne	{r4, r5, pc}
 80007ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80007be:	d105      	bne.n	80007cc <__adddf3+0x230>
 80007c0:	0040      	lsls	r0, r0, #1
 80007c2:	4149      	adcs	r1, r1
 80007c4:	bf28      	it	cs
 80007c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80007ca:	bd30      	pop	{r4, r5, pc}
 80007cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80007d0:	bf3c      	itt	cc
 80007d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80007d6:	bd30      	popcc	{r4, r5, pc}
 80007d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd30      	pop	{r4, r5, pc}
 80007ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007ee:	bf1a      	itte	ne
 80007f0:	4619      	movne	r1, r3
 80007f2:	4610      	movne	r0, r2
 80007f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80007f8:	bf1c      	itt	ne
 80007fa:	460b      	movne	r3, r1
 80007fc:	4602      	movne	r2, r0
 80007fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000802:	bf06      	itte	eq
 8000804:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000808:	ea91 0f03 	teqeq	r1, r3
 800080c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000810:	bd30      	pop	{r4, r5, pc}
 8000812:	bf00      	nop

08000814 <__aeabi_ui2d>:
 8000814:	f090 0f00 	teq	r0, #0
 8000818:	bf04      	itt	eq
 800081a:	2100      	moveq	r1, #0
 800081c:	4770      	bxeq	lr
 800081e:	b530      	push	{r4, r5, lr}
 8000820:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000824:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000828:	f04f 0500 	mov.w	r5, #0
 800082c:	f04f 0100 	mov.w	r1, #0
 8000830:	e750      	b.n	80006d4 <__adddf3+0x138>
 8000832:	bf00      	nop

08000834 <__aeabi_i2d>:
 8000834:	f090 0f00 	teq	r0, #0
 8000838:	bf04      	itt	eq
 800083a:	2100      	moveq	r1, #0
 800083c:	4770      	bxeq	lr
 800083e:	b530      	push	{r4, r5, lr}
 8000840:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000844:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000848:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800084c:	bf48      	it	mi
 800084e:	4240      	negmi	r0, r0
 8000850:	f04f 0100 	mov.w	r1, #0
 8000854:	e73e      	b.n	80006d4 <__adddf3+0x138>
 8000856:	bf00      	nop

08000858 <__aeabi_f2d>:
 8000858:	0042      	lsls	r2, r0, #1
 800085a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800085e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000862:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000866:	bf1f      	itttt	ne
 8000868:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800086c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000870:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000874:	4770      	bxne	lr
 8000876:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800087a:	bf08      	it	eq
 800087c:	4770      	bxeq	lr
 800087e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000882:	bf04      	itt	eq
 8000884:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000888:	4770      	bxeq	lr
 800088a:	b530      	push	{r4, r5, lr}
 800088c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000890:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000894:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000898:	e71c      	b.n	80006d4 <__adddf3+0x138>
 800089a:	bf00      	nop

0800089c <__aeabi_ul2d>:
 800089c:	ea50 0201 	orrs.w	r2, r0, r1
 80008a0:	bf08      	it	eq
 80008a2:	4770      	bxeq	lr
 80008a4:	b530      	push	{r4, r5, lr}
 80008a6:	f04f 0500 	mov.w	r5, #0
 80008aa:	e00a      	b.n	80008c2 <__aeabi_l2d+0x16>

080008ac <__aeabi_l2d>:
 80008ac:	ea50 0201 	orrs.w	r2, r0, r1
 80008b0:	bf08      	it	eq
 80008b2:	4770      	bxeq	lr
 80008b4:	b530      	push	{r4, r5, lr}
 80008b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80008ba:	d502      	bpl.n	80008c2 <__aeabi_l2d+0x16>
 80008bc:	4240      	negs	r0, r0
 80008be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80008ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80008ce:	f43f aed8 	beq.w	8000682 <__adddf3+0xe6>
 80008d2:	f04f 0203 	mov.w	r2, #3
 80008d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008da:	bf18      	it	ne
 80008dc:	3203      	addne	r2, #3
 80008de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008e2:	bf18      	it	ne
 80008e4:	3203      	addne	r2, #3
 80008e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80008ea:	f1c2 0320 	rsb	r3, r2, #32
 80008ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80008f2:	fa20 f002 	lsr.w	r0, r0, r2
 80008f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80008fa:	ea40 000e 	orr.w	r0, r0, lr
 80008fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000902:	4414      	add	r4, r2
 8000904:	e6bd      	b.n	8000682 <__adddf3+0xe6>
 8000906:	bf00      	nop

08000908 <__aeabi_dmul>:
 8000908:	b570      	push	{r4, r5, r6, lr}
 800090a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800090e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000912:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000916:	bf1d      	ittte	ne
 8000918:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800091c:	ea94 0f0c 	teqne	r4, ip
 8000920:	ea95 0f0c 	teqne	r5, ip
 8000924:	f000 f8de 	bleq	8000ae4 <__aeabi_dmul+0x1dc>
 8000928:	442c      	add	r4, r5
 800092a:	ea81 0603 	eor.w	r6, r1, r3
 800092e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000932:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000936:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800093a:	bf18      	it	ne
 800093c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000948:	d038      	beq.n	80009bc <__aeabi_dmul+0xb4>
 800094a:	fba0 ce02 	umull	ip, lr, r0, r2
 800094e:	f04f 0500 	mov.w	r5, #0
 8000952:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000956:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800095a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800095e:	f04f 0600 	mov.w	r6, #0
 8000962:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000966:	f09c 0f00 	teq	ip, #0
 800096a:	bf18      	it	ne
 800096c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000970:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000974:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000978:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800097c:	d204      	bcs.n	8000988 <__aeabi_dmul+0x80>
 800097e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000982:	416d      	adcs	r5, r5
 8000984:	eb46 0606 	adc.w	r6, r6, r6
 8000988:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800098c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000990:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000994:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000998:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800099c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a0:	bf88      	it	hi
 80009a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a6:	d81e      	bhi.n	80009e6 <__aeabi_dmul+0xde>
 80009a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80009ac:	bf08      	it	eq
 80009ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80009b2:	f150 0000 	adcs.w	r0, r0, #0
 80009b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	pop	{r4, r5, r6, pc}
 80009bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80009c0:	ea46 0101 	orr.w	r1, r6, r1
 80009c4:	ea40 0002 	orr.w	r0, r0, r2
 80009c8:	ea81 0103 	eor.w	r1, r1, r3
 80009cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	f300 80ab 	bgt.w	8000b40 <__aeabi_dmul+0x238>
 80009ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80009ee:	bfde      	ittt	le
 80009f0:	2000      	movle	r0, #0
 80009f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80009f6:	bd70      	pople	{r4, r5, r6, pc}
 80009f8:	f1c4 0400 	rsb	r4, r4, #0
 80009fc:	3c20      	subs	r4, #32
 80009fe:	da35      	bge.n	8000a6c <__aeabi_dmul+0x164>
 8000a00:	340c      	adds	r4, #12
 8000a02:	dc1b      	bgt.n	8000a3c <__aeabi_dmul+0x134>
 8000a04:	f104 0414 	add.w	r4, r4, #20
 8000a08:	f1c4 0520 	rsb	r5, r4, #32
 8000a0c:	fa00 f305 	lsl.w	r3, r0, r5
 8000a10:	fa20 f004 	lsr.w	r0, r0, r4
 8000a14:	fa01 f205 	lsl.w	r2, r1, r5
 8000a18:	ea40 0002 	orr.w	r0, r0, r2
 8000a1c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000a20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000a24:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a28:	fa21 f604 	lsr.w	r6, r1, r4
 8000a2c:	eb42 0106 	adc.w	r1, r2, r6
 8000a30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a34:	bf08      	it	eq
 8000a36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a3a:	bd70      	pop	{r4, r5, r6, pc}
 8000a3c:	f1c4 040c 	rsb	r4, r4, #12
 8000a40:	f1c4 0520 	rsb	r5, r4, #32
 8000a44:	fa00 f304 	lsl.w	r3, r0, r4
 8000a48:	fa20 f005 	lsr.w	r0, r0, r5
 8000a4c:	fa01 f204 	lsl.w	r2, r1, r4
 8000a50:	ea40 0002 	orr.w	r0, r0, r2
 8000a54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a58:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a5c:	f141 0100 	adc.w	r1, r1, #0
 8000a60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a64:	bf08      	it	eq
 8000a66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a6a:	bd70      	pop	{r4, r5, r6, pc}
 8000a6c:	f1c4 0520 	rsb	r5, r4, #32
 8000a70:	fa00 f205 	lsl.w	r2, r0, r5
 8000a74:	ea4e 0e02 	orr.w	lr, lr, r2
 8000a78:	fa20 f304 	lsr.w	r3, r0, r4
 8000a7c:	fa01 f205 	lsl.w	r2, r1, r5
 8000a80:	ea43 0302 	orr.w	r3, r3, r2
 8000a84:	fa21 f004 	lsr.w	r0, r1, r4
 8000a88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a8c:	fa21 f204 	lsr.w	r2, r1, r4
 8000a90:	ea20 0002 	bic.w	r0, r0, r2
 8000a94:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a9c:	bf08      	it	eq
 8000a9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000aa2:	bd70      	pop	{r4, r5, r6, pc}
 8000aa4:	f094 0f00 	teq	r4, #0
 8000aa8:	d10f      	bne.n	8000aca <__aeabi_dmul+0x1c2>
 8000aaa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000aae:	0040      	lsls	r0, r0, #1
 8000ab0:	eb41 0101 	adc.w	r1, r1, r1
 8000ab4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ab8:	bf08      	it	eq
 8000aba:	3c01      	subeq	r4, #1
 8000abc:	d0f7      	beq.n	8000aae <__aeabi_dmul+0x1a6>
 8000abe:	ea41 0106 	orr.w	r1, r1, r6
 8000ac2:	f095 0f00 	teq	r5, #0
 8000ac6:	bf18      	it	ne
 8000ac8:	4770      	bxne	lr
 8000aca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000ace:	0052      	lsls	r2, r2, #1
 8000ad0:	eb43 0303 	adc.w	r3, r3, r3
 8000ad4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000ad8:	bf08      	it	eq
 8000ada:	3d01      	subeq	r5, #1
 8000adc:	d0f7      	beq.n	8000ace <__aeabi_dmul+0x1c6>
 8000ade:	ea43 0306 	orr.w	r3, r3, r6
 8000ae2:	4770      	bx	lr
 8000ae4:	ea94 0f0c 	teq	r4, ip
 8000ae8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aec:	bf18      	it	ne
 8000aee:	ea95 0f0c 	teqne	r5, ip
 8000af2:	d00c      	beq.n	8000b0e <__aeabi_dmul+0x206>
 8000af4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af8:	bf18      	it	ne
 8000afa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000afe:	d1d1      	bne.n	8000aa4 <__aeabi_dmul+0x19c>
 8000b00:	ea81 0103 	eor.w	r1, r1, r3
 8000b04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	bd70      	pop	{r4, r5, r6, pc}
 8000b0e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b12:	bf06      	itte	eq
 8000b14:	4610      	moveq	r0, r2
 8000b16:	4619      	moveq	r1, r3
 8000b18:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b1c:	d019      	beq.n	8000b52 <__aeabi_dmul+0x24a>
 8000b1e:	ea94 0f0c 	teq	r4, ip
 8000b22:	d102      	bne.n	8000b2a <__aeabi_dmul+0x222>
 8000b24:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000b28:	d113      	bne.n	8000b52 <__aeabi_dmul+0x24a>
 8000b2a:	ea95 0f0c 	teq	r5, ip
 8000b2e:	d105      	bne.n	8000b3c <__aeabi_dmul+0x234>
 8000b30:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000b34:	bf1c      	itt	ne
 8000b36:	4610      	movne	r0, r2
 8000b38:	4619      	movne	r1, r3
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dmul+0x24a>
 8000b3c:	ea81 0103 	eor.w	r1, r1, r3
 8000b40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b44:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b48:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	bd70      	pop	{r4, r5, r6, pc}
 8000b52:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b56:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000b5a:	bd70      	pop	{r4, r5, r6, pc}

08000b5c <__aeabi_ddiv>:
 8000b5c:	b570      	push	{r4, r5, r6, lr}
 8000b5e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b62:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000b66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000b6a:	bf1d      	ittte	ne
 8000b6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000b70:	ea94 0f0c 	teqne	r4, ip
 8000b74:	ea95 0f0c 	teqne	r5, ip
 8000b78:	f000 f8a7 	bleq	8000cca <__aeabi_ddiv+0x16e>
 8000b7c:	eba4 0405 	sub.w	r4, r4, r5
 8000b80:	ea81 0e03 	eor.w	lr, r1, r3
 8000b84:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b88:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b8c:	f000 8088 	beq.w	8000ca0 <__aeabi_ddiv+0x144>
 8000b90:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b94:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000b98:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000b9c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000ba0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000ba4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000ba8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000bac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000bb0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000bb4:	429d      	cmp	r5, r3
 8000bb6:	bf08      	it	eq
 8000bb8:	4296      	cmpeq	r6, r2
 8000bba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000bbe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000bc2:	d202      	bcs.n	8000bca <__aeabi_ddiv+0x6e>
 8000bc4:	085b      	lsrs	r3, r3, #1
 8000bc6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bca:	1ab6      	subs	r6, r6, r2
 8000bcc:	eb65 0503 	sbc.w	r5, r5, r3
 8000bd0:	085b      	lsrs	r3, r3, #1
 8000bd2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bd6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000bda:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000bde:	ebb6 0e02 	subs.w	lr, r6, r2
 8000be2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000be6:	bf22      	ittt	cs
 8000be8:	1ab6      	subcs	r6, r6, r2
 8000bea:	4675      	movcs	r5, lr
 8000bec:	ea40 000c 	orrcs.w	r0, r0, ip
 8000bf0:	085b      	lsrs	r3, r3, #1
 8000bf2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bf6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bfa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bfe:	bf22      	ittt	cs
 8000c00:	1ab6      	subcs	r6, r6, r2
 8000c02:	4675      	movcs	r5, lr
 8000c04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c08:	085b      	lsrs	r3, r3, #1
 8000c0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c16:	bf22      	ittt	cs
 8000c18:	1ab6      	subcs	r6, r6, r2
 8000c1a:	4675      	movcs	r5, lr
 8000c1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c20:	085b      	lsrs	r3, r3, #1
 8000c22:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c26:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c2e:	bf22      	ittt	cs
 8000c30:	1ab6      	subcs	r6, r6, r2
 8000c32:	4675      	movcs	r5, lr
 8000c34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c38:	ea55 0e06 	orrs.w	lr, r5, r6
 8000c3c:	d018      	beq.n	8000c70 <__aeabi_ddiv+0x114>
 8000c3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000c42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000c46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000c4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000c4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000c52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000c56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000c5a:	d1c0      	bne.n	8000bde <__aeabi_ddiv+0x82>
 8000c5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c60:	d10b      	bne.n	8000c7a <__aeabi_ddiv+0x11e>
 8000c62:	ea41 0100 	orr.w	r1, r1, r0
 8000c66:	f04f 0000 	mov.w	r0, #0
 8000c6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000c6e:	e7b6      	b.n	8000bde <__aeabi_ddiv+0x82>
 8000c70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c74:	bf04      	itt	eq
 8000c76:	4301      	orreq	r1, r0
 8000c78:	2000      	moveq	r0, #0
 8000c7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000c7e:	bf88      	it	hi
 8000c80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000c84:	f63f aeaf 	bhi.w	80009e6 <__aeabi_dmul+0xde>
 8000c88:	ebb5 0c03 	subs.w	ip, r5, r3
 8000c8c:	bf04      	itt	eq
 8000c8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000c92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000c96:	f150 0000 	adcs.w	r0, r0, #0
 8000c9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c9e:	bd70      	pop	{r4, r5, r6, pc}
 8000ca0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ca4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ca8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000cac:	bfc2      	ittt	gt
 8000cae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000cb2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000cb6:	bd70      	popgt	{r4, r5, r6, pc}
 8000cb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cbc:	f04f 0e00 	mov.w	lr, #0
 8000cc0:	3c01      	subs	r4, #1
 8000cc2:	e690      	b.n	80009e6 <__aeabi_dmul+0xde>
 8000cc4:	ea45 0e06 	orr.w	lr, r5, r6
 8000cc8:	e68d      	b.n	80009e6 <__aeabi_dmul+0xde>
 8000cca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000cce:	ea94 0f0c 	teq	r4, ip
 8000cd2:	bf08      	it	eq
 8000cd4:	ea95 0f0c 	teqeq	r5, ip
 8000cd8:	f43f af3b 	beq.w	8000b52 <__aeabi_dmul+0x24a>
 8000cdc:	ea94 0f0c 	teq	r4, ip
 8000ce0:	d10a      	bne.n	8000cf8 <__aeabi_ddiv+0x19c>
 8000ce2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ce6:	f47f af34 	bne.w	8000b52 <__aeabi_dmul+0x24a>
 8000cea:	ea95 0f0c 	teq	r5, ip
 8000cee:	f47f af25 	bne.w	8000b3c <__aeabi_dmul+0x234>
 8000cf2:	4610      	mov	r0, r2
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	e72c      	b.n	8000b52 <__aeabi_dmul+0x24a>
 8000cf8:	ea95 0f0c 	teq	r5, ip
 8000cfc:	d106      	bne.n	8000d0c <__aeabi_ddiv+0x1b0>
 8000cfe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000d02:	f43f aefd 	beq.w	8000b00 <__aeabi_dmul+0x1f8>
 8000d06:	4610      	mov	r0, r2
 8000d08:	4619      	mov	r1, r3
 8000d0a:	e722      	b.n	8000b52 <__aeabi_dmul+0x24a>
 8000d0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d10:	bf18      	it	ne
 8000d12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000d16:	f47f aec5 	bne.w	8000aa4 <__aeabi_dmul+0x19c>
 8000d1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000d1e:	f47f af0d 	bne.w	8000b3c <__aeabi_dmul+0x234>
 8000d22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000d26:	f47f aeeb 	bne.w	8000b00 <__aeabi_dmul+0x1f8>
 8000d2a:	e712      	b.n	8000b52 <__aeabi_dmul+0x24a>

08000d2c <__gedf2>:
 8000d2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000d30:	e006      	b.n	8000d40 <__cmpdf2+0x4>
 8000d32:	bf00      	nop

08000d34 <__ledf2>:
 8000d34:	f04f 0c01 	mov.w	ip, #1
 8000d38:	e002      	b.n	8000d40 <__cmpdf2+0x4>
 8000d3a:	bf00      	nop

08000d3c <__cmpdf2>:
 8000d3c:	f04f 0c01 	mov.w	ip, #1
 8000d40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d50:	bf18      	it	ne
 8000d52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000d56:	d01b      	beq.n	8000d90 <__cmpdf2+0x54>
 8000d58:	b001      	add	sp, #4
 8000d5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000d5e:	bf0c      	ite	eq
 8000d60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000d64:	ea91 0f03 	teqne	r1, r3
 8000d68:	bf02      	ittt	eq
 8000d6a:	ea90 0f02 	teqeq	r0, r2
 8000d6e:	2000      	moveq	r0, #0
 8000d70:	4770      	bxeq	lr
 8000d72:	f110 0f00 	cmn.w	r0, #0
 8000d76:	ea91 0f03 	teq	r1, r3
 8000d7a:	bf58      	it	pl
 8000d7c:	4299      	cmppl	r1, r3
 8000d7e:	bf08      	it	eq
 8000d80:	4290      	cmpeq	r0, r2
 8000d82:	bf2c      	ite	cs
 8000d84:	17d8      	asrcs	r0, r3, #31
 8000d86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000d8a:	f040 0001 	orr.w	r0, r0, #1
 8000d8e:	4770      	bx	lr
 8000d90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d98:	d102      	bne.n	8000da0 <__cmpdf2+0x64>
 8000d9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d9e:	d107      	bne.n	8000db0 <__cmpdf2+0x74>
 8000da0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000da4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000da8:	d1d6      	bne.n	8000d58 <__cmpdf2+0x1c>
 8000daa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000dae:	d0d3      	beq.n	8000d58 <__cmpdf2+0x1c>
 8000db0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <__aeabi_cdrcmple>:
 8000db8:	4684      	mov	ip, r0
 8000dba:	4610      	mov	r0, r2
 8000dbc:	4662      	mov	r2, ip
 8000dbe:	468c      	mov	ip, r1
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4663      	mov	r3, ip
 8000dc4:	e000      	b.n	8000dc8 <__aeabi_cdcmpeq>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_cdcmpeq>:
 8000dc8:	b501      	push	{r0, lr}
 8000dca:	f7ff ffb7 	bl	8000d3c <__cmpdf2>
 8000dce:	2800      	cmp	r0, #0
 8000dd0:	bf48      	it	mi
 8000dd2:	f110 0f00 	cmnmi.w	r0, #0
 8000dd6:	bd01      	pop	{r0, pc}

08000dd8 <__aeabi_dcmpeq>:
 8000dd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ddc:	f7ff fff4 	bl	8000dc8 <__aeabi_cdcmpeq>
 8000de0:	bf0c      	ite	eq
 8000de2:	2001      	moveq	r0, #1
 8000de4:	2000      	movne	r0, #0
 8000de6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dea:	bf00      	nop

08000dec <__aeabi_dcmplt>:
 8000dec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df0:	f7ff ffea 	bl	8000dc8 <__aeabi_cdcmpeq>
 8000df4:	bf34      	ite	cc
 8000df6:	2001      	movcc	r0, #1
 8000df8:	2000      	movcs	r0, #0
 8000dfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dfe:	bf00      	nop

08000e00 <__aeabi_dcmple>:
 8000e00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e04:	f7ff ffe0 	bl	8000dc8 <__aeabi_cdcmpeq>
 8000e08:	bf94      	ite	ls
 8000e0a:	2001      	movls	r0, #1
 8000e0c:	2000      	movhi	r0, #0
 8000e0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e12:	bf00      	nop

08000e14 <__aeabi_dcmpge>:
 8000e14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e18:	f7ff ffce 	bl	8000db8 <__aeabi_cdrcmple>
 8000e1c:	bf94      	ite	ls
 8000e1e:	2001      	movls	r0, #1
 8000e20:	2000      	movhi	r0, #0
 8000e22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e26:	bf00      	nop

08000e28 <__aeabi_dcmpgt>:
 8000e28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e2c:	f7ff ffc4 	bl	8000db8 <__aeabi_cdrcmple>
 8000e30:	bf34      	ite	cc
 8000e32:	2001      	movcc	r0, #1
 8000e34:	2000      	movcs	r0, #0
 8000e36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e3a:	bf00      	nop

08000e3c <__aeabi_dcmpun>:
 8000e3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e44:	d102      	bne.n	8000e4c <__aeabi_dcmpun+0x10>
 8000e46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e4a:	d10a      	bne.n	8000e62 <__aeabi_dcmpun+0x26>
 8000e4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e54:	d102      	bne.n	8000e5c <__aeabi_dcmpun+0x20>
 8000e56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000e5a:	d102      	bne.n	8000e62 <__aeabi_dcmpun+0x26>
 8000e5c:	f04f 0000 	mov.w	r0, #0
 8000e60:	4770      	bx	lr
 8000e62:	f04f 0001 	mov.w	r0, #1
 8000e66:	4770      	bx	lr

08000e68 <__aeabi_d2iz>:
 8000e68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e70:	d215      	bcs.n	8000e9e <__aeabi_d2iz+0x36>
 8000e72:	d511      	bpl.n	8000e98 <__aeabi_d2iz+0x30>
 8000e74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e7c:	d912      	bls.n	8000ea4 <__aeabi_d2iz+0x3c>
 8000e7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000e92:	bf18      	it	ne
 8000e94:	4240      	negne	r0, r0
 8000e96:	4770      	bx	lr
 8000e98:	f04f 0000 	mov.w	r0, #0
 8000e9c:	4770      	bx	lr
 8000e9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ea2:	d105      	bne.n	8000eb0 <__aeabi_d2iz+0x48>
 8000ea4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ea8:	bf08      	it	eq
 8000eaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000eae:	4770      	bx	lr
 8000eb0:	f04f 0000 	mov.w	r0, #0
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_d2uiz>:
 8000eb8:	004a      	lsls	r2, r1, #1
 8000eba:	d211      	bcs.n	8000ee0 <__aeabi_d2uiz+0x28>
 8000ebc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ec0:	d211      	bcs.n	8000ee6 <__aeabi_d2uiz+0x2e>
 8000ec2:	d50d      	bpl.n	8000ee0 <__aeabi_d2uiz+0x28>
 8000ec4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ec8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ecc:	d40e      	bmi.n	8000eec <__aeabi_d2uiz+0x34>
 8000ece:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ed2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ed6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000eda:	fa23 f002 	lsr.w	r0, r3, r2
 8000ede:	4770      	bx	lr
 8000ee0:	f04f 0000 	mov.w	r0, #0
 8000ee4:	4770      	bx	lr
 8000ee6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000eea:	d102      	bne.n	8000ef2 <__aeabi_d2uiz+0x3a>
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	4770      	bx	lr
 8000ef2:	f04f 0000 	mov.w	r0, #0
 8000ef6:	4770      	bx	lr

08000ef8 <__aeabi_d2f>:
 8000ef8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000efc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000f00:	bf24      	itt	cs
 8000f02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000f06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000f0a:	d90d      	bls.n	8000f28 <__aeabi_d2f+0x30>
 8000f0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000f14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000f18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000f1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000f20:	bf08      	it	eq
 8000f22:	f020 0001 	biceq.w	r0, r0, #1
 8000f26:	4770      	bx	lr
 8000f28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000f2c:	d121      	bne.n	8000f72 <__aeabi_d2f+0x7a>
 8000f2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000f32:	bfbc      	itt	lt
 8000f34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000f38:	4770      	bxlt	lr
 8000f3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000f3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000f42:	f1c2 0218 	rsb	r2, r2, #24
 8000f46:	f1c2 0c20 	rsb	ip, r2, #32
 8000f4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000f4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000f52:	bf18      	it	ne
 8000f54:	f040 0001 	orrne.w	r0, r0, #1
 8000f58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000f60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000f64:	ea40 000c 	orr.w	r0, r0, ip
 8000f68:	fa23 f302 	lsr.w	r3, r3, r2
 8000f6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000f70:	e7cc      	b.n	8000f0c <__aeabi_d2f+0x14>
 8000f72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000f76:	d107      	bne.n	8000f88 <__aeabi_d2f+0x90>
 8000f78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000f7c:	bf1e      	ittt	ne
 8000f7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000f82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000f86:	4770      	bxne	lr
 8000f88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000f8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <Reset_Handler>:
 8000f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd0 <LoopFillZerobss+0x14>
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	e003      	b.n	8000fa8 <LoopCopyDataInit>

08000fa0 <CopyDataInit>:
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <LoopFillZerobss+0x18>)
 8000fa2:	585b      	ldr	r3, [r3, r1]
 8000fa4:	5043      	str	r3, [r0, r1]
 8000fa6:	3104      	adds	r1, #4

08000fa8 <LoopCopyDataInit>:
 8000fa8:	480b      	ldr	r0, [pc, #44]	; (8000fd8 <LoopFillZerobss+0x1c>)
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <LoopFillZerobss+0x20>)
 8000fac:	1842      	adds	r2, r0, r1
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d3f6      	bcc.n	8000fa0 <CopyDataInit>
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x24>)
 8000fb4:	e002      	b.n	8000fbc <LoopFillZerobss>

08000fb6 <FillZerobss>:
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f842 3b04 	str.w	r3, [r2], #4

08000fbc <LoopFillZerobss>:
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <LoopFillZerobss+0x28>)
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d3f9      	bcc.n	8000fb6 <FillZerobss>
 8000fc2:	f000 f813 	bl	8000fec <SystemInit>
 8000fc6:	f002 ff37 	bl	8003e38 <__libc_init_array>
 8000fca:	f002 feb1 	bl	8003d30 <main>
 8000fce:	4770      	bx	lr
 8000fd0:	20018000 	.word	0x20018000
 8000fd4:	08008630 	.word	0x08008630
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	200001dc 	.word	0x200001dc
 8000fe0:	200001dc 	.word	0x200001dc
 8000fe4:	20001430 	.word	0x20001430

08000fe8 <ADC_IRQHandler>:
 8000fe8:	e7fe      	b.n	8000fe8 <ADC_IRQHandler>
	...

08000fec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fec:	490f      	ldr	r1, [pc, #60]	; (800102c <SystemInit+0x40>)
 8000fee:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000ff2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <SystemInit+0x44>)
 8000ffc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ffe:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001000:	f042 0201 	orr.w	r2, r2, #1
 8001004:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001006:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800100e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001012:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <SystemInit+0x48>)
 8001016:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800101e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001020:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001022:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001026:	608b      	str	r3, [r1, #8]
#endif
}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00
 8001030:	40023800 	.word	0x40023800
 8001034:	24003010 	.word	0x24003010

08001038 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001038:	4770      	bx	lr
	...

0800103c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_InitTick+0x24>)
{
 8001040:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001048:	fbb0 f0f3 	udiv	r0, r0, r3
 800104c:	f000 f88c 	bl	8001168 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	4621      	mov	r1, r4
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f000 f842 	bl	80010e0 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800105c:	2000      	movs	r0, #0
 800105e:	bd10      	pop	{r4, pc}
 8001060:	20000000 	.word	0x20000000

08001064 <HAL_Init>:
{
 8001064:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <HAL_Init+0x30>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800106e:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001076:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800107e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 f80f 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001086:	200f      	movs	r0, #15
 8001088:	f7ff ffd8 	bl	800103c <HAL_InitTick>
  HAL_MspInit();
 800108c:	f7ff ffd4 	bl	8001038 <HAL_MspInit>
}
 8001090:	2000      	movs	r0, #0
 8001092:	bd08      	pop	{r3, pc}
 8001094:	40023c00 	.word	0x40023c00

08001098 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001098:	4b01      	ldr	r3, [pc, #4]	; (80010a0 <HAL_GetTick+0x8>)
 800109a:	6818      	ldr	r0, [r3, #0]
}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	200001f8 	.word	0x200001f8

080010a4 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80010a4:	1ec3      	subs	r3, r0, #3
 80010a6:	2b04      	cmp	r3, #4
{
 80010a8:	b510      	push	{r4, lr}
 80010aa:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80010ac:	d903      	bls.n	80010b6 <HAL_NVIC_SetPriorityGrouping+0x12>
 80010ae:	21a2      	movs	r1, #162	; 0xa2
 80010b0:	4809      	ldr	r0, [pc, #36]	; (80010d8 <HAL_NVIC_SetPriorityGrouping+0x34>)
 80010b2:	f002 feb1 	bl	8003e18 <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b6:	4a09      	ldr	r2, [pc, #36]	; (80010dc <HAL_NVIC_SetPriorityGrouping+0x38>)
 80010b8:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010be:	041b      	lsls	r3, r3, #16
 80010c0:	0c1b      	lsrs	r3, r3, #16
 80010c2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80010c6:	0224      	lsls	r4, r4, #8
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010cc:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80010d0:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 80010d2:	60d4      	str	r4, [r2, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80010d4:	bd10      	pop	{r4, pc}
 80010d6:	bf00      	nop
 80010d8:	08008210 	.word	0x08008210
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80010e0:	2a0f      	cmp	r2, #15
{ 
 80010e2:	b570      	push	{r4, r5, r6, lr}
 80010e4:	4605      	mov	r5, r0
 80010e6:	460c      	mov	r4, r1
 80010e8:	4616      	mov	r6, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80010ea:	d903      	bls.n	80010f4 <HAL_NVIC_SetPriority+0x14>
 80010ec:	21ba      	movs	r1, #186	; 0xba
 80010ee:	481b      	ldr	r0, [pc, #108]	; (800115c <HAL_NVIC_SetPriority+0x7c>)
 80010f0:	f002 fe92 	bl	8003e18 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80010f4:	2c0f      	cmp	r4, #15
 80010f6:	d903      	bls.n	8001100 <HAL_NVIC_SetPriority+0x20>
 80010f8:	21bb      	movs	r1, #187	; 0xbb
 80010fa:	4818      	ldr	r0, [pc, #96]	; (800115c <HAL_NVIC_SetPriority+0x7c>)
 80010fc:	f002 fe8c 	bl	8003e18 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <HAL_NVIC_SetPriority+0x80>)
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001108:	f1c2 0307 	rsb	r3, r2, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110c:	1d11      	adds	r1, r2, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800110e:	2b04      	cmp	r3, #4
 8001110:	bf28      	it	cs
 8001112:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001114:	2906      	cmp	r1, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001116:	f04f 31ff 	mov.w	r1, #4294967295
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	bf8c      	ite	hi
 8001120:	3a03      	subhi	r2, #3
 8001122:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	ea24 0303 	bic.w	r3, r4, r3
 8001128:	4093      	lsls	r3, r2
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112a:	fa01 f202 	lsl.w	r2, r1, r2
 800112e:	ea26 0602 	bic.w	r6, r6, r2
  if ((int32_t)(IRQn) < 0)
 8001132:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	ea43 0306 	orr.w	r3, r3, r6
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	bfa8      	it	ge
 800113a:	f105 4560 	addge.w	r5, r5, #3758096384	; 0xe0000000
 800113e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	bfbc      	itt	lt
 8001144:	f005 050f 	andlt.w	r5, r5, #15
 8001148:	4a06      	ldrlt	r2, [pc, #24]	; (8001164 <HAL_NVIC_SetPriority+0x84>)
 800114a:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114c:	bfaa      	itet	ge
 800114e:	f505 4561 	addge.w	r5, r5, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	5553      	strblt	r3, [r2, r5]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001154:	f885 3300 	strbge.w	r3, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001158:	bd70      	pop	{r4, r5, r6, pc}
 800115a:	bf00      	nop
 800115c:	08008210 	.word	0x08008210
 8001160:	e000ed00 	.word	0xe000ed00
 8001164:	e000ed14 	.word	0xe000ed14

08001168 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001168:	3801      	subs	r0, #1
 800116a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800116e:	d20a      	bcs.n	8001186 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	4a07      	ldr	r2, [pc, #28]	; (8001190 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001174:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001176:	21f0      	movs	r1, #240	; 0xf0
 8001178:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800117c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001180:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001186:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001194:	4b8f      	ldr	r3, [pc, #572]	; (80013d4 <HAL_GPIO_Init+0x240>)
 8001196:	4298      	cmp	r0, r3
{
 8001198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800119c:	4604      	mov	r4, r0
 800119e:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80011a0:	d017      	beq.n	80011d2 <HAL_GPIO_Init+0x3e>
 80011a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011a6:	4298      	cmp	r0, r3
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0x3e>
 80011aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011ae:	4298      	cmp	r0, r3
 80011b0:	d00f      	beq.n	80011d2 <HAL_GPIO_Init+0x3e>
 80011b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011b6:	4298      	cmp	r0, r3
 80011b8:	d00b      	beq.n	80011d2 <HAL_GPIO_Init+0x3e>
 80011ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011be:	4298      	cmp	r0, r3
 80011c0:	d007      	beq.n	80011d2 <HAL_GPIO_Init+0x3e>
 80011c2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80011c6:	4298      	cmp	r0, r3
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x3e>
 80011ca:	21c3      	movs	r1, #195	; 0xc3
 80011cc:	4882      	ldr	r0, [pc, #520]	; (80013d8 <HAL_GPIO_Init+0x244>)
 80011ce:	f002 fe23 	bl	8003e18 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80011d2:	682b      	ldr	r3, [r5, #0]
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	b112      	cbz	r2, 80011de <HAL_GPIO_Init+0x4a>
 80011d8:	0c1b      	lsrs	r3, r3, #16
 80011da:	041b      	lsls	r3, r3, #16
 80011dc:	b11b      	cbz	r3, 80011e6 <HAL_GPIO_Init+0x52>
 80011de:	21c4      	movs	r1, #196	; 0xc4
 80011e0:	487d      	ldr	r0, [pc, #500]	; (80013d8 <HAL_GPIO_Init+0x244>)
 80011e2:	f002 fe19 	bl	8003e18 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80011e6:	686b      	ldr	r3, [r5, #4]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d917      	bls.n	800121c <HAL_GPIO_Init+0x88>
 80011ec:	f1a3 0211 	sub.w	r2, r3, #17
 80011f0:	2a01      	cmp	r2, #1
 80011f2:	d913      	bls.n	800121c <HAL_GPIO_Init+0x88>
 80011f4:	4979      	ldr	r1, [pc, #484]	; (80013dc <HAL_GPIO_Init+0x248>)
 80011f6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80011fa:	428a      	cmp	r2, r1
 80011fc:	d00e      	beq.n	800121c <HAL_GPIO_Init+0x88>
 80011fe:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8001202:	428b      	cmp	r3, r1
 8001204:	d00a      	beq.n	800121c <HAL_GPIO_Init+0x88>
 8001206:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 800120a:	428a      	cmp	r2, r1
 800120c:	d006      	beq.n	800121c <HAL_GPIO_Init+0x88>
 800120e:	4a74      	ldr	r2, [pc, #464]	; (80013e0 <HAL_GPIO_Init+0x24c>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x88>
 8001214:	21c5      	movs	r1, #197	; 0xc5
 8001216:	4870      	ldr	r0, [pc, #448]	; (80013d8 <HAL_GPIO_Init+0x244>)
 8001218:	f002 fdfe 	bl	8003e18 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800121c:	68ab      	ldr	r3, [r5, #8]
 800121e:	2b02      	cmp	r3, #2
 8001220:	d903      	bls.n	800122a <HAL_GPIO_Init+0x96>
 8001222:	21c6      	movs	r1, #198	; 0xc6
 8001224:	486c      	ldr	r0, [pc, #432]	; (80013d8 <HAL_GPIO_Init+0x244>)
 8001226:	f002 fdf7 	bl	8003e18 <assert_failed>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800122a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80013e8 <HAL_GPIO_Init+0x254>
{
 800122e:	2600      	movs	r6, #0
    ioposition = 0x01U << position;
 8001230:	2301      	movs	r3, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001232:	682a      	ldr	r2, [r5, #0]
    ioposition = 0x01U << position;
 8001234:	fa03 f706 	lsl.w	r7, r3, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001238:	ea07 0902 	and.w	r9, r7, r2
    if(iocurrent == ioposition)
 800123c:	454f      	cmp	r7, r9
 800123e:	f040 80bb 	bne.w	80013b8 <HAL_GPIO_Init+0x224>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001242:	686a      	ldr	r2, [r5, #4]
 8001244:	f022 0210 	bic.w	r2, r2, #16
 8001248:	2a02      	cmp	r2, #2
 800124a:	d11b      	bne.n	8001284 <HAL_GPIO_Init+0xf0>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800124c:	6929      	ldr	r1, [r5, #16]
 800124e:	290f      	cmp	r1, #15
 8001250:	d804      	bhi.n	800125c <HAL_GPIO_Init+0xc8>
 8001252:	f249 72f7 	movw	r2, #38903	; 0x97f7
 8001256:	40ca      	lsrs	r2, r1
 8001258:	07d2      	lsls	r2, r2, #31
 800125a:	d403      	bmi.n	8001264 <HAL_GPIO_Init+0xd0>
 800125c:	21d7      	movs	r1, #215	; 0xd7
 800125e:	485e      	ldr	r0, [pc, #376]	; (80013d8 <HAL_GPIO_Init+0x244>)
 8001260:	f002 fdda 	bl	8003e18 <assert_failed>
        temp = GPIOx->AFR[position >> 3U];
 8001264:	08f1      	lsrs	r1, r6, #3
 8001266:	eb04 0181 	add.w	r1, r4, r1, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800126a:	f006 0207 	and.w	r2, r6, #7
 800126e:	0090      	lsls	r0, r2, #2
        temp = GPIOx->AFR[position >> 3U];
 8001270:	6a0b      	ldr	r3, [r1, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001272:	220f      	movs	r2, #15
 8001274:	4082      	lsls	r2, r0
 8001276:	ea23 0c02 	bic.w	ip, r3, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800127a:	692a      	ldr	r2, [r5, #16]
 800127c:	4082      	lsls	r2, r0
 800127e:	ea42 020c 	orr.w	r2, r2, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001282:	620a      	str	r2, [r1, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001284:	686a      	ldr	r2, [r5, #4]
      temp = GPIOx->MODER;
 8001286:	6820      	ldr	r0, [r4, #0]
 8001288:	ea4f 0b46 	mov.w	fp, r6, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800128c:	f04f 0a03 	mov.w	sl, #3
 8001290:	fa0a fa0b 	lsl.w	sl, sl, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001294:	f002 0103 	and.w	r1, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001298:	ea6f 0a0a 	mvn.w	sl, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800129c:	f022 0210 	bic.w	r2, r2, #16
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012a0:	ea0a 0000 	and.w	r0, sl, r0
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a4:	fa01 f10b 	lsl.w	r1, r1, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a8:	3a01      	subs	r2, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012aa:	4301      	orrs	r1, r0
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ac:	2a01      	cmp	r2, #1
      GPIOx->MODER = temp;
 80012ae:	6021      	str	r1, [r4, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012b0:	d817      	bhi.n	80012e2 <HAL_GPIO_Init+0x14e>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80012b2:	68ea      	ldr	r2, [r5, #12]
 80012b4:	2a03      	cmp	r2, #3
 80012b6:	d903      	bls.n	80012c0 <HAL_GPIO_Init+0x12c>
 80012b8:	21ea      	movs	r1, #234	; 0xea
 80012ba:	4847      	ldr	r0, [pc, #284]	; (80013d8 <HAL_GPIO_Init+0x244>)
 80012bc:	f002 fdac 	bl	8003e18 <assert_failed>
        temp = GPIOx->OSPEEDR; 
 80012c0:	68a1      	ldr	r1, [r4, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012c2:	68ea      	ldr	r2, [r5, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012c4:	686b      	ldr	r3, [r5, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c6:	ea0a 0101 	and.w	r1, sl, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ca:	fa02 f20b 	lsl.w	r2, r2, fp
 80012ce:	430a      	orrs	r2, r1
        GPIOx->OSPEEDR = temp;
 80012d0:	60a2      	str	r2, [r4, #8]
        temp = GPIOx->OTYPER;
 80012d2:	6862      	ldr	r2, [r4, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012d4:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d8:	ea22 0207 	bic.w	r2, r2, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012dc:	40b3      	lsls	r3, r6
 80012de:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 80012e0:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 80012e2:	68e3      	ldr	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012e4:	6868      	ldr	r0, [r5, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012e6:	ea0a 0a03 	and.w	sl, sl, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ea:	68ab      	ldr	r3, [r5, #8]
 80012ec:	fa03 f30b 	lsl.w	r3, r3, fp
 80012f0:	ea43 030a 	orr.w	r3, r3, sl
      GPIOx->PUPDR = temp;
 80012f4:	60e3      	str	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012f6:	00c3      	lsls	r3, r0, #3
 80012f8:	d55e      	bpl.n	80013b8 <HAL_GPIO_Init+0x224>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	4a3a      	ldr	r2, [pc, #232]	; (80013e4 <HAL_GPIO_Init+0x250>)
 80012fc:	2300      	movs	r3, #0
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001302:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001306:	6451      	str	r1, [r2, #68]	; 0x44
 8001308:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800130a:	f026 0103 	bic.w	r1, r6, #3
 800130e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001312:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001316:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800131a:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800131c:	f006 0c03 	and.w	ip, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001320:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001322:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001326:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800132a:	220f      	movs	r2, #15
 800132c:	fa02 f20c 	lsl.w	r2, r2, ip
 8001330:	ea2e 0e02 	bic.w	lr, lr, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001334:	4a27      	ldr	r2, [pc, #156]	; (80013d4 <HAL_GPIO_Init+0x240>)
 8001336:	4294      	cmp	r4, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x1ce>
 800133a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800133e:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 8001342:	429c      	cmp	r4, r3
 8001344:	d03f      	beq.n	80013c6 <HAL_GPIO_Init+0x232>
 8001346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800134a:	429c      	cmp	r4, r3
 800134c:	d03d      	beq.n	80013ca <HAL_GPIO_Init+0x236>
 800134e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001352:	429c      	cmp	r4, r3
 8001354:	d03b      	beq.n	80013ce <HAL_GPIO_Init+0x23a>
 8001356:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800135a:	429c      	cmp	r4, r3
 800135c:	bf14      	ite	ne
 800135e:	2307      	movne	r3, #7
 8001360:	2304      	moveq	r3, #4
 8001362:	fa03 f30c 	lsl.w	r3, r3, ip
 8001366:	ea43 030e 	orr.w	r3, r3, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800136a:	608b      	str	r3, [r1, #8]
        temp = EXTI->IMR;
 800136c:	f8d8 2000 	ldr.w	r2, [r8]
        temp &= ~((uint32_t)iocurrent);
 8001370:	ea6f 0109 	mvn.w	r1, r9
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001374:	03c7      	lsls	r7, r0, #15
        temp &= ~((uint32_t)iocurrent);
 8001376:	bf54      	ite	pl
 8001378:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 800137a:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR = temp;
 800137e:	f8c8 2000 	str.w	r2, [r8]

        temp = EXTI->EMR;
 8001382:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001386:	0383      	lsls	r3, r0, #14
        temp &= ~((uint32_t)iocurrent);
 8001388:	bf54      	ite	pl
 800138a:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 800138c:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->EMR = temp;
 8001390:	f8c8 2004 	str.w	r2, [r8, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001394:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001398:	02c7      	lsls	r7, r0, #11
        temp &= ~((uint32_t)iocurrent);
 800139a:	bf54      	ite	pl
 800139c:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 800139e:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR = temp;
 80013a2:	f8c8 2008 	str.w	r2, [r8, #8]

        temp = EXTI->FTSR;
 80013a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013aa:	0282      	lsls	r2, r0, #10
        temp &= ~((uint32_t)iocurrent);
 80013ac:	bf54      	ite	pl
 80013ae:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 80013b0:	ea49 0303 	orrmi.w	r3, r9, r3
        }
        EXTI->FTSR = temp;
 80013b4:	f8c8 300c 	str.w	r3, [r8, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b8:	3601      	adds	r6, #1
 80013ba:	2e10      	cmp	r6, #16
 80013bc:	f47f af38 	bne.w	8001230 <HAL_GPIO_Init+0x9c>
      }
    }
  }
}
 80013c0:	b003      	add	sp, #12
 80013c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013c6:	2301      	movs	r3, #1
 80013c8:	e7cb      	b.n	8001362 <HAL_GPIO_Init+0x1ce>
 80013ca:	2302      	movs	r3, #2
 80013cc:	e7c9      	b.n	8001362 <HAL_GPIO_Init+0x1ce>
 80013ce:	2303      	movs	r3, #3
 80013d0:	e7c7      	b.n	8001362 <HAL_GPIO_Init+0x1ce>
 80013d2:	bf00      	nop
 80013d4:	40020000 	.word	0x40020000
 80013d8:	0800823f 	.word	0x0800823f
 80013dc:	10110000 	.word	0x10110000
 80013e0:	10220000 	.word	0x10220000
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40013c00 	.word	0x40013c00

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b570      	push	{r4, r5, r6, lr}
 80013ee:	4605      	mov	r5, r0
 80013f0:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80013f2:	460c      	mov	r4, r1
 80013f4:	b921      	cbnz	r1, 8001400 <HAL_GPIO_WritePin+0x14>
 80013f6:	f240 11af 	movw	r1, #431	; 0x1af
 80013fa:	4808      	ldr	r0, [pc, #32]	; (800141c <HAL_GPIO_WritePin+0x30>)
 80013fc:	f002 fd0c 	bl	8003e18 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001400:	2e01      	cmp	r6, #1
 8001402:	d906      	bls.n	8001412 <HAL_GPIO_WritePin+0x26>
 8001404:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8001408:	4804      	ldr	r0, [pc, #16]	; (800141c <HAL_GPIO_WritePin+0x30>)
 800140a:	f002 fd05 	bl	8003e18 <assert_failed>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800140e:	61ac      	str	r4, [r5, #24]
  }
}
 8001410:	bd70      	pop	{r4, r5, r6, pc}
  if(PinState != GPIO_PIN_RESET)
 8001412:	2e00      	cmp	r6, #0
 8001414:	d1fb      	bne.n	800140e <HAL_GPIO_WritePin+0x22>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001416:	0424      	lsls	r4, r4, #16
 8001418:	e7f9      	b.n	800140e <HAL_GPIO_WritePin+0x22>
 800141a:	bf00      	nop
 800141c:	0800823f 	.word	0x0800823f

08001420 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001420:	b538      	push	{r3, r4, r5, lr}
 8001422:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001424:	460c      	mov	r4, r1
 8001426:	b921      	cbnz	r1, 8001432 <HAL_GPIO_TogglePin+0x12>
 8001428:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800142c:	4803      	ldr	r0, [pc, #12]	; (800143c <HAL_GPIO_TogglePin+0x1c>)
 800142e:	f002 fcf3 	bl	8003e18 <assert_failed>

  GPIOx->ODR ^= GPIO_Pin;
 8001432:	696b      	ldr	r3, [r5, #20]
 8001434:	405c      	eors	r4, r3
 8001436:	616c      	str	r4, [r5, #20]
}
 8001438:	bd38      	pop	{r3, r4, r5, pc}
 800143a:	bf00      	nop
 800143c:	0800823f 	.word	0x0800823f

08001440 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001442:	4604      	mov	r4, r0
 8001444:	b910      	cbnz	r0, 800144c <HAL_RCC_OscConfig+0xc>
  {
    return HAL_ERROR;
 8001446:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001448:	b003      	add	sp, #12
 800144a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800144c:	6803      	ldr	r3, [r0, #0]
 800144e:	2b0f      	cmp	r3, #15
 8001450:	d903      	bls.n	800145a <HAL_RCC_OscConfig+0x1a>
 8001452:	21f8      	movs	r1, #248	; 0xf8
 8001454:	489d      	ldr	r0, [pc, #628]	; (80016cc <HAL_RCC_OscConfig+0x28c>)
 8001456:	f002 fcdf 	bl	8003e18 <assert_failed>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800145a:	6823      	ldr	r3, [r4, #0]
 800145c:	07dd      	lsls	r5, r3, #31
 800145e:	d418      	bmi.n	8001492 <HAL_RCC_OscConfig+0x52>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001460:	6823      	ldr	r3, [r4, #0]
 8001462:	0798      	lsls	r0, r3, #30
 8001464:	d46b      	bmi.n	800153e <HAL_RCC_OscConfig+0xfe>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001466:	6823      	ldr	r3, [r4, #0]
 8001468:	071a      	lsls	r2, r3, #28
 800146a:	f100 80be 	bmi.w	80015ea <HAL_RCC_OscConfig+0x1aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	075b      	lsls	r3, r3, #29
 8001472:	f100 80e4 	bmi.w	800163e <HAL_RCC_OscConfig+0x1fe>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001476:	69a3      	ldr	r3, [r4, #24]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d904      	bls.n	8001486 <HAL_RCC_OscConfig+0x46>
 800147c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8001480:	4892      	ldr	r0, [pc, #584]	; (80016cc <HAL_RCC_OscConfig+0x28c>)
 8001482:	f002 fcc9 	bl	8003e18 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001486:	69a2      	ldr	r2, [r4, #24]
 8001488:	2a00      	cmp	r2, #0
 800148a:	f040 8142 	bne.w	8001712 <HAL_RCC_OscConfig+0x2d2>
  return HAL_OK;
 800148e:	2000      	movs	r0, #0
 8001490:	e7da      	b.n	8001448 <HAL_RCC_OscConfig+0x8>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001492:	6863      	ldr	r3, [r4, #4]
 8001494:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8001498:	d006      	beq.n	80014a8 <HAL_RCC_OscConfig+0x68>
 800149a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800149e:	d003      	beq.n	80014a8 <HAL_RCC_OscConfig+0x68>
 80014a0:	21fd      	movs	r1, #253	; 0xfd
 80014a2:	488a      	ldr	r0, [pc, #552]	; (80016cc <HAL_RCC_OscConfig+0x28c>)
 80014a4:	f002 fcb8 	bl	8003e18 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014a8:	4b89      	ldr	r3, [pc, #548]	; (80016d0 <HAL_RCC_OscConfig+0x290>)
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	f002 020c 	and.w	r2, r2, #12
 80014b0:	2a04      	cmp	r2, #4
 80014b2:	d007      	beq.n	80014c4 <HAL_RCC_OscConfig+0x84>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ba:	2a08      	cmp	r2, #8
 80014bc:	d10a      	bne.n	80014d4 <HAL_RCC_OscConfig+0x94>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	0259      	lsls	r1, r3, #9
 80014c2:	d507      	bpl.n	80014d4 <HAL_RCC_OscConfig+0x94>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c4:	4b82      	ldr	r3, [pc, #520]	; (80016d0 <HAL_RCC_OscConfig+0x290>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	039a      	lsls	r2, r3, #14
 80014ca:	d5c9      	bpl.n	8001460 <HAL_RCC_OscConfig+0x20>
 80014cc:	6863      	ldr	r3, [r4, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1c6      	bne.n	8001460 <HAL_RCC_OscConfig+0x20>
 80014d2:	e7b8      	b.n	8001446 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d4:	6863      	ldr	r3, [r4, #4]
 80014d6:	4d7e      	ldr	r5, [pc, #504]	; (80016d0 <HAL_RCC_OscConfig+0x290>)
 80014d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014dc:	d111      	bne.n	8001502 <HAL_RCC_OscConfig+0xc2>
 80014de:	682b      	ldr	r3, [r5, #0]
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80014e6:	f7ff fdd7 	bl	8001098 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ea:	4d79      	ldr	r5, [pc, #484]	; (80016d0 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80014ec:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	682b      	ldr	r3, [r5, #0]
 80014f0:	039b      	lsls	r3, r3, #14
 80014f2:	d4b5      	bmi.n	8001460 <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fdd0 	bl	8001098 <HAL_GetTick>
 80014f8:	1b80      	subs	r0, r0, r6
 80014fa:	2864      	cmp	r0, #100	; 0x64
 80014fc:	d9f7      	bls.n	80014ee <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
 80014fe:	2003      	movs	r0, #3
 8001500:	e7a2      	b.n	8001448 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001502:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001506:	d104      	bne.n	8001512 <HAL_RCC_OscConfig+0xd2>
 8001508:	682b      	ldr	r3, [r5, #0]
 800150a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800150e:	602b      	str	r3, [r5, #0]
 8001510:	e7e5      	b.n	80014de <HAL_RCC_OscConfig+0x9e>
 8001512:	682a      	ldr	r2, [r5, #0]
 8001514:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001518:	602a      	str	r2, [r5, #0]
 800151a:	682a      	ldr	r2, [r5, #0]
 800151c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001520:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1df      	bne.n	80014e6 <HAL_RCC_OscConfig+0xa6>
        tickstart = HAL_GetTick();
 8001526:	f7ff fdb7 	bl	8001098 <HAL_GetTick>
 800152a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152c:	682b      	ldr	r3, [r5, #0]
 800152e:	039f      	lsls	r7, r3, #14
 8001530:	d596      	bpl.n	8001460 <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001532:	f7ff fdb1 	bl	8001098 <HAL_GetTick>
 8001536:	1b80      	subs	r0, r0, r6
 8001538:	2864      	cmp	r0, #100	; 0x64
 800153a:	d9f7      	bls.n	800152c <HAL_RCC_OscConfig+0xec>
 800153c:	e7df      	b.n	80014fe <HAL_RCC_OscConfig+0xbe>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800153e:	68e3      	ldr	r3, [r4, #12]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d904      	bls.n	800154e <HAL_RCC_OscConfig+0x10e>
 8001544:	f240 112f 	movw	r1, #303	; 0x12f
 8001548:	4860      	ldr	r0, [pc, #384]	; (80016cc <HAL_RCC_OscConfig+0x28c>)
 800154a:	f002 fc65 	bl	8003e18 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800154e:	6923      	ldr	r3, [r4, #16]
 8001550:	2b1f      	cmp	r3, #31
 8001552:	d904      	bls.n	800155e <HAL_RCC_OscConfig+0x11e>
 8001554:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001558:	485c      	ldr	r0, [pc, #368]	; (80016cc <HAL_RCC_OscConfig+0x28c>)
 800155a:	f002 fc5d 	bl	8003e18 <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800155e:	4b5c      	ldr	r3, [pc, #368]	; (80016d0 <HAL_RCC_OscConfig+0x290>)
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	f012 0f0c 	tst.w	r2, #12
 8001566:	d007      	beq.n	8001578 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800156e:	2a08      	cmp	r2, #8
 8001570:	d112      	bne.n	8001598 <HAL_RCC_OscConfig+0x158>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	025e      	lsls	r6, r3, #9
 8001576:	d40f      	bmi.n	8001598 <HAL_RCC_OscConfig+0x158>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001578:	4b55      	ldr	r3, [pc, #340]	; (80016d0 <HAL_RCC_OscConfig+0x290>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	0795      	lsls	r5, r2, #30
 800157e:	d503      	bpl.n	8001588 <HAL_RCC_OscConfig+0x148>
 8001580:	68e2      	ldr	r2, [r4, #12]
 8001582:	2a01      	cmp	r2, #1
 8001584:	f47f af5f 	bne.w	8001446 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	6921      	ldr	r1, [r4, #16]
 800158c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001590:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001594:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001596:	e766      	b.n	8001466 <HAL_RCC_OscConfig+0x26>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001598:	68e2      	ldr	r2, [r4, #12]
 800159a:	4b4e      	ldr	r3, [pc, #312]	; (80016d4 <HAL_RCC_OscConfig+0x294>)
 800159c:	b1b2      	cbz	r2, 80015cc <HAL_RCC_OscConfig+0x18c>
        __HAL_RCC_HSI_ENABLE();
 800159e:	2201      	movs	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015a2:	f7ff fd79 	bl	8001098 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a6:	4d4a      	ldr	r5, [pc, #296]	; (80016d0 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80015a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015aa:	682b      	ldr	r3, [r5, #0]
 80015ac:	0798      	lsls	r0, r3, #30
 80015ae:	d507      	bpl.n	80015c0 <HAL_RCC_OscConfig+0x180>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b0:	682b      	ldr	r3, [r5, #0]
 80015b2:	6922      	ldr	r2, [r4, #16]
 80015b4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80015b8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80015bc:	602b      	str	r3, [r5, #0]
 80015be:	e752      	b.n	8001466 <HAL_RCC_OscConfig+0x26>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c0:	f7ff fd6a 	bl	8001098 <HAL_GetTick>
 80015c4:	1b80      	subs	r0, r0, r6
 80015c6:	2802      	cmp	r0, #2
 80015c8:	d9ef      	bls.n	80015aa <HAL_RCC_OscConfig+0x16a>
 80015ca:	e798      	b.n	80014fe <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_DISABLE();
 80015cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80015ce:	f7ff fd63 	bl	8001098 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d2:	4d3f      	ldr	r5, [pc, #252]	; (80016d0 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80015d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	682b      	ldr	r3, [r5, #0]
 80015d8:	0799      	lsls	r1, r3, #30
 80015da:	f57f af44 	bpl.w	8001466 <HAL_RCC_OscConfig+0x26>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015de:	f7ff fd5b 	bl	8001098 <HAL_GetTick>
 80015e2:	1b80      	subs	r0, r0, r6
 80015e4:	2802      	cmp	r0, #2
 80015e6:	d9f6      	bls.n	80015d6 <HAL_RCC_OscConfig+0x196>
 80015e8:	e789      	b.n	80014fe <HAL_RCC_OscConfig+0xbe>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80015ea:	6963      	ldr	r3, [r4, #20]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d904      	bls.n	80015fa <HAL_RCC_OscConfig+0x1ba>
 80015f0:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80015f4:	4835      	ldr	r0, [pc, #212]	; (80016cc <HAL_RCC_OscConfig+0x28c>)
 80015f6:	f002 fc0f 	bl	8003e18 <assert_failed>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015fa:	6962      	ldr	r2, [r4, #20]
 80015fc:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <HAL_RCC_OscConfig+0x298>)
 80015fe:	b17a      	cbz	r2, 8001620 <HAL_RCC_OscConfig+0x1e0>
      __HAL_RCC_LSI_ENABLE();
 8001600:	2201      	movs	r2, #1
 8001602:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001604:	f7ff fd48 	bl	8001098 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001608:	4d31      	ldr	r5, [pc, #196]	; (80016d0 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800160a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800160e:	079f      	lsls	r7, r3, #30
 8001610:	f53f af2d 	bmi.w	800146e <HAL_RCC_OscConfig+0x2e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001614:	f7ff fd40 	bl	8001098 <HAL_GetTick>
 8001618:	1b80      	subs	r0, r0, r6
 800161a:	2802      	cmp	r0, #2
 800161c:	d9f6      	bls.n	800160c <HAL_RCC_OscConfig+0x1cc>
 800161e:	e76e      	b.n	80014fe <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_LSI_DISABLE();
 8001620:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001622:	f7ff fd39 	bl	8001098 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001626:	4d2a      	ldr	r5, [pc, #168]	; (80016d0 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8001628:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800162a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800162c:	0798      	lsls	r0, r3, #30
 800162e:	f57f af1e 	bpl.w	800146e <HAL_RCC_OscConfig+0x2e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001632:	f7ff fd31 	bl	8001098 <HAL_GetTick>
 8001636:	1b80      	subs	r0, r0, r6
 8001638:	2802      	cmp	r0, #2
 800163a:	d9f6      	bls.n	800162a <HAL_RCC_OscConfig+0x1ea>
 800163c:	e75f      	b.n	80014fe <HAL_RCC_OscConfig+0xbe>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800163e:	68a3      	ldr	r3, [r4, #8]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d906      	bls.n	8001652 <HAL_RCC_OscConfig+0x212>
 8001644:	2b05      	cmp	r3, #5
 8001646:	d004      	beq.n	8001652 <HAL_RCC_OscConfig+0x212>
 8001648:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800164c:	481f      	ldr	r0, [pc, #124]	; (80016cc <HAL_RCC_OscConfig+0x28c>)
 800164e:	f002 fbe3 	bl	8003e18 <assert_failed>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	4b1e      	ldr	r3, [pc, #120]	; (80016d0 <HAL_RCC_OscConfig+0x290>)
    PWR->CR |= PWR_CR_DBP;
 8001658:	4d20      	ldr	r5, [pc, #128]	; (80016dc <HAL_RCC_OscConfig+0x29c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800165c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001660:	641a      	str	r2, [r3, #64]	; 0x40
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800166c:	682b      	ldr	r3, [r5, #0]
 800166e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001672:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001674:	f7ff fd10 	bl	8001098 <HAL_GetTick>
 8001678:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800167a:	682b      	ldr	r3, [r5, #0]
 800167c:	05d9      	lsls	r1, r3, #23
 800167e:	d517      	bpl.n	80016b0 <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001680:	68a3      	ldr	r3, [r4, #8]
 8001682:	4d13      	ldr	r5, [pc, #76]	; (80016d0 <HAL_RCC_OscConfig+0x290>)
 8001684:	2b01      	cmp	r3, #1
 8001686:	d119      	bne.n	80016bc <HAL_RCC_OscConfig+0x27c>
 8001688:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001690:	f7ff fd02 	bl	8001098 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001694:	4d0e      	ldr	r5, [pc, #56]	; (80016d0 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8001696:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001698:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800169e:	079a      	lsls	r2, r3, #30
 80016a0:	f53f aee9 	bmi.w	8001476 <HAL_RCC_OscConfig+0x36>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a4:	f7ff fcf8 	bl	8001098 <HAL_GetTick>
 80016a8:	1b80      	subs	r0, r0, r6
 80016aa:	42b8      	cmp	r0, r7
 80016ac:	d9f6      	bls.n	800169c <HAL_RCC_OscConfig+0x25c>
 80016ae:	e726      	b.n	80014fe <HAL_RCC_OscConfig+0xbe>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80016b0:	f7ff fcf2 	bl	8001098 <HAL_GetTick>
 80016b4:	1b80      	subs	r0, r0, r6
 80016b6:	2802      	cmp	r0, #2
 80016b8:	d9df      	bls.n	800167a <HAL_RCC_OscConfig+0x23a>
 80016ba:	e720      	b.n	80014fe <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016bc:	2b05      	cmp	r3, #5
 80016be:	d10f      	bne.n	80016e0 <HAL_RCC_OscConfig+0x2a0>
 80016c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80016c2:	f043 0304 	orr.w	r3, r3, #4
 80016c6:	672b      	str	r3, [r5, #112]	; 0x70
 80016c8:	e7de      	b.n	8001688 <HAL_RCC_OscConfig+0x248>
 80016ca:	bf00      	nop
 80016cc:	0800826c 	.word	0x0800826c
 80016d0:	40023800 	.word	0x40023800
 80016d4:	42470000 	.word	0x42470000
 80016d8:	42470e80 	.word	0x42470e80
 80016dc:	40007000 	.word	0x40007000
 80016e0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80016e2:	f022 0201 	bic.w	r2, r2, #1
 80016e6:	672a      	str	r2, [r5, #112]	; 0x70
 80016e8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80016ea:	f022 0204 	bic.w	r2, r2, #4
 80016ee:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1cd      	bne.n	8001690 <HAL_RCC_OscConfig+0x250>
      tickstart = HAL_GetTick();
 80016f4:	f7ff fcd0 	bl	8001098 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f8:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80016fc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001700:	079b      	lsls	r3, r3, #30
 8001702:	f57f aeb8 	bpl.w	8001476 <HAL_RCC_OscConfig+0x36>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7ff fcc7 	bl	8001098 <HAL_GetTick>
 800170a:	1b80      	subs	r0, r0, r6
 800170c:	42b8      	cmp	r0, r7
 800170e:	d9f6      	bls.n	80016fe <HAL_RCC_OscConfig+0x2be>
 8001710:	e6f5      	b.n	80014fe <HAL_RCC_OscConfig+0xbe>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001712:	4e3c      	ldr	r6, [pc, #240]	; (8001804 <HAL_RCC_OscConfig+0x3c4>)
 8001714:	68b3      	ldr	r3, [r6, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b08      	cmp	r3, #8
 800171c:	f43f ae93 	beq.w	8001446 <HAL_RCC_OscConfig+0x6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001720:	2a02      	cmp	r2, #2
 8001722:	4d39      	ldr	r5, [pc, #228]	; (8001808 <HAL_RCC_OscConfig+0x3c8>)
 8001724:	d15e      	bne.n	80017e4 <HAL_RCC_OscConfig+0x3a4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001726:	69e3      	ldr	r3, [r4, #28]
 8001728:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800172c:	d004      	beq.n	8001738 <HAL_RCC_OscConfig+0x2f8>
 800172e:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001732:	4836      	ldr	r0, [pc, #216]	; (800180c <HAL_RCC_OscConfig+0x3cc>)
 8001734:	f002 fb70 	bl	8003e18 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001738:	6a23      	ldr	r3, [r4, #32]
 800173a:	2b3f      	cmp	r3, #63	; 0x3f
 800173c:	d904      	bls.n	8001748 <HAL_RCC_OscConfig+0x308>
 800173e:	f240 11d9 	movw	r1, #473	; 0x1d9
 8001742:	4832      	ldr	r0, [pc, #200]	; (800180c <HAL_RCC_OscConfig+0x3cc>)
 8001744:	f002 fb68 	bl	8003e18 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001748:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800174a:	3b32      	subs	r3, #50	; 0x32
 800174c:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8001750:	d904      	bls.n	800175c <HAL_RCC_OscConfig+0x31c>
 8001752:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8001756:	482d      	ldr	r0, [pc, #180]	; (800180c <HAL_RCC_OscConfig+0x3cc>)
 8001758:	f002 fb5e 	bl	8003e18 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800175c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800175e:	2a08      	cmp	r2, #8
 8001760:	d804      	bhi.n	800176c <HAL_RCC_OscConfig+0x32c>
 8001762:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8001766:	40d3      	lsrs	r3, r2
 8001768:	07d8      	lsls	r0, r3, #31
 800176a:	d404      	bmi.n	8001776 <HAL_RCC_OscConfig+0x336>
 800176c:	f240 11db 	movw	r1, #475	; 0x1db
 8001770:	4826      	ldr	r0, [pc, #152]	; (800180c <HAL_RCC_OscConfig+0x3cc>)
 8001772:	f002 fb51 	bl	8003e18 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001776:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001778:	3b02      	subs	r3, #2
 800177a:	2b0d      	cmp	r3, #13
 800177c:	d904      	bls.n	8001788 <HAL_RCC_OscConfig+0x348>
 800177e:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8001782:	4822      	ldr	r0, [pc, #136]	; (800180c <HAL_RCC_OscConfig+0x3cc>)
 8001784:	f002 fb48 	bl	8003e18 <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8001788:	2300      	movs	r3, #0
 800178a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800178c:	f7ff fc84 	bl	8001098 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001790:	4e1c      	ldr	r6, [pc, #112]	; (8001804 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8001792:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001794:	6833      	ldr	r3, [r6, #0]
 8001796:	0199      	lsls	r1, r3, #6
 8001798:	d41e      	bmi.n	80017d8 <HAL_RCC_OscConfig+0x398>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800179a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800179e:	4313      	orrs	r3, r2
 80017a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80017a2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80017a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80017a8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80017ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ae:	4c15      	ldr	r4, [pc, #84]	; (8001804 <HAL_RCC_OscConfig+0x3c4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017b0:	0852      	lsrs	r2, r2, #1
 80017b2:	3a01      	subs	r2, #1
 80017b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80017b8:	6073      	str	r3, [r6, #4]
        __HAL_RCC_PLL_ENABLE();
 80017ba:	2301      	movs	r3, #1
 80017bc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017be:	f7ff fc6b 	bl	8001098 <HAL_GetTick>
 80017c2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	019a      	lsls	r2, r3, #6
 80017c8:	f53f ae61 	bmi.w	800148e <HAL_RCC_OscConfig+0x4e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff fc64 	bl	8001098 <HAL_GetTick>
 80017d0:	1b40      	subs	r0, r0, r5
 80017d2:	2802      	cmp	r0, #2
 80017d4:	d9f6      	bls.n	80017c4 <HAL_RCC_OscConfig+0x384>
 80017d6:	e692      	b.n	80014fe <HAL_RCC_OscConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d8:	f7ff fc5e 	bl	8001098 <HAL_GetTick>
 80017dc:	1bc0      	subs	r0, r0, r7
 80017de:	2802      	cmp	r0, #2
 80017e0:	d9d8      	bls.n	8001794 <HAL_RCC_OscConfig+0x354>
 80017e2:	e68c      	b.n	80014fe <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_PLL_DISABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017e8:	f7ff fc56 	bl	8001098 <HAL_GetTick>
 80017ec:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ee:	6833      	ldr	r3, [r6, #0]
 80017f0:	019b      	lsls	r3, r3, #6
 80017f2:	f57f ae4c 	bpl.w	800148e <HAL_RCC_OscConfig+0x4e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f6:	f7ff fc4f 	bl	8001098 <HAL_GetTick>
 80017fa:	1b00      	subs	r0, r0, r4
 80017fc:	2802      	cmp	r0, #2
 80017fe:	d9f6      	bls.n	80017ee <HAL_RCC_OscConfig+0x3ae>
 8001800:	e67d      	b.n	80014fe <HAL_RCC_OscConfig+0xbe>
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	42470060 	.word	0x42470060
 800180c:	0800826c 	.word	0x0800826c

08001810 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001810:	4913      	ldr	r1, [pc, #76]	; (8001860 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001812:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001814:	688b      	ldr	r3, [r1, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b04      	cmp	r3, #4
 800181c:	d003      	beq.n	8001826 <HAL_RCC_GetSysClockFreq+0x16>
 800181e:	2b08      	cmp	r3, #8
 8001820:	d003      	beq.n	800182a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001822:	4810      	ldr	r0, [pc, #64]	; (8001864 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8001824:	e000      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 8001826:	4810      	ldr	r0, [pc, #64]	; (8001868 <HAL_RCC_GetSysClockFreq+0x58>)
}
 8001828:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800182a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800182c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800182e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001830:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001834:	bf14      	ite	ne
 8001836:	480c      	ldrne	r0, [pc, #48]	; (8001868 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001838:	480a      	ldreq	r0, [pc, #40]	; (8001864 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800183e:	bf18      	it	ne
 8001840:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001842:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001846:	fba1 0100 	umull	r0, r1, r1, r0
 800184a:	f7fe fcc9 	bl	80001e0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <HAL_RCC_GetSysClockFreq+0x50>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001856:	3301      	adds	r3, #1
 8001858:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 800185a:	fbb0 f0f3 	udiv	r0, r0, r3
 800185e:	e7e3      	b.n	8001828 <HAL_RCC_GetSysClockFreq+0x18>
 8001860:	40023800 	.word	0x40023800
 8001864:	00f42400 	.word	0x00f42400
 8001868:	007a1200 	.word	0x007a1200

0800186c <HAL_RCC_ClockConfig>:
{
 800186c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001870:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001872:	4604      	mov	r4, r0
 8001874:	b910      	cbnz	r0, 800187c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001876:	2001      	movs	r0, #1
}
 8001878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800187c:	6803      	ldr	r3, [r0, #0]
 800187e:	3b01      	subs	r3, #1
 8001880:	2b0e      	cmp	r3, #14
 8001882:	d904      	bls.n	800188e <HAL_RCC_ClockConfig+0x22>
 8001884:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001888:	486c      	ldr	r0, [pc, #432]	; (8001a3c <HAL_RCC_ClockConfig+0x1d0>)
 800188a:	f002 fac5 	bl	8003e18 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800188e:	2d07      	cmp	r5, #7
 8001890:	d904      	bls.n	800189c <HAL_RCC_ClockConfig+0x30>
 8001892:	f240 2141 	movw	r1, #577	; 0x241
 8001896:	4869      	ldr	r0, [pc, #420]	; (8001a3c <HAL_RCC_ClockConfig+0x1d0>)
 8001898:	f002 fabe 	bl	8003e18 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800189c:	4b68      	ldr	r3, [pc, #416]	; (8001a40 <HAL_RCC_ClockConfig+0x1d4>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	f002 020f 	and.w	r2, r2, #15
 80018a4:	42aa      	cmp	r2, r5
 80018a6:	d33c      	bcc.n	8001922 <HAL_RCC_ClockConfig+0xb6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a8:	6822      	ldr	r2, [r4, #0]
 80018aa:	0796      	lsls	r6, r2, #30
 80018ac:	d441      	bmi.n	8001932 <HAL_RCC_ClockConfig+0xc6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	07d9      	lsls	r1, r3, #31
 80018b2:	d46b      	bmi.n	800198c <HAL_RCC_ClockConfig+0x120>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b4:	4b62      	ldr	r3, [pc, #392]	; (8001a40 <HAL_RCC_ClockConfig+0x1d4>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	f002 020f 	and.w	r2, r2, #15
 80018bc:	42aa      	cmp	r2, r5
 80018be:	f200 809a 	bhi.w	80019f6 <HAL_RCC_ClockConfig+0x18a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c2:	6823      	ldr	r3, [r4, #0]
 80018c4:	075a      	lsls	r2, r3, #29
 80018c6:	f100 809f 	bmi.w	8001a08 <HAL_RCC_ClockConfig+0x19c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ca:	6823      	ldr	r3, [r4, #0]
 80018cc:	071b      	lsls	r3, r3, #28
 80018ce:	d518      	bpl.n	8001902 <HAL_RCC_ClockConfig+0x96>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80018d0:	6923      	ldr	r3, [r4, #16]
 80018d2:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 80018d6:	d00c      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x86>
 80018d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80018dc:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 80018e0:	d007      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x86>
 80018e2:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80018e6:	d004      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x86>
 80018e8:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 80018ec:	4853      	ldr	r0, [pc, #332]	; (8001a3c <HAL_RCC_ClockConfig+0x1d0>)
 80018ee:	f002 fa93 	bl	8003e18 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018f2:	4a54      	ldr	r2, [pc, #336]	; (8001a44 <HAL_RCC_ClockConfig+0x1d8>)
 80018f4:	6921      	ldr	r1, [r4, #16]
 80018f6:	6893      	ldr	r3, [r2, #8]
 80018f8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80018fc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001900:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001902:	f7ff ff85 	bl	8001810 <HAL_RCC_GetSysClockFreq>
 8001906:	4b4f      	ldr	r3, [pc, #316]	; (8001a44 <HAL_RCC_ClockConfig+0x1d8>)
 8001908:	4a4f      	ldr	r2, [pc, #316]	; (8001a48 <HAL_RCC_ClockConfig+0x1dc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001910:	5cd3      	ldrb	r3, [r2, r3]
 8001912:	40d8      	lsrs	r0, r3
 8001914:	4b4d      	ldr	r3, [pc, #308]	; (8001a4c <HAL_RCC_ClockConfig+0x1e0>)
 8001916:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001918:	200f      	movs	r0, #15
 800191a:	f7ff fb8f 	bl	800103c <HAL_InitTick>
  return HAL_OK;
 800191e:	2000      	movs	r0, #0
 8001920:	e7aa      	b.n	8001878 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001922:	b2ea      	uxtb	r2, r5
 8001924:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	42ab      	cmp	r3, r5
 800192e:	d1a2      	bne.n	8001876 <HAL_RCC_ClockConfig+0xa>
 8001930:	e7ba      	b.n	80018a8 <HAL_RCC_ClockConfig+0x3c>
 8001932:	4b44      	ldr	r3, [pc, #272]	; (8001a44 <HAL_RCC_ClockConfig+0x1d8>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001934:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001938:	bf1e      	ittt	ne
 800193a:	6899      	ldrne	r1, [r3, #8]
 800193c:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8001940:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001942:	0710      	lsls	r0, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001944:	bf42      	ittt	mi
 8001946:	689a      	ldrmi	r2, [r3, #8]
 8001948:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 800194c:	609a      	strmi	r2, [r3, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800194e:	68a3      	ldr	r3, [r4, #8]
 8001950:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8001954:	d012      	beq.n	800197c <HAL_RCC_ClockConfig+0x110>
 8001956:	f023 0220 	bic.w	r2, r3, #32
 800195a:	2a90      	cmp	r2, #144	; 0x90
 800195c:	d00e      	beq.n	800197c <HAL_RCC_ClockConfig+0x110>
 800195e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001962:	2aa0      	cmp	r2, #160	; 0xa0
 8001964:	d00a      	beq.n	800197c <HAL_RCC_ClockConfig+0x110>
 8001966:	f023 0210 	bic.w	r2, r3, #16
 800196a:	2ac0      	cmp	r2, #192	; 0xc0
 800196c:	d006      	beq.n	800197c <HAL_RCC_ClockConfig+0x110>
 800196e:	2bf0      	cmp	r3, #240	; 0xf0
 8001970:	d004      	beq.n	800197c <HAL_RCC_ClockConfig+0x110>
 8001972:	f44f 7119 	mov.w	r1, #612	; 0x264
 8001976:	4831      	ldr	r0, [pc, #196]	; (8001a3c <HAL_RCC_ClockConfig+0x1d0>)
 8001978:	f002 fa4e 	bl	8003e18 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800197c:	4a31      	ldr	r2, [pc, #196]	; (8001a44 <HAL_RCC_ClockConfig+0x1d8>)
 800197e:	68a1      	ldr	r1, [r4, #8]
 8001980:	6893      	ldr	r3, [r2, #8]
 8001982:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001986:	430b      	orrs	r3, r1
 8001988:	6093      	str	r3, [r2, #8]
 800198a:	e790      	b.n	80018ae <HAL_RCC_ClockConfig+0x42>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800198c:	6863      	ldr	r3, [r4, #4]
 800198e:	2b03      	cmp	r3, #3
 8001990:	d904      	bls.n	800199c <HAL_RCC_ClockConfig+0x130>
 8001992:	f240 216b 	movw	r1, #619	; 0x26b
 8001996:	4829      	ldr	r0, [pc, #164]	; (8001a3c <HAL_RCC_ClockConfig+0x1d0>)
 8001998:	f002 fa3e 	bl	8003e18 <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199c:	6862      	ldr	r2, [r4, #4]
 800199e:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <HAL_RCC_ClockConfig+0x1d8>)
 80019a0:	2a01      	cmp	r2, #1
 80019a2:	d11e      	bne.n	80019e2 <HAL_RCC_ClockConfig+0x176>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019aa:	f43f af64 	beq.w	8001876 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ae:	4e25      	ldr	r6, [pc, #148]	; (8001a44 <HAL_RCC_ClockConfig+0x1d8>)
 80019b0:	68b3      	ldr	r3, [r6, #8]
 80019b2:	f023 0303 	bic.w	r3, r3, #3
 80019b6:	4313      	orrs	r3, r2
 80019b8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80019ba:	f7ff fb6d 	bl	8001098 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019be:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80019c2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c4:	68b3      	ldr	r3, [r6, #8]
 80019c6:	6862      	ldr	r2, [r4, #4]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80019d0:	f43f af70 	beq.w	80018b4 <HAL_RCC_ClockConfig+0x48>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d4:	f7ff fb60 	bl	8001098 <HAL_GetTick>
 80019d8:	1bc0      	subs	r0, r0, r7
 80019da:	4540      	cmp	r0, r8
 80019dc:	d9f2      	bls.n	80019c4 <HAL_RCC_ClockConfig+0x158>
        return HAL_TIMEOUT;
 80019de:	2003      	movs	r0, #3
 80019e0:	e74a      	b.n	8001878 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019e2:	1e91      	subs	r1, r2, #2
 80019e4:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019e8:	d802      	bhi.n	80019f0 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80019ee:	e7dc      	b.n	80019aa <HAL_RCC_ClockConfig+0x13e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f0:	f013 0f02 	tst.w	r3, #2
 80019f4:	e7d9      	b.n	80019aa <HAL_RCC_ClockConfig+0x13e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	b2ea      	uxtb	r2, r5
 80019f8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 030f 	and.w	r3, r3, #15
 8001a00:	42ab      	cmp	r3, r5
 8001a02:	f47f af38 	bne.w	8001876 <HAL_RCC_ClockConfig+0xa>
 8001a06:	e75c      	b.n	80018c2 <HAL_RCC_ClockConfig+0x56>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001a08:	68e3      	ldr	r3, [r4, #12]
 8001a0a:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8001a0e:	d00c      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x1be>
 8001a10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001a14:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8001a18:	d007      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x1be>
 8001a1a:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001a1e:	d004      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x1be>
 8001a20:	f240 21a9 	movw	r1, #681	; 0x2a9
 8001a24:	4805      	ldr	r0, [pc, #20]	; (8001a3c <HAL_RCC_ClockConfig+0x1d0>)
 8001a26:	f002 f9f7 	bl	8003e18 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a2a:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <HAL_RCC_ClockConfig+0x1d8>)
 8001a2c:	68e1      	ldr	r1, [r4, #12]
 8001a2e:	6893      	ldr	r3, [r2, #8]
 8001a30:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001a34:	430b      	orrs	r3, r1
 8001a36:	6093      	str	r3, [r2, #8]
 8001a38:	e747      	b.n	80018ca <HAL_RCC_ClockConfig+0x5e>
 8001a3a:	bf00      	nop
 8001a3c:	0800826c 	.word	0x0800826c
 8001a40:	40023c00 	.word	0x40023c00
 8001a44:	40023800 	.word	0x40023800
 8001a48:	080081f8 	.word	0x080081f8
 8001a4c:	20000000 	.word	0x20000000

08001a50 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001a52:	4a05      	ldr	r2, [pc, #20]	; (8001a68 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001a5a:	5cd3      	ldrb	r3, [r2, r3]
 8001a5c:	4a03      	ldr	r2, [pc, #12]	; (8001a6c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001a5e:	6810      	ldr	r0, [r2, #0]
}
 8001a60:	40d8      	lsrs	r0, r3
 8001a62:	4770      	bx	lr
 8001a64:	40023800 	.word	0x40023800
 8001a68:	08008208 	.word	0x08008208
 8001a6c:	20000000 	.word	0x20000000

08001a70 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001a72:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001a7a:	5cd3      	ldrb	r3, [r2, r3]
 8001a7c:	4a03      	ldr	r2, [pc, #12]	; (8001a8c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001a7e:	6810      	ldr	r0, [r2, #0]
}
 8001a80:	40d8      	lsrs	r0, r3
 8001a82:	4770      	bx	lr
 8001a84:	40023800 	.word	0x40023800
 8001a88:	08008208 	.word	0x08008208
 8001a8c:	20000000 	.word	0x20000000

08001a90 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmpreg = 0x00U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8001a94:	6842      	ldr	r2, [r0, #4]
 8001a96:	4b9d      	ldr	r3, [pc, #628]	; (8001d0c <UART_SetConfig+0x27c>)
 8001a98:	429a      	cmp	r2, r3
{
 8001a9a:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8001a9c:	d904      	bls.n	8001aa8 <UART_SetConfig+0x18>
 8001a9e:	f640 1185 	movw	r1, #2437	; 0x985
 8001aa2:	489b      	ldr	r0, [pc, #620]	; (8001d10 <UART_SetConfig+0x280>)
 8001aa4:	f002 f9b8 	bl	8003e18 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8001aa8:	68e3      	ldr	r3, [r4, #12]
 8001aaa:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8001aae:	d004      	beq.n	8001aba <UART_SetConfig+0x2a>
 8001ab0:	f640 1186 	movw	r1, #2438	; 0x986
 8001ab4:	4896      	ldr	r0, [pc, #600]	; (8001d10 <UART_SetConfig+0x280>)
 8001ab6:	f002 f9af 	bl	8003e18 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8001aba:	6923      	ldr	r3, [r4, #16]
 8001abc:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8001ac0:	d007      	beq.n	8001ad2 <UART_SetConfig+0x42>
 8001ac2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001ac6:	d004      	beq.n	8001ad2 <UART_SetConfig+0x42>
 8001ac8:	f640 1187 	movw	r1, #2439	; 0x987
 8001acc:	4890      	ldr	r0, [pc, #576]	; (8001d10 <UART_SetConfig+0x280>)
 8001ace:	f002 f9a3 	bl	8003e18 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8001ad2:	6963      	ldr	r3, [r4, #20]
 8001ad4:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 8001ad8:	4213      	tst	r3, r2
 8001ada:	d100      	bne.n	8001ade <UART_SetConfig+0x4e>
 8001adc:	b923      	cbnz	r3, 8001ae8 <UART_SetConfig+0x58>
 8001ade:	f640 1188 	movw	r1, #2440	; 0x988
 8001ae2:	488b      	ldr	r0, [pc, #556]	; (8001d10 <UART_SetConfig+0x280>)
 8001ae4:	f002 f998 	bl	8003e18 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001ae8:	6823      	ldr	r3, [r4, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001aea:	68e1      	ldr	r1, [r4, #12]
  tmpreg = huart->Instance->CR2;
 8001aec:	691a      	ldr	r2, [r3, #16]
  /* Configure the UART Word Length, Parity and mode:
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001aee:	6925      	ldr	r5, [r4, #16]
 8001af0:	69e0      	ldr	r0, [r4, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001af2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001af6:	430a      	orrs	r2, r1
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001af8:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001afa:	68a2      	ldr	r2, [r4, #8]
  tmpreg = huart->Instance->CR1;
 8001afc:	68d9      	ldr	r1, [r3, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001afe:	432a      	orrs	r2, r5
 8001b00:	6965      	ldr	r5, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001b02:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b06:	432a      	orrs	r2, r5
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001b08:	f021 010c 	bic.w	r1, r1, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b0c:	4302      	orrs	r2, r0
 8001b0e:	430a      	orrs	r2, r1

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001b10:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = huart->Instance->CR3;
 8001b12:	695a      	ldr	r2, [r3, #20]

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));

  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001b14:	69a1      	ldr	r1, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001b16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001b1a:	430a      	orrs	r2, r1

  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b1c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001b20:	615a      	str	r2, [r3, #20]
 8001b22:	4a7c      	ldr	r2, [pc, #496]	; (8001d14 <UART_SetConfig+0x284>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b24:	d17b      	bne.n	8001c1e <UART_SetConfig+0x18e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d003      	beq.n	8001b32 <UART_SetConfig+0xa2>
 8001b2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d144      	bne.n	8001bbc <UART_SetConfig+0x12c>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001b32:	f7ff ff9d 	bl	8001a70 <HAL_RCC_GetPCLK2Freq>
 8001b36:	6867      	ldr	r7, [r4, #4]
 8001b38:	2519      	movs	r5, #25
 8001b3a:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001b3e:	fb05 f300 	mul.w	r3, r5, r0
 8001b42:	007f      	lsls	r7, r7, #1
 8001b44:	fbb3 f3f7 	udiv	r3, r3, r7
 8001b48:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b4c:	011f      	lsls	r7, r3, #4
 8001b4e:	f7ff ff8f 	bl	8001a70 <HAL_RCC_GetPCLK2Freq>
 8001b52:	6863      	ldr	r3, [r4, #4]
 8001b54:	4368      	muls	r0, r5
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fbb0 f6f3 	udiv	r6, r0, r3
 8001b5c:	f7ff ff88 	bl	8001a70 <HAL_RCC_GetPCLK2Freq>
 8001b60:	6863      	ldr	r3, [r4, #4]
 8001b62:	4368      	muls	r0, r5
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b6a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b6e:	fb08 6313 	mls	r3, r8, r3, r6
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	3332      	adds	r3, #50	; 0x32
 8001b76:	fbb3 f3f8 	udiv	r3, r3, r8
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8001b80:	f7ff ff76 	bl	8001a70 <HAL_RCC_GetPCLK2Freq>
 8001b84:	6862      	ldr	r2, [r4, #4]
 8001b86:	4368      	muls	r0, r5
 8001b88:	0052      	lsls	r2, r2, #1
 8001b8a:	fbb0 f9f2 	udiv	r9, r0, r2
 8001b8e:	f7ff ff6f 	bl	8001a70 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001b92:	6863      	ldr	r3, [r4, #4]
 8001b94:	6822      	ldr	r2, [r4, #0]
 8001b96:	4368      	muls	r0, r5
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b9e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001ba2:	fb08 9313 	mls	r3, r8, r3, r9
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	3332      	adds	r3, #50	; 0x32
 8001baa:	fbb3 f3f8 	udiv	r3, r3, r8
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	443b      	add	r3, r7
 8001bb4:	4433      	add	r3, r6
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001bb6:	6093      	str	r3, [r2, #8]
    }
  }
}
 8001bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001bbc:	f7ff ff48 	bl	8001a50 <HAL_RCC_GetPCLK1Freq>
 8001bc0:	6867      	ldr	r7, [r4, #4]
 8001bc2:	2519      	movs	r5, #25
 8001bc4:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001bc8:	fb05 f300 	mul.w	r3, r5, r0
 8001bcc:	007f      	lsls	r7, r7, #1
 8001bce:	fbb3 f3f7 	udiv	r3, r3, r7
 8001bd2:	fbb3 f3f8 	udiv	r3, r3, r8
 8001bd6:	011f      	lsls	r7, r3, #4
 8001bd8:	f7ff ff3a 	bl	8001a50 <HAL_RCC_GetPCLK1Freq>
 8001bdc:	6863      	ldr	r3, [r4, #4]
 8001bde:	4368      	muls	r0, r5
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	fbb0 f6f3 	udiv	r6, r0, r3
 8001be6:	f7ff ff33 	bl	8001a50 <HAL_RCC_GetPCLK1Freq>
 8001bea:	6863      	ldr	r3, [r4, #4]
 8001bec:	4368      	muls	r0, r5
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf4:	fbb3 f3f8 	udiv	r3, r3, r8
 8001bf8:	fb08 6313 	mls	r3, r8, r3, r6
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	3332      	adds	r3, #50	; 0x32
 8001c00:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8001c0a:	f7ff ff21 	bl	8001a50 <HAL_RCC_GetPCLK1Freq>
 8001c0e:	6862      	ldr	r2, [r4, #4]
 8001c10:	4368      	muls	r0, r5
 8001c12:	0052      	lsls	r2, r2, #1
 8001c14:	fbb0 f9f2 	udiv	r9, r0, r2
 8001c18:	f7ff ff1a 	bl	8001a50 <HAL_RCC_GetPCLK1Freq>
 8001c1c:	e7b9      	b.n	8001b92 <UART_SetConfig+0x102>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d002      	beq.n	8001c28 <UART_SetConfig+0x198>
 8001c22:	4a3d      	ldr	r2, [pc, #244]	; (8001d18 <UART_SetConfig+0x288>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d141      	bne.n	8001cac <UART_SetConfig+0x21c>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001c28:	f7ff ff22 	bl	8001a70 <HAL_RCC_GetPCLK2Freq>
 8001c2c:	6867      	ldr	r7, [r4, #4]
 8001c2e:	2519      	movs	r5, #25
 8001c30:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001c34:	fb05 f300 	mul.w	r3, r5, r0
 8001c38:	00bf      	lsls	r7, r7, #2
 8001c3a:	fbb3 f3f7 	udiv	r3, r3, r7
 8001c3e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c42:	011f      	lsls	r7, r3, #4
 8001c44:	f7ff ff14 	bl	8001a70 <HAL_RCC_GetPCLK2Freq>
 8001c48:	6863      	ldr	r3, [r4, #4]
 8001c4a:	4368      	muls	r0, r5
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	fbb0 f6f3 	udiv	r6, r0, r3
 8001c52:	f7ff ff0d 	bl	8001a70 <HAL_RCC_GetPCLK2Freq>
 8001c56:	6863      	ldr	r3, [r4, #4]
 8001c58:	4368      	muls	r0, r5
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c60:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c64:	fb08 6313 	mls	r3, r8, r3, r6
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	3332      	adds	r3, #50	; 0x32
 8001c6c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c70:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8001c74:	f7ff fefc 	bl	8001a70 <HAL_RCC_GetPCLK2Freq>
 8001c78:	6862      	ldr	r2, [r4, #4]
 8001c7a:	4368      	muls	r0, r5
 8001c7c:	0092      	lsls	r2, r2, #2
 8001c7e:	fbb0 f9f2 	udiv	r9, r0, r2
 8001c82:	f7ff fef5 	bl	8001a70 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001c86:	6863      	ldr	r3, [r4, #4]
 8001c88:	6822      	ldr	r2, [r4, #0]
 8001c8a:	4368      	muls	r0, r5
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c92:	fbb3 f3f8 	udiv	r3, r3, r8
 8001c96:	fb08 9313 	mls	r3, r8, r3, r9
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	3332      	adds	r3, #50	; 0x32
 8001c9e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	4333      	orrs	r3, r6
 8001ca8:	443b      	add	r3, r7
 8001caa:	e784      	b.n	8001bb6 <UART_SetConfig+0x126>
 8001cac:	f7ff fed0 	bl	8001a50 <HAL_RCC_GetPCLK1Freq>
 8001cb0:	6867      	ldr	r7, [r4, #4]
 8001cb2:	2519      	movs	r5, #25
 8001cb4:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001cb8:	fb05 f300 	mul.w	r3, r5, r0
 8001cbc:	00bf      	lsls	r7, r7, #2
 8001cbe:	fbb3 f3f7 	udiv	r3, r3, r7
 8001cc2:	fbb3 f3f8 	udiv	r3, r3, r8
 8001cc6:	011f      	lsls	r7, r3, #4
 8001cc8:	f7ff fec2 	bl	8001a50 <HAL_RCC_GetPCLK1Freq>
 8001ccc:	6863      	ldr	r3, [r4, #4]
 8001cce:	4368      	muls	r0, r5
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	fbb0 f6f3 	udiv	r6, r0, r3
 8001cd6:	f7ff febb 	bl	8001a50 <HAL_RCC_GetPCLK1Freq>
 8001cda:	6863      	ldr	r3, [r4, #4]
 8001cdc:	4368      	muls	r0, r5
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce4:	fbb3 f3f8 	udiv	r3, r3, r8
 8001ce8:	fb08 6313 	mls	r3, r8, r3, r6
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	3332      	adds	r3, #50	; 0x32
 8001cf0:	fbb3 f3f8 	udiv	r3, r3, r8
 8001cf4:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8001cf8:	f7ff feaa 	bl	8001a50 <HAL_RCC_GetPCLK1Freq>
 8001cfc:	6862      	ldr	r2, [r4, #4]
 8001cfe:	4368      	muls	r0, r5
 8001d00:	0092      	lsls	r2, r2, #2
 8001d02:	fbb0 f9f2 	udiv	r9, r0, r2
 8001d06:	f7ff fea3 	bl	8001a50 <HAL_RCC_GetPCLK1Freq>
 8001d0a:	e7bc      	b.n	8001c86 <UART_SetConfig+0x1f6>
 8001d0c:	00a037a0 	.word	0x00a037a0
 8001d10:	08008298 	.word	0x08008298
 8001d14:	40011000 	.word	0x40011000
 8001d18:	40011400 	.word	0x40011400

08001d1c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d1e:	4604      	mov	r4, r0
 8001d20:	460e      	mov	r6, r1
 8001d22:	4617      	mov	r7, r2
 8001d24:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d26:	6821      	ldr	r1, [r4, #0]
 8001d28:	680b      	ldr	r3, [r1, #0]
 8001d2a:	ea36 0303 	bics.w	r3, r6, r3
 8001d2e:	d101      	bne.n	8001d34 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001d30:	2000      	movs	r0, #0
 8001d32:	e014      	b.n	8001d5e <UART_WaitOnFlagUntilTimeout.constprop.3+0x42>
    if(Timeout != HAL_MAX_DELAY)
 8001d34:	1c6b      	adds	r3, r5, #1
 8001d36:	d0f7      	beq.n	8001d28 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001d38:	b995      	cbnz	r5, 8001d60 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d3a:	6823      	ldr	r3, [r4, #0]
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d42:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d44:	695a      	ldr	r2, [r3, #20]
 8001d46:	f022 0201 	bic.w	r2, r2, #1
 8001d4a:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001d4c:	2320      	movs	r3, #32
 8001d4e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001d52:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001d56:	2300      	movs	r3, #0
 8001d58:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001d5c:	2003      	movs	r0, #3
}
 8001d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001d60:	f7ff f99a 	bl	8001098 <HAL_GetTick>
 8001d64:	1bc0      	subs	r0, r0, r7
 8001d66:	4285      	cmp	r5, r0
 8001d68:	d2dd      	bcs.n	8001d26 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001d6a:	e7e6      	b.n	8001d3a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001d6c <HAL_UART_Init>:
{
 8001d6c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001d6e:	4604      	mov	r4, r0
 8001d70:	2800      	cmp	r0, #0
 8001d72:	d064      	beq.n	8001e3e <HAL_UART_Init+0xd2>
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8001d74:	6981      	ldr	r1, [r0, #24]
 8001d76:	6803      	ldr	r3, [r0, #0]
 8001d78:	4a32      	ldr	r2, [pc, #200]	; (8001e44 <HAL_UART_Init+0xd8>)
 8001d7a:	2900      	cmp	r1, #0
 8001d7c:	d053      	beq.n	8001e26 <HAL_UART_Init+0xba>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00c      	beq.n	8001d9c <HAL_UART_Init+0x30>
 8001d82:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d008      	beq.n	8001d9c <HAL_UART_Init+0x30>
 8001d8a:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d004      	beq.n	8001d9c <HAL_UART_Init+0x30>
 8001d92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d96:	482c      	ldr	r0, [pc, #176]	; (8001e48 <HAL_UART_Init+0xdc>)
 8001d98:	f002 f83e 	bl	8003e18 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8001d9c:	69a3      	ldr	r3, [r4, #24]
 8001d9e:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8001da2:	d004      	beq.n	8001dae <HAL_UART_Init+0x42>
 8001da4:	f240 1101 	movw	r1, #257	; 0x101
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8001da8:	4827      	ldr	r0, [pc, #156]	; (8001e48 <HAL_UART_Init+0xdc>)
 8001daa:	f002 f835 	bl	8003e18 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8001dae:	68a3      	ldr	r3, [r4, #8]
 8001db0:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8001db4:	d004      	beq.n	8001dc0 <HAL_UART_Init+0x54>
 8001db6:	f240 1107 	movw	r1, #263	; 0x107
 8001dba:	4823      	ldr	r0, [pc, #140]	; (8001e48 <HAL_UART_Init+0xdc>)
 8001dbc:	f002 f82c 	bl	8003e18 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8001dc0:	69e3      	ldr	r3, [r4, #28]
 8001dc2:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8001dc6:	d004      	beq.n	8001dd2 <HAL_UART_Init+0x66>
 8001dc8:	f44f 7184 	mov.w	r1, #264	; 0x108
 8001dcc:	481e      	ldr	r0, [pc, #120]	; (8001e48 <HAL_UART_Init+0xdc>)
 8001dce:	f002 f823 	bl	8003e18 <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001dd2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8001dd6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001dda:	b923      	cbnz	r3, 8001de6 <HAL_UART_Init+0x7a>
    huart->Lock = HAL_UNLOCKED;
 8001ddc:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001de0:	4620      	mov	r0, r4
 8001de2:	f000 f96b 	bl	80020bc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001de6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001de8:	2324      	movs	r3, #36	; 0x24
 8001dea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001dee:	68d3      	ldr	r3, [r2, #12]
 8001df0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001df4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001df6:	4620      	mov	r0, r4
 8001df8:	f7ff fe4a 	bl	8001a90 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e06:	695a      	ldr	r2, [r3, #20]
 8001e08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e0c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e14:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e16:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001e18:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e1a:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001e1c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001e20:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001e24:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d0c1      	beq.n	8001dae <HAL_UART_Init+0x42>
 8001e2a:	4a08      	ldr	r2, [pc, #32]	; (8001e4c <HAL_UART_Init+0xe0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d0be      	beq.n	8001dae <HAL_UART_Init+0x42>
 8001e30:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d0ba      	beq.n	8001dae <HAL_UART_Init+0x42>
 8001e38:	f240 1105 	movw	r1, #261	; 0x105
 8001e3c:	e7b4      	b.n	8001da8 <HAL_UART_Init+0x3c>
    return HAL_ERROR;
 8001e3e:	2001      	movs	r0, #1
 8001e40:	e7f0      	b.n	8001e24 <HAL_UART_Init+0xb8>
 8001e42:	bf00      	nop
 8001e44:	40011000 	.word	0x40011000
 8001e48:	08008298 	.word	0x08008298
 8001e4c:	40004400 	.word	0x40004400

08001e50 <HAL_UART_Transmit>:
{
 8001e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e54:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001e56:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e5a:	2b20      	cmp	r3, #32
{
 8001e5c:	4604      	mov	r4, r0
 8001e5e:	460d      	mov	r5, r1
 8001e60:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001e62:	d14d      	bne.n	8001f00 <HAL_UART_Transmit+0xb0>
    if((pData == NULL ) || (Size == 0))
 8001e64:	2900      	cmp	r1, #0
 8001e66:	d049      	beq.n	8001efc <HAL_UART_Transmit+0xac>
 8001e68:	2a00      	cmp	r2, #0
 8001e6a:	d047      	beq.n	8001efc <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8001e6c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d045      	beq.n	8001f00 <HAL_UART_Transmit+0xb0>
 8001e74:	2301      	movs	r3, #1
 8001e76:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e7e:	2321      	movs	r3, #33	; 0x21
 8001e80:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001e84:	f7ff f908 	bl	8001098 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001e88:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001e8c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001e8e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001e92:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	b963      	cbnz	r3, 8001eb2 <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e98:	463b      	mov	r3, r7
 8001e9a:	4632      	mov	r2, r6
 8001e9c:	2140      	movs	r1, #64	; 0x40
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	f7ff ff3c 	bl	8001d1c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001ea4:	b9a8      	cbnz	r0, 8001ed2 <HAL_UART_Transmit+0x82>
      huart->gState = HAL_UART_STATE_READY;
 8001ea6:	2320      	movs	r3, #32
 8001ea8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001eac:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001eb0:	e010      	b.n	8001ed4 <HAL_UART_Transmit+0x84>
      huart->TxXferCount--;
 8001eb2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001eba:	68a3      	ldr	r3, [r4, #8]
 8001ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ec0:	4632      	mov	r2, r6
 8001ec2:	463b      	mov	r3, r7
 8001ec4:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001ec8:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001eca:	d10e      	bne.n	8001eea <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ecc:	f7ff ff26 	bl	8001d1c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001ed0:	b110      	cbz	r0, 8001ed8 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8001ed2:	2003      	movs	r0, #3
}
 8001ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001ed8:	882b      	ldrh	r3, [r5, #0]
 8001eda:	6822      	ldr	r2, [r4, #0]
 8001edc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee0:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001ee2:	6923      	ldr	r3, [r4, #16]
 8001ee4:	b943      	cbnz	r3, 8001ef8 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8001ee6:	3502      	adds	r5, #2
 8001ee8:	e7d3      	b.n	8001e92 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eea:	f7ff ff17 	bl	8001d1c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001eee:	2800      	cmp	r0, #0
 8001ef0:	d1ef      	bne.n	8001ed2 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	782a      	ldrb	r2, [r5, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	3501      	adds	r5, #1
 8001efa:	e7ca      	b.n	8001e92 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001efc:	2001      	movs	r0, #1
 8001efe:	e7e9      	b.n	8001ed4 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 8001f00:	2002      	movs	r0, #2
 8001f02:	e7e7      	b.n	8001ed4 <HAL_UART_Transmit+0x84>

08001f04 <HAL_UART_Receive>:
{
 8001f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f08:	461f      	mov	r7, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8001f0a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001f0e:	2b20      	cmp	r3, #32
{
 8001f10:	4604      	mov	r4, r0
 8001f12:	460d      	mov	r5, r1
 8001f14:	4690      	mov	r8, r2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001f16:	d153      	bne.n	8001fc0 <HAL_UART_Receive+0xbc>
    if((pData == NULL ) || (Size == 0))
 8001f18:	2900      	cmp	r1, #0
 8001f1a:	d04f      	beq.n	8001fbc <HAL_UART_Receive+0xb8>
 8001f1c:	2a00      	cmp	r2, #0
 8001f1e:	d04d      	beq.n	8001fbc <HAL_UART_Receive+0xb8>
    __HAL_LOCK(huart);
 8001f20:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d04b      	beq.n	8001fc0 <HAL_UART_Receive+0xbc>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f32:	2322      	movs	r3, #34	; 0x22
 8001f34:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8001f38:	f7ff f8ae 	bl	8001098 <HAL_GetTick>
    huart->RxXferSize = Size;
 8001f3c:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
    tickstart = HAL_GetTick();
 8001f40:	4606      	mov	r6, r0
    huart->RxXferCount = Size;
 8001f42:	f8a4 802e 	strh.w	r8, [r4, #46]	; 0x2e
    while(huart->RxXferCount > 0U)
 8001f46:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8001f48:	b280      	uxth	r0, r0
 8001f4a:	b928      	cbnz	r0, 8001f58 <HAL_UART_Receive+0x54>
    huart->RxState = HAL_UART_STATE_READY;
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8001f52:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001f56:	e010      	b.n	8001f7a <HAL_UART_Receive+0x76>
      huart->RxXferCount--;
 8001f58:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	85e3      	strh	r3, [r4, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f60:	68a3      	ldr	r3, [r4, #8]
 8001f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f66:	4632      	mov	r2, r6
 8001f68:	463b      	mov	r3, r7
 8001f6a:	f04f 0120 	mov.w	r1, #32
 8001f6e:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f70:	d116      	bne.n	8001fa0 <HAL_UART_Receive+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f72:	f7ff fed3 	bl	8001d1c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001f76:	b110      	cbz	r0, 8001f7e <HAL_UART_Receive+0x7a>
          return HAL_TIMEOUT;
 8001f78:	2003      	movs	r0, #3
}
 8001f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001f7e:	6922      	ldr	r2, [r4, #16]
 8001f80:	6823      	ldr	r3, [r4, #0]
 8001f82:	b93a      	cbnz	r2, 8001f94 <HAL_UART_Receive+0x90>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	462b      	mov	r3, r5
 8001f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f8c:	f823 2b02 	strh.w	r2, [r3], #2
{
 8001f90:	461d      	mov	r5, r3
 8001f92:	e7d8      	b.n	8001f46 <HAL_UART_Receive+0x42>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	462b      	mov	r3, r5
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	f823 2b01 	strh.w	r2, [r3], #1
 8001f9e:	e7f7      	b.n	8001f90 <HAL_UART_Receive+0x8c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001fa0:	f7ff febc 	bl	8001d1c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001fa4:	2800      	cmp	r0, #0
 8001fa6:	d1e7      	bne.n	8001f78 <HAL_UART_Receive+0x74>
 8001fa8:	6822      	ldr	r2, [r4, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001faa:	6921      	ldr	r1, [r4, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001fac:	6852      	ldr	r2, [r2, #4]
 8001fae:	1c6b      	adds	r3, r5, #1
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001fb0:	b909      	cbnz	r1, 8001fb6 <HAL_UART_Receive+0xb2>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001fb2:	702a      	strb	r2, [r5, #0]
 8001fb4:	e7ec      	b.n	8001f90 <HAL_UART_Receive+0x8c>
 8001fb6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fba:	e7fa      	b.n	8001fb2 <HAL_UART_Receive+0xae>
      return  HAL_ERROR;
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	e7dc      	b.n	8001f7a <HAL_UART_Receive+0x76>
    return HAL_BUSY;
 8001fc0:	2002      	movs	r0, #2
 8001fc2:	e7da      	b.n	8001f7a <HAL_UART_Receive+0x76>

08001fc4 <BSP_LED_Init>:
  * @param  Led: Specifies the Led to be configured. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc6:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001fc8:	2400      	movs	r4, #0
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <BSP_LED_Init+0x48>)
 8001fcc:	9400      	str	r4, [sp, #0]
 8001fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001fd0:	4d0f      	ldr	r5, [pc, #60]	; (8002010 <BSP_LED_Init+0x4c>)
  LEDx_GPIO_CLK_ENABLE(Led);
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	631a      	str	r2, [r3, #48]	; 0x30
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	9403      	str	r4, [sp, #12]
  LEDx_GPIO_CLK_ENABLE(Led);
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	9300      	str	r3, [sp, #0]
{
 8001fe2:	4606      	mov	r6, r0
  LEDx_GPIO_CLK_ENABLE(Led);
 8001fe4:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001fe6:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fea:	2720      	movs	r7, #32
 8001fec:	2301      	movs	r3, #1
 8001fee:	e9cd 7301 	strd	r7, r3, [sp, #4]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001ff2:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001ff8:	f7ff f8cc 	bl	8001194 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001ffc:	4622      	mov	r2, r4
 8001ffe:	4639      	mov	r1, r7
 8002000:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8002004:	f7ff f9f2 	bl	80013ec <HAL_GPIO_WritePin>
}
 8002008:	b007      	add	sp, #28
 800200a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800200c:	40023800 	.word	0x40023800
 8002010:	20000004 	.word	0x20000004

08002014 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <BSP_LED_Off+0x10>)
 8002016:	2200      	movs	r2, #0
 8002018:	2120      	movs	r1, #32
 800201a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800201e:	f7ff b9e5 	b.w	80013ec <HAL_GPIO_WritePin>
 8002022:	bf00      	nop
 8002024:	20000004 	.word	0x20000004

08002028 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED2  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8002028:	4b02      	ldr	r3, [pc, #8]	; (8002034 <BSP_LED_Toggle+0xc>)
 800202a:	2120      	movs	r1, #32
 800202c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002030:	f7ff b9f6 	b.w	8001420 <HAL_GPIO_TogglePin>
 8002034:	20000004 	.word	0x20000004

08002038 <uart_init>:
PUTCHAR_PROTOTYPE;
GETCHAR_PROTOTYPE;

/* APIs ----------------------------------------------------------------------*/
eUART_STATUS uart_init(uint32_t baudrate) {
	uartHandle.Instance = USARTx;
 8002038:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <uart_init+0x3c>)
 800203a:	4a0f      	ldr	r2, [pc, #60]	; (8002078 <uart_init+0x40>)
eUART_STATUS uart_init(uint32_t baudrate) {
 800203c:	b510      	push	{r4, lr}
	uartHandle.Init.BaudRate = baudrate;
	uartHandle.Init.WordLength = UART_WORDLENGTH_8B;
	uartHandle.Init.StopBits = UART_STOPBITS_1;
	uartHandle.Init.Parity = UART_PARITY_NONE;
	uartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	uartHandle.Init.Mode = UART_MODE_TX_RX;
 800203e:	210c      	movs	r1, #12
	uartHandle.Init.BaudRate = baudrate;
 8002040:	e9c3 2000 	strd	r2, r0, [r3]
	uartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8002044:	2200      	movs	r2, #0
	uartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
	if (HAL_UART_Init(&uartHandle) != HAL_OK) {
 8002046:	4618      	mov	r0, r3
	uartHandle.Init.StopBits = UART_STOPBITS_1;
 8002048:	e9c3 2202 	strd	r2, r2, [r3, #8]
	uartHandle.Init.Parity = UART_PARITY_NONE;
 800204c:	611a      	str	r2, [r3, #16]
	uartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204e:	619a      	str	r2, [r3, #24]
	uartHandle.Init.Mode = UART_MODE_TX_RX;
 8002050:	6159      	str	r1, [r3, #20]
	uartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8002052:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&uartHandle) != HAL_OK) {
 8002054:	f7ff fe8a 	bl	8001d6c <HAL_UART_Init>
 8002058:	4604      	mov	r4, r0
 800205a:	b948      	cbnz	r0, 8002070 <uart_init+0x38>
		return eUART_STATUS_INIT_FAIL;
	}

	setvbuf(stdin, NULL, _IONBF, 0);
 800205c:	4b07      	ldr	r3, [pc, #28]	; (800207c <uart_init+0x44>)
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	2202      	movs	r2, #2
 8002062:	4623      	mov	r3, r4
 8002064:	4621      	mov	r1, r4
 8002066:	6840      	ldr	r0, [r0, #4]
 8002068:	f002 fdc0 	bl	8004bec <setvbuf>
	return eUART_STATUS_SUCCESS;
 800206c:	4620      	mov	r0, r4
}
 800206e:	bd10      	pop	{r4, pc}
		return eUART_STATUS_INIT_FAIL;
 8002070:	2001      	movs	r0, #1
 8002072:	e7fc      	b.n	800206e <uart_init+0x36>
 8002074:	200001fc 	.word	0x200001fc
 8002078:	40004400 	.word	0x40004400
 800207c:	2000000c 	.word	0x2000000c

08002080 <__io_putchar>:

/* System Functions ----------------------------------------------------------*/
PUTCHAR_PROTOTYPE {
 8002080:	b507      	push	{r0, r1, r2, lr}
 8002082:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&uartHandle, (uint8_t*)&ch, 1, 0xffff);
 8002084:	f64f 73ff 	movw	r3, #65535	; 0xffff
PUTCHAR_PROTOTYPE {
 8002088:	f841 0d04 	str.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&uartHandle, (uint8_t*)&ch, 1, 0xffff);
 800208c:	2201      	movs	r2, #1
 800208e:	4803      	ldr	r0, [pc, #12]	; (800209c <__io_putchar+0x1c>)
 8002090:	f7ff fede 	bl	8001e50 <HAL_UART_Transmit>
	return ch;
}
 8002094:	9801      	ldr	r0, [sp, #4]
 8002096:	b003      	add	sp, #12
 8002098:	f85d fb04 	ldr.w	pc, [sp], #4
 800209c:	200001fc 	.word	0x200001fc

080020a0 <__io_getchar>:

GETCHAR_PROTOTYPE {
 80020a0:	b507      	push	{r0, r1, r2, lr}
	int ch;
	HAL_UART_Receive(&uartHandle, (uint8_t*)&ch, 1, 0xffff);
 80020a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020a6:	2201      	movs	r2, #1
 80020a8:	a901      	add	r1, sp, #4
 80020aa:	4803      	ldr	r0, [pc, #12]	; (80020b8 <__io_getchar+0x18>)
 80020ac:	f7ff ff2a 	bl	8001f04 <HAL_UART_Receive>
	return ch;
}
 80020b0:	9801      	ldr	r0, [sp, #4]
 80020b2:	b003      	add	sp, #12
 80020b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80020b8:	200001fc 	.word	0x200001fc

080020bc <HAL_UART_MspInit>:

/* MSP Functions -------------------------------------------------------------*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart) {
 80020bc:	b530      	push	{r4, r5, lr}
 80020be:	b089      	sub	sp, #36	; 0x24
	(void)huart;
	GPIO_InitTypeDef	GPIO_InitStruct;

	USARTx_TX_GPIO_CLK_ENABLE();
 80020c0:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <HAL_UART_MspInit+0x74>)
  GPIO_InitStruct.Pin = USARTx_TX_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80020c2:	4c1c      	ldr	r4, [pc, #112]	; (8002134 <HAL_UART_MspInit+0x78>)
	USARTx_TX_GPIO_CLK_ENABLE();
 80020c4:	2200      	movs	r2, #0
 80020c6:	9200      	str	r2, [sp, #0]
 80020c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020ca:	f041 0101 	orr.w	r1, r1, #1
 80020ce:	6319      	str	r1, [r3, #48]	; 0x30
 80020d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020d2:	f001 0101 	and.w	r1, r1, #1
 80020d6:	9100      	str	r1, [sp, #0]
 80020d8:	9900      	ldr	r1, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 80020da:	9201      	str	r2, [sp, #4]
 80020dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020de:	f041 0101 	orr.w	r1, r1, #1
 80020e2:	6319      	str	r1, [r3, #48]	; 0x30
 80020e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020e6:	f001 0101 	and.w	r1, r1, #1
 80020ea:	9101      	str	r1, [sp, #4]
 80020ec:	9901      	ldr	r1, [sp, #4]
  USARTx_CLK_ENABLE();
 80020ee:	9202      	str	r2, [sp, #8]
 80020f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80020f6:	641a      	str	r2, [r3, #64]	; 0x40
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	9302      	str	r3, [sp, #8]
 8002100:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2204      	movs	r2, #4
 8002104:	2302      	movs	r3, #2
 8002106:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800210a:	2507      	movs	r5, #7
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800210c:	2201      	movs	r2, #1
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800210e:	a903      	add	r1, sp, #12
 8002110:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002112:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8002116:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8002118:	f7ff f83c 	bl	8001194 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800211c:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800211e:	a903      	add	r1, sp, #12
 8002120:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8002122:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8002124:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8002126:	f7ff f835 	bl	8001194 <HAL_GPIO_Init>
}
 800212a:	b009      	add	sp, #36	; 0x24
 800212c:	bd30      	pop	{r4, r5, pc}
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	40020000 	.word	0x40020000

08002138 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002138:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800213a:	f000 ffd3 	bl	80030e4 <vTaskStartScheduler>
  
  return osOK;
}
 800213e:	2000      	movs	r0, #0
 8002140:	bd08      	pop	{r3, pc}

08002142 <osKernelSysTick>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002142:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8002146:	b10b      	cbz	r3, 800214c <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8002148:	f001 b81a 	b.w	8003180 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 800214c:	f001 b812 	b.w	8003174 <xTaskGetTickCount>

08002150 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002150:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002152:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8002156:	8a02      	ldrh	r2, [r0, #16]
{
 8002158:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800215a:	e9d0 1500 	ldrd	r1, r5, [r0]
{
 800215e:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8002160:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8002162:	bf14      	ite	ne
 8002164:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002166:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002168:	a803      	add	r0, sp, #12
 800216a:	e9cd 4000 	strd	r4, r0, [sp]
 800216e:	4628      	mov	r0, r5
 8002170:	f000 fe40 	bl	8002df4 <xTaskCreate>
 8002174:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002176:	bf0c      	ite	eq
 8002178:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 800217a:	2000      	movne	r0, #0
}
 800217c:	b005      	add	sp, #20
 800217e:	bd30      	pop	{r4, r5, pc}

08002180 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002180:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002182:	2800      	cmp	r0, #0
 8002184:	bf08      	it	eq
 8002186:	2001      	moveq	r0, #1
 8002188:	f001 f90a 	bl	80033a0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800218c:	2000      	movs	r0, #0
 800218e:	bd08      	pop	{r3, pc}

08002190 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8002190:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002192:	f001 facb 	bl	800372c <xTaskGetSchedulerState>
 8002196:	2801      	cmp	r0, #1
 8002198:	d003      	beq.n	80021a2 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800219a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800219e:	f000 bcf9 	b.w	8002b94 <xPortSysTickHandler>
}
 80021a2:	bd08      	pop	{r3, pc}

080021a4 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 80021a4:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80021a6:	f001 f993 	bl	80034d0 <vTaskSuspend>
  
  return osOK;
#else
  return osErrorResource;
#endif
}
 80021aa:	2000      	movs	r0, #0
 80021ac:	bd08      	pop	{r3, pc}
	...

080021b0 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 80021b0:	b508      	push	{r3, lr}
 80021b2:	f3ef 8305 	mrs	r3, IPSR
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 80021b6:	b16b      	cbz	r3, 80021d4 <osThreadResume+0x24>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 80021b8:	f000 ff40 	bl	800303c <xTaskResumeFromISR>
 80021bc:	2801      	cmp	r0, #1
 80021be:	d107      	bne.n	80021d0 <osThreadResume+0x20>
    {
      portYIELD_FROM_ISR(pdTRUE);
 80021c0:	4b06      	ldr	r3, [pc, #24]	; (80021dc <osThreadResume+0x2c>)
 80021c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	f3bf 8f4f 	dsb	sy
 80021cc:	f3bf 8f6f 	isb	sy
  }
  return osOK;
#else
  return osErrorResource;
#endif
}
 80021d0:	2000      	movs	r0, #0
 80021d2:	bd08      	pop	{r3, pc}
    vTaskResume(thread_id);
 80021d4:	f000 fee6 	bl	8002fa4 <vTaskResume>
 80021d8:	e7fa      	b.n	80021d0 <osThreadResume+0x20>
 80021da:	bf00      	nop
 80021dc:	e000ed04 	.word	0xe000ed04

080021e0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80021e0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80021e2:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <prvInsertBlockIntoFreeList+0x40>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	4282      	cmp	r2, r0
 80021e8:	d318      	bcc.n	800221c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80021ea:	685c      	ldr	r4, [r3, #4]
 80021ec:	1919      	adds	r1, r3, r4
 80021ee:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80021f0:	bf01      	itttt	eq
 80021f2:	6841      	ldreq	r1, [r0, #4]
 80021f4:	4618      	moveq	r0, r3
 80021f6:	1909      	addeq	r1, r1, r4
 80021f8:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80021fa:	6844      	ldr	r4, [r0, #4]
 80021fc:	1901      	adds	r1, r0, r4
 80021fe:	428a      	cmp	r2, r1
 8002200:	d107      	bne.n	8002212 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002202:	4908      	ldr	r1, [pc, #32]	; (8002224 <prvInsertBlockIntoFreeList+0x44>)
 8002204:	6809      	ldr	r1, [r1, #0]
 8002206:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002208:	bf1f      	itttt	ne
 800220a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800220c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800220e:	1909      	addne	r1, r1, r4
 8002210:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002212:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002214:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002216:	bf18      	it	ne
 8002218:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800221a:	bd10      	pop	{r4, pc}
 800221c:	4613      	mov	r3, r2
 800221e:	e7e1      	b.n	80021e4 <prvInsertBlockIntoFreeList+0x4>
 8002220:	2000124c 	.word	0x2000124c
 8002224:	2000023c 	.word	0x2000023c

08002228 <pvPortMalloc>:
{
 8002228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800222c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800222e:	f000 ff99 	bl	8003164 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002232:	493d      	ldr	r1, [pc, #244]	; (8002328 <pvPortMalloc+0x100>)
 8002234:	4d3d      	ldr	r5, [pc, #244]	; (800232c <pvPortMalloc+0x104>)
 8002236:	680b      	ldr	r3, [r1, #0]
 8002238:	b9fb      	cbnz	r3, 800227a <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 800223a:	4a3d      	ldr	r2, [pc, #244]	; (8002330 <pvPortMalloc+0x108>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800223c:	0756      	lsls	r6, r2, #29
 800223e:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002242:	bf1d      	ittte	ne
 8002244:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002246:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800224a:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800224c:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002250:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002252:	4e38      	ldr	r6, [pc, #224]	; (8002334 <pvPortMalloc+0x10c>)
	uxAddress -= xHeapStructSize;
 8002254:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002256:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 800225a:	2000      	movs	r0, #0
 800225c:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800225e:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8002260:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002264:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8002266:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002268:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800226c:	4b32      	ldr	r3, [pc, #200]	; (8002338 <pvPortMalloc+0x110>)
 800226e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002270:	4b32      	ldr	r3, [pc, #200]	; (800233c <pvPortMalloc+0x114>)
 8002272:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002274:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002278:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800227a:	682f      	ldr	r7, [r5, #0]
 800227c:	4227      	tst	r7, r4
 800227e:	d14e      	bne.n	800231e <pvPortMalloc+0xf6>
			if( xWantedSize > 0 )
 8002280:	2c00      	cmp	r4, #0
 8002282:	d03f      	beq.n	8002304 <pvPortMalloc+0xdc>
				xWantedSize += xHeapStructSize;
 8002284:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002288:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800228a:	bf1c      	itt	ne
 800228c:	f023 0307 	bicne.w	r3, r3, #7
 8002290:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002292:	2b00      	cmp	r3, #0
 8002294:	d043      	beq.n	800231e <pvPortMalloc+0xf6>
 8002296:	4a29      	ldr	r2, [pc, #164]	; (800233c <pvPortMalloc+0x114>)
 8002298:	6816      	ldr	r6, [r2, #0]
 800229a:	429e      	cmp	r6, r3
 800229c:	4690      	mov	r8, r2
 800229e:	d33e      	bcc.n	800231e <pvPortMalloc+0xf6>
				pxBlock = xStart.pxNextFreeBlock;
 80022a0:	4a24      	ldr	r2, [pc, #144]	; (8002334 <pvPortMalloc+0x10c>)
 80022a2:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80022a4:	6868      	ldr	r0, [r5, #4]
 80022a6:	4298      	cmp	r0, r3
 80022a8:	d201      	bcs.n	80022ae <pvPortMalloc+0x86>
 80022aa:	682c      	ldr	r4, [r5, #0]
 80022ac:	b9a4      	cbnz	r4, 80022d8 <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 80022ae:	6809      	ldr	r1, [r1, #0]
 80022b0:	42a9      	cmp	r1, r5
 80022b2:	d034      	beq.n	800231e <pvPortMalloc+0xf6>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80022b4:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80022b6:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80022b8:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80022ba:	1ac2      	subs	r2, r0, r3
 80022bc:	2a10      	cmp	r2, #16
 80022be:	d912      	bls.n	80022e6 <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80022c0:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80022c2:	0741      	lsls	r1, r0, #29
 80022c4:	d00b      	beq.n	80022de <pvPortMalloc+0xb6>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ca:	f383 8811 	msr	BASEPRI, r3
 80022ce:	f3bf 8f6f 	isb	sy
 80022d2:	f3bf 8f4f 	dsb	sy
 80022d6:	e7fe      	b.n	80022d6 <pvPortMalloc+0xae>
 80022d8:	462a      	mov	r2, r5
 80022da:	4625      	mov	r5, r4
 80022dc:	e7e2      	b.n	80022a4 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80022de:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80022e0:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80022e2:	f7ff ff7d 	bl	80021e0 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80022e6:	4914      	ldr	r1, [pc, #80]	; (8002338 <pvPortMalloc+0x110>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80022e8:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80022ea:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80022ec:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80022ee:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80022f0:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 80022f2:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80022f6:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80022fa:	bf38      	it	cc
 80022fc:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80022fe:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002300:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002302:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002304:	f000 ffd6 	bl	80032b4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002308:	0763      	lsls	r3, r4, #29
 800230a:	d00a      	beq.n	8002322 <pvPortMalloc+0xfa>
 800230c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002310:	f383 8811 	msr	BASEPRI, r3
 8002314:	f3bf 8f6f 	isb	sy
 8002318:	f3bf 8f4f 	dsb	sy
 800231c:	e7fe      	b.n	800231c <pvPortMalloc+0xf4>
void *pvReturn = NULL;
 800231e:	2400      	movs	r4, #0
 8002320:	e7f0      	b.n	8002304 <pvPortMalloc+0xdc>
}
 8002322:	4620      	mov	r0, r4
 8002324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002328:	2000023c 	.word	0x2000023c
 800232c:	20001240 	.word	0x20001240
 8002330:	20000240 	.word	0x20000240
 8002334:	2000124c 	.word	0x2000124c
 8002338:	20001248 	.word	0x20001248
 800233c:	20001244 	.word	0x20001244

08002340 <vPortFree>:
{
 8002340:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002342:	4604      	mov	r4, r0
 8002344:	b370      	cbz	r0, 80023a4 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002346:	4a18      	ldr	r2, [pc, #96]	; (80023a8 <vPortFree+0x68>)
 8002348:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	4213      	tst	r3, r2
 8002350:	d108      	bne.n	8002364 <vPortFree+0x24>
 8002352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002356:	f383 8811 	msr	BASEPRI, r3
 800235a:	f3bf 8f6f 	isb	sy
 800235e:	f3bf 8f4f 	dsb	sy
 8002362:	e7fe      	b.n	8002362 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002364:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002368:	b141      	cbz	r1, 800237c <vPortFree+0x3c>
 800236a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800236e:	f383 8811 	msr	BASEPRI, r3
 8002372:	f3bf 8f6f 	isb	sy
 8002376:	f3bf 8f4f 	dsb	sy
 800237a:	e7fe      	b.n	800237a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800237c:	ea23 0302 	bic.w	r3, r3, r2
 8002380:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002384:	f000 feee 	bl	8003164 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002388:	4a08      	ldr	r2, [pc, #32]	; (80023ac <vPortFree+0x6c>)
 800238a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800238e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002390:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002394:	440b      	add	r3, r1
 8002396:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002398:	f7ff ff22 	bl	80021e0 <prvInsertBlockIntoFreeList>
}
 800239c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80023a0:	f000 bf88 	b.w	80032b4 <xTaskResumeAll>
}
 80023a4:	bd10      	pop	{r4, pc}
 80023a6:	bf00      	nop
 80023a8:	20001240 	.word	0x20001240
 80023ac:	20001244 	.word	0x20001244

080023b0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80023b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023b6:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 80023b8:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80023ba:	b942      	cbnz	r2, 80023ce <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80023bc:	6805      	ldr	r5, [r0, #0]
 80023be:	b99d      	cbnz	r5, 80023e8 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80023c0:	6840      	ldr	r0, [r0, #4]
 80023c2:	f001 fa0b 	bl	80037dc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80023c6:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80023c8:	3601      	adds	r6, #1
 80023ca:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80023cc:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80023ce:	b96d      	cbnz	r5, 80023ec <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80023d0:	6880      	ldr	r0, [r0, #8]
 80023d2:	f001 fd55 	bl	8003e80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80023d6:	68a3      	ldr	r3, [r4, #8]
 80023d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80023da:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023dc:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80023de:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d301      	bcc.n	80023e8 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80023e4:	6823      	ldr	r3, [r4, #0]
 80023e6:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80023e8:	2000      	movs	r0, #0
 80023ea:	e7ed      	b.n	80023c8 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023ec:	68c0      	ldr	r0, [r0, #12]
 80023ee:	f001 fd47 	bl	8003e80 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80023f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023f4:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023f6:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80023f8:	425b      	negs	r3, r3
 80023fa:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023fc:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80023fe:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002400:	bf3e      	ittt	cc
 8002402:	6862      	ldrcc	r2, [r4, #4]
 8002404:	189b      	addcc	r3, r3, r2
 8002406:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002408:	2d02      	cmp	r5, #2
 800240a:	d1ed      	bne.n	80023e8 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800240c:	b10e      	cbz	r6, 8002412 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800240e:	3e01      	subs	r6, #1
 8002410:	e7ea      	b.n	80023e8 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8002412:	4630      	mov	r0, r6
 8002414:	e7d8      	b.n	80023c8 <prvCopyDataToQueue+0x18>

08002416 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002416:	4603      	mov	r3, r0
 8002418:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800241a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800241c:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800241e:	b162      	cbz	r2, 800243a <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002420:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002422:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002424:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002426:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002428:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800242a:	bf24      	itt	cs
 800242c:	6819      	ldrcs	r1, [r3, #0]
 800242e:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002430:	68d9      	ldr	r1, [r3, #12]
	}
}
 8002432:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002436:	f001 bd23 	b.w	8003e80 <memcpy>
}
 800243a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800243e:	4770      	bx	lr

08002440 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002440:	b570      	push	{r4, r5, r6, lr}
 8002442:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002444:	f000 fb3e 	bl	8002ac4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002448:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800244c:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002450:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002452:	2d00      	cmp	r5, #0
 8002454:	dc14      	bgt.n	8002480 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002456:	23ff      	movs	r3, #255	; 0xff
 8002458:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800245c:	f000 fb54 	bl	8002b08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002460:	f000 fb30 	bl	8002ac4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002464:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002468:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 800246c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800246e:	2d00      	cmp	r5, #0
 8002470:	dc12      	bgt.n	8002498 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002472:	23ff      	movs	r3, #255	; 0xff
 8002474:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8002478:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800247c:	f000 bb44 	b.w	8002b08 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002480:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0e7      	beq.n	8002456 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002486:	4630      	mov	r0, r6
 8002488:	f001 f8be 	bl	8003608 <xTaskRemoveFromEventList>
 800248c:	b108      	cbz	r0, 8002492 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800248e:	f001 f947 	bl	8003720 <vTaskMissedYield>
 8002492:	3d01      	subs	r5, #1
 8002494:	b26d      	sxtb	r5, r5
 8002496:	e7dc      	b.n	8002452 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002498:	6923      	ldr	r3, [r4, #16]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0e9      	beq.n	8002472 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800249e:	4630      	mov	r0, r6
 80024a0:	f001 f8b2 	bl	8003608 <xTaskRemoveFromEventList>
 80024a4:	b108      	cbz	r0, 80024aa <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80024a6:	f001 f93b 	bl	8003720 <vTaskMissedYield>
 80024aa:	3d01      	subs	r5, #1
 80024ac:	b26d      	sxtb	r5, r5
 80024ae:	e7de      	b.n	800246e <prvUnlockQueue+0x2e>

080024b0 <xQueueGenericReset>:
{
 80024b0:	b538      	push	{r3, r4, r5, lr}
 80024b2:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80024b4:	4604      	mov	r4, r0
 80024b6:	b940      	cbnz	r0, 80024ca <xQueueGenericReset+0x1a>
 80024b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024bc:	f383 8811 	msr	BASEPRI, r3
 80024c0:	f3bf 8f6f 	isb	sy
 80024c4:	f3bf 8f4f 	dsb	sy
 80024c8:	e7fe      	b.n	80024c8 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80024ca:	f000 fafb 	bl	8002ac4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80024ce:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
 80024d2:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80024d4:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80024d6:	4343      	muls	r3, r0
 80024d8:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80024da:	1a1b      	subs	r3, r3, r0
 80024dc:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80024de:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80024e0:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024e2:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80024e4:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024e6:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80024e8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80024ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80024f0:	b995      	cbnz	r5, 8002518 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024f2:	6923      	ldr	r3, [r4, #16]
 80024f4:	b163      	cbz	r3, 8002510 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024f6:	f104 0010 	add.w	r0, r4, #16
 80024fa:	f001 f885 	bl	8003608 <xTaskRemoveFromEventList>
 80024fe:	b138      	cbz	r0, 8002510 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <xQueueGenericReset+0x7c>)
 8002502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	f3bf 8f4f 	dsb	sy
 800250c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8002510:	f000 fafa 	bl	8002b08 <vPortExitCritical>
}
 8002514:	2001      	movs	r0, #1
 8002516:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002518:	f104 0010 	add.w	r0, r4, #16
 800251c:	f000 fa35 	bl	800298a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002520:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002524:	f000 fa31 	bl	800298a <vListInitialise>
 8002528:	e7f2      	b.n	8002510 <xQueueGenericReset+0x60>
 800252a:	bf00      	nop
 800252c:	e000ed04 	.word	0xe000ed04

08002530 <xQueueGenericCreate>:
	{
 8002530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002532:	460d      	mov	r5, r1
 8002534:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002536:	4606      	mov	r6, r0
 8002538:	b940      	cbnz	r0, 800254c <xQueueGenericCreate+0x1c>
 800253a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253e:	f383 8811 	msr	BASEPRI, r3
 8002542:	f3bf 8f6f 	isb	sy
 8002546:	f3bf 8f4f 	dsb	sy
 800254a:	e7fe      	b.n	800254a <xQueueGenericCreate+0x1a>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800254c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800254e:	3050      	adds	r0, #80	; 0x50
 8002550:	f7ff fe6a 	bl	8002228 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002554:	4604      	mov	r4, r0
 8002556:	b148      	cbz	r0, 800256c <xQueueGenericCreate+0x3c>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002558:	b955      	cbnz	r5, 8002570 <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800255a:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800255c:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002560:	2101      	movs	r1, #1
 8002562:	4620      	mov	r0, r4
 8002564:	f7ff ffa4 	bl	80024b0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8002568:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800256c:	4620      	mov	r0, r4
 800256e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002570:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002574:	6003      	str	r3, [r0, #0]
 8002576:	e7f1      	b.n	800255c <xQueueGenericCreate+0x2c>

08002578 <xQueueGenericSend>:
{
 8002578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800257c:	4688      	mov	r8, r1
 800257e:	9201      	str	r2, [sp, #4]
 8002580:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002582:	4604      	mov	r4, r0
 8002584:	b940      	cbnz	r0, 8002598 <xQueueGenericSend+0x20>
 8002586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258a:	f383 8811 	msr	BASEPRI, r3
 800258e:	f3bf 8f6f 	isb	sy
 8002592:	f3bf 8f4f 	dsb	sy
 8002596:	e7fe      	b.n	8002596 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002598:	b951      	cbnz	r1, 80025b0 <xQueueGenericSend+0x38>
 800259a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800259c:	b143      	cbz	r3, 80025b0 <xQueueGenericSend+0x38>
 800259e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a2:	f383 8811 	msr	BASEPRI, r3
 80025a6:	f3bf 8f6f 	isb	sy
 80025aa:	f3bf 8f4f 	dsb	sy
 80025ae:	e7fe      	b.n	80025ae <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025b0:	2f02      	cmp	r7, #2
 80025b2:	d10b      	bne.n	80025cc <xQueueGenericSend+0x54>
 80025b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d008      	beq.n	80025cc <xQueueGenericSend+0x54>
 80025ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025be:	f383 8811 	msr	BASEPRI, r3
 80025c2:	f3bf 8f6f 	isb	sy
 80025c6:	f3bf 8f4f 	dsb	sy
 80025ca:	e7fe      	b.n	80025ca <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025cc:	f001 f8ae 	bl	800372c <xTaskGetSchedulerState>
 80025d0:	b950      	cbnz	r0, 80025e8 <xQueueGenericSend+0x70>
 80025d2:	9e01      	ldr	r6, [sp, #4]
 80025d4:	b14e      	cbz	r6, 80025ea <xQueueGenericSend+0x72>
 80025d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025da:	f383 8811 	msr	BASEPRI, r3
 80025de:	f3bf 8f6f 	isb	sy
 80025e2:	f3bf 8f4f 	dsb	sy
 80025e6:	e7fe      	b.n	80025e6 <xQueueGenericSend+0x6e>
 80025e8:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80025ea:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 80025ee:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 80026d8 <xQueueGenericSend+0x160>
 80025f2:	e037      	b.n	8002664 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 80025f4:	9d01      	ldr	r5, [sp, #4]
 80025f6:	b91d      	cbnz	r5, 8002600 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 80025f8:	f000 fa86 	bl	8002b08 <vPortExitCritical>
			return errQUEUE_FULL;
 80025fc:	2000      	movs	r0, #0
 80025fe:	e050      	b.n	80026a2 <xQueueGenericSend+0x12a>
				else if( xEntryTimeSet == pdFALSE )
 8002600:	b916      	cbnz	r6, 8002608 <xQueueGenericSend+0x90>
					vTaskSetTimeOutState( &xTimeOut );
 8002602:	a802      	add	r0, sp, #8
 8002604:	f001 f842 	bl	800368c <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8002608:	f000 fa7e 	bl	8002b08 <vPortExitCritical>
		vTaskSuspendAll();
 800260c:	f000 fdaa 	bl	8003164 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002610:	f000 fa58 	bl	8002ac4 <vPortEnterCritical>
 8002614:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002618:	2bff      	cmp	r3, #255	; 0xff
 800261a:	bf08      	it	eq
 800261c:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8002620:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002624:	2bff      	cmp	r3, #255	; 0xff
 8002626:	bf08      	it	eq
 8002628:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 800262c:	f000 fa6c 	bl	8002b08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002630:	a901      	add	r1, sp, #4
 8002632:	a802      	add	r0, sp, #8
 8002634:	f001 f83a 	bl	80036ac <xTaskCheckForTimeOut>
 8002638:	2800      	cmp	r0, #0
 800263a:	d146      	bne.n	80026ca <xQueueGenericSend+0x152>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800263c:	f000 fa42 	bl	8002ac4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002640:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002642:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002644:	429a      	cmp	r2, r3
 8002646:	d12f      	bne.n	80026a8 <xQueueGenericSend+0x130>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002648:	f000 fa5e 	bl	8002b08 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800264c:	9901      	ldr	r1, [sp, #4]
 800264e:	f104 0010 	add.w	r0, r4, #16
 8002652:	f000 ffa1 	bl	8003598 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002656:	4620      	mov	r0, r4
 8002658:	f7ff fef2 	bl	8002440 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800265c:	f000 fe2a 	bl	80032b4 <xTaskResumeAll>
 8002660:	b350      	cbz	r0, 80026b8 <xQueueGenericSend+0x140>
 8002662:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002664:	f000 fa2e 	bl	8002ac4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002668:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800266a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800266c:	429a      	cmp	r2, r3
 800266e:	d301      	bcc.n	8002674 <xQueueGenericSend+0xfc>
 8002670:	2f02      	cmp	r7, #2
 8002672:	d1bf      	bne.n	80025f4 <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002674:	463a      	mov	r2, r7
 8002676:	4641      	mov	r1, r8
 8002678:	4620      	mov	r0, r4
 800267a:	f7ff fe99 	bl	80023b0 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800267e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002680:	b11b      	cbz	r3, 800268a <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002682:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002686:	f000 ffbf 	bl	8003608 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800268a:	b138      	cbz	r0, 800269c <xQueueGenericSend+0x124>
						queueYIELD_IF_USING_PREEMPTION();
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <xQueueGenericSend+0x160>)
 800268e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800269c:	f000 fa34 	bl	8002b08 <vPortExitCritical>
				return pdPASS;
 80026a0:	2001      	movs	r0, #1
}
 80026a2:	b004      	add	sp, #16
 80026a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 80026a8:	f000 fa2e 	bl	8002b08 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80026ac:	4620      	mov	r0, r4
 80026ae:	f7ff fec7 	bl	8002440 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026b2:	f000 fdff 	bl	80032b4 <xTaskResumeAll>
 80026b6:	e7d4      	b.n	8002662 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 80026b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80026bc:	f8ca 3000 	str.w	r3, [sl]
 80026c0:	f3bf 8f4f 	dsb	sy
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	e7cb      	b.n	8002662 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 80026ca:	4620      	mov	r0, r4
 80026cc:	f7ff feb8 	bl	8002440 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026d0:	f000 fdf0 	bl	80032b4 <xTaskResumeAll>
 80026d4:	e792      	b.n	80025fc <xQueueGenericSend+0x84>
 80026d6:	bf00      	nop
 80026d8:	e000ed04 	.word	0xe000ed04

080026dc <xQueueGenericSendFromISR>:
{
 80026dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026e0:	4689      	mov	r9, r1
 80026e2:	4690      	mov	r8, r2
 80026e4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80026e6:	4604      	mov	r4, r0
 80026e8:	b940      	cbnz	r0, 80026fc <xQueueGenericSendFromISR+0x20>
 80026ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ee:	f383 8811 	msr	BASEPRI, r3
 80026f2:	f3bf 8f6f 	isb	sy
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	e7fe      	b.n	80026fa <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026fc:	b951      	cbnz	r1, 8002714 <xQueueGenericSendFromISR+0x38>
 80026fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002700:	b143      	cbz	r3, 8002714 <xQueueGenericSendFromISR+0x38>
 8002702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002706:	f383 8811 	msr	BASEPRI, r3
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	f3bf 8f4f 	dsb	sy
 8002712:	e7fe      	b.n	8002712 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002714:	2f02      	cmp	r7, #2
 8002716:	d10b      	bne.n	8002730 <xQueueGenericSendFromISR+0x54>
 8002718:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800271a:	2b01      	cmp	r3, #1
 800271c:	d008      	beq.n	8002730 <xQueueGenericSendFromISR+0x54>
 800271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002722:	f383 8811 	msr	BASEPRI, r3
 8002726:	f3bf 8f6f 	isb	sy
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	e7fe      	b.n	800272e <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002730:	f000 fad0 	bl	8002cd4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002734:	f3ef 8611 	mrs	r6, BASEPRI
 8002738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273c:	f383 8811 	msr	BASEPRI, r3
 8002740:	f3bf 8f6f 	isb	sy
 8002744:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002748:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800274a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800274c:	429a      	cmp	r2, r3
 800274e:	d301      	bcc.n	8002754 <xQueueGenericSendFromISR+0x78>
 8002750:	2f02      	cmp	r7, #2
 8002752:	d122      	bne.n	800279a <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002754:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002758:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 800275a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800275c:	4649      	mov	r1, r9
 800275e:	4620      	mov	r0, r4
 8002760:	f7ff fe26 	bl	80023b0 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002764:	1c6b      	adds	r3, r5, #1
 8002766:	d113      	bne.n	8002790 <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002768:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800276a:	b90b      	cbnz	r3, 8002770 <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 800276c:	2001      	movs	r0, #1
 800276e:	e00b      	b.n	8002788 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002770:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002774:	f000 ff48 	bl	8003608 <xTaskRemoveFromEventList>
 8002778:	2800      	cmp	r0, #0
 800277a:	d0f7      	beq.n	800276c <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 800277c:	f1b8 0f00 	cmp.w	r8, #0
 8002780:	d0f4      	beq.n	800276c <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002782:	2001      	movs	r0, #1
 8002784:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002788:	f386 8811 	msr	BASEPRI, r6
}
 800278c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002790:	3501      	adds	r5, #1
 8002792:	b26d      	sxtb	r5, r5
 8002794:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8002798:	e7e8      	b.n	800276c <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 800279a:	2000      	movs	r0, #0
 800279c:	e7f4      	b.n	8002788 <xQueueGenericSendFromISR+0xac>
	...

080027a0 <xQueueGenericReceive>:
{
 80027a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027a4:	460f      	mov	r7, r1
 80027a6:	9201      	str	r2, [sp, #4]
 80027a8:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 80027aa:	4604      	mov	r4, r0
 80027ac:	b940      	cbnz	r0, 80027c0 <xQueueGenericReceive+0x20>
	__asm volatile
 80027ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b2:	f383 8811 	msr	BASEPRI, r3
 80027b6:	f3bf 8f6f 	isb	sy
 80027ba:	f3bf 8f4f 	dsb	sy
 80027be:	e7fe      	b.n	80027be <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027c0:	b951      	cbnz	r1, 80027d8 <xQueueGenericReceive+0x38>
 80027c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80027c4:	b143      	cbz	r3, 80027d8 <xQueueGenericReceive+0x38>
 80027c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ca:	f383 8811 	msr	BASEPRI, r3
 80027ce:	f3bf 8f6f 	isb	sy
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	e7fe      	b.n	80027d6 <xQueueGenericReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027d8:	f000 ffa8 	bl	800372c <xTaskGetSchedulerState>
 80027dc:	b950      	cbnz	r0, 80027f4 <xQueueGenericReceive+0x54>
 80027de:	9d01      	ldr	r5, [sp, #4]
 80027e0:	b14d      	cbz	r5, 80027f6 <xQueueGenericReceive+0x56>
 80027e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e6:	f383 8811 	msr	BASEPRI, r3
 80027ea:	f3bf 8f6f 	isb	sy
 80027ee:	f3bf 8f4f 	dsb	sy
 80027f2:	e7fe      	b.n	80027f2 <xQueueGenericReceive+0x52>
 80027f4:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80027f6:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80027fa:	f8df a120 	ldr.w	sl, [pc, #288]	; 800291c <xQueueGenericReceive+0x17c>
 80027fe:	e055      	b.n	80028ac <xQueueGenericReceive+0x10c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002800:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8002802:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002804:	2b00      	cmp	r3, #0
 8002806:	d074      	beq.n	80028f2 <xQueueGenericReceive+0x152>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002808:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800280c:	e066      	b.n	80028dc <xQueueGenericReceive+0x13c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800280e:	9b01      	ldr	r3, [sp, #4]
 8002810:	b91b      	cbnz	r3, 800281a <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
 8002812:	f000 f979 	bl	8002b08 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002816:	2000      	movs	r0, #0
 8002818:	e06e      	b.n	80028f8 <xQueueGenericReceive+0x158>
				else if( xEntryTimeSet == pdFALSE )
 800281a:	b915      	cbnz	r5, 8002822 <xQueueGenericReceive+0x82>
					vTaskSetTimeOutState( &xTimeOut );
 800281c:	a802      	add	r0, sp, #8
 800281e:	f000 ff35 	bl	800368c <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8002822:	f000 f971 	bl	8002b08 <vPortExitCritical>
		vTaskSuspendAll();
 8002826:	f000 fc9d 	bl	8003164 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800282a:	f000 f94b 	bl	8002ac4 <vPortEnterCritical>
 800282e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002832:	2bff      	cmp	r3, #255	; 0xff
 8002834:	bf08      	it	eq
 8002836:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800283a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800283e:	2bff      	cmp	r3, #255	; 0xff
 8002840:	bf08      	it	eq
 8002842:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002846:	f000 f95f 	bl	8002b08 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800284a:	a901      	add	r1, sp, #4
 800284c:	a802      	add	r0, sp, #8
 800284e:	f000 ff2d 	bl	80036ac <xTaskCheckForTimeOut>
 8002852:	2800      	cmp	r0, #0
 8002854:	d153      	bne.n	80028fe <xQueueGenericReceive+0x15e>
	taskENTER_CRITICAL();
 8002856:	f000 f935 	bl	8002ac4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800285a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800285c:	b9f3      	cbnz	r3, 800289c <xQueueGenericReceive+0xfc>
	taskEXIT_CRITICAL();
 800285e:	f000 f953 	bl	8002b08 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002862:	6823      	ldr	r3, [r4, #0]
 8002864:	b933      	cbnz	r3, 8002874 <xQueueGenericReceive+0xd4>
						taskENTER_CRITICAL();
 8002866:	f000 f92d 	bl	8002ac4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800286a:	6860      	ldr	r0, [r4, #4]
 800286c:	f000 ff6e 	bl	800374c <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8002870:	f000 f94a 	bl	8002b08 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002874:	9901      	ldr	r1, [sp, #4]
 8002876:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800287a:	f000 fe8d 	bl	8003598 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800287e:	4620      	mov	r0, r4
 8002880:	f7ff fdde 	bl	8002440 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002884:	f000 fd16 	bl	80032b4 <xTaskResumeAll>
 8002888:	b978      	cbnz	r0, 80028aa <xQueueGenericReceive+0x10a>
					portYIELD_WITHIN_API();
 800288a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800288e:	f8ca 3000 	str.w	r3, [sl]
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	e006      	b.n	80028aa <xQueueGenericReceive+0x10a>
	taskEXIT_CRITICAL();
 800289c:	f000 f934 	bl	8002b08 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80028a0:	4620      	mov	r0, r4
 80028a2:	f7ff fdcd 	bl	8002440 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80028a6:	f000 fd05 	bl	80032b4 <xTaskResumeAll>
 80028aa:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 80028ac:	f000 f90a 	bl	8002ac4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028b0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028b2:	2e00      	cmp	r6, #0
 80028b4:	d0ab      	beq.n	800280e <xQueueGenericReceive+0x6e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028b6:	4639      	mov	r1, r7
 80028b8:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80028ba:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028bc:	f7ff fdab 	bl	8002416 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80028c0:	f1b9 0f00 	cmp.w	r9, #0
 80028c4:	d19c      	bne.n	8002800 <xQueueGenericReceive+0x60>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028c6:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80028c8:	3e01      	subs	r6, #1
 80028ca:	63a6      	str	r6, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028cc:	b913      	cbnz	r3, 80028d4 <xQueueGenericReceive+0x134>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80028ce:	f000 ffd5 	bl	800387c <pvTaskIncrementMutexHeldCount>
 80028d2:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028d4:	6923      	ldr	r3, [r4, #16]
 80028d6:	b163      	cbz	r3, 80028f2 <xQueueGenericReceive+0x152>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028d8:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028dc:	f000 fe94 	bl	8003608 <xTaskRemoveFromEventList>
 80028e0:	b138      	cbz	r0, 80028f2 <xQueueGenericReceive+0x152>
							queueYIELD_IF_USING_PREEMPTION();
 80028e2:	4b0e      	ldr	r3, [pc, #56]	; (800291c <xQueueGenericReceive+0x17c>)
 80028e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	f3bf 8f4f 	dsb	sy
 80028ee:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80028f2:	f000 f909 	bl	8002b08 <vPortExitCritical>
				return pdPASS;
 80028f6:	2001      	movs	r0, #1
}
 80028f8:	b004      	add	sp, #16
 80028fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			prvUnlockQueue( pxQueue );
 80028fe:	4620      	mov	r0, r4
 8002900:	f7ff fd9e 	bl	8002440 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002904:	f000 fcd6 	bl	80032b4 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8002908:	f000 f8dc 	bl	8002ac4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800290c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800290e:	2b00      	cmp	r3, #0
 8002910:	f43f af7f 	beq.w	8002812 <xQueueGenericReceive+0x72>
	taskEXIT_CRITICAL();
 8002914:	f000 f8f8 	bl	8002b08 <vPortExitCritical>
 8002918:	e7c7      	b.n	80028aa <xQueueGenericReceive+0x10a>
 800291a:	bf00      	nop
 800291c:	e000ed04 	.word	0xe000ed04

08002920 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002920:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002922:	4a07      	ldr	r2, [pc, #28]	; (8002940 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002924:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002926:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800292a:	00dc      	lsls	r4, r3, #3
 800292c:	b925      	cbnz	r5, 8002938 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800292e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002932:	4422      	add	r2, r4
 8002934:	6050      	str	r0, [r2, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002936:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002938:	3301      	adds	r3, #1
 800293a:	2b08      	cmp	r3, #8
 800293c:	d1f3      	bne.n	8002926 <vQueueAddToRegistry+0x6>
 800293e:	e7fa      	b.n	8002936 <vQueueAddToRegistry+0x16>
 8002940:	20001254 	.word	0x20001254

08002944 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002944:	b570      	push	{r4, r5, r6, lr}
 8002946:	4604      	mov	r4, r0
 8002948:	460d      	mov	r5, r1
 800294a:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800294c:	f000 f8ba 	bl	8002ac4 <vPortEnterCritical>
 8002950:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002954:	2bff      	cmp	r3, #255	; 0xff
 8002956:	bf04      	itt	eq
 8002958:	2300      	moveq	r3, #0
 800295a:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800295e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002962:	2bff      	cmp	r3, #255	; 0xff
 8002964:	bf04      	itt	eq
 8002966:	2300      	moveq	r3, #0
 8002968:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 800296c:	f000 f8cc 	bl	8002b08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002970:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002972:	b92b      	cbnz	r3, 8002980 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002974:	4632      	mov	r2, r6
 8002976:	4629      	mov	r1, r5
 8002978:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800297c:	f000 fe26 	bl	80035cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002980:	4620      	mov	r0, r4
	}
 8002982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8002986:	f7ff bd5b 	b.w	8002440 <prvUnlockQueue>

0800298a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800298a:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800298e:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002992:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002994:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002998:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800299e:	4770      	bx	lr

080029a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029a4:	4770      	bx	lr

080029a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80029a6:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029a8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029b2:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80029b4:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80029b6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80029b8:	3301      	adds	r3, #1
 80029ba:	6003      	str	r3, [r0, #0]
}
 80029bc:	4770      	bx	lr

080029be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80029be:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80029c0:	1c53      	adds	r3, r2, #1
{
 80029c2:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80029c4:	d10a      	bne.n	80029dc <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029c6:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029cc:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029ce:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80029d0:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80029d2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80029d4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80029d6:	3301      	adds	r3, #1
 80029d8:	6003      	str	r3, [r0, #0]
}
 80029da:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029dc:	f100 0308 	add.w	r3, r0, #8
 80029e0:	685c      	ldr	r4, [r3, #4]
 80029e2:	6825      	ldr	r5, [r4, #0]
 80029e4:	4295      	cmp	r5, r2
 80029e6:	d8ef      	bhi.n	80029c8 <vListInsert+0xa>
 80029e8:	4623      	mov	r3, r4
 80029ea:	e7f9      	b.n	80029e0 <vListInsert+0x22>

080029ec <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029ec:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80029f0:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029f2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029f4:	6882      	ldr	r2, [r0, #8]
 80029f6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029f8:	6859      	ldr	r1, [r3, #4]
 80029fa:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029fc:	bf08      	it	eq
 80029fe:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002a00:	2200      	movs	r2, #0
 8002a02:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	3801      	subs	r0, #1
 8002a08:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002a0a:	4770      	bx	lr

08002a0c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <prvTaskExitError+0x2c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	d008      	beq.n	8002a26 <prvTaskExitError+0x1a>
 8002a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a18:	f383 8811 	msr	BASEPRI, r3
 8002a1c:	f3bf 8f6f 	isb	sy
 8002a20:	f3bf 8f4f 	dsb	sy
 8002a24:	e7fe      	b.n	8002a24 <prvTaskExitError+0x18>
 8002a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2a:	f383 8811 	msr	BASEPRI, r3
 8002a2e:	f3bf 8f6f 	isb	sy
 8002a32:	f3bf 8f4f 	dsb	sy
 8002a36:	e7fe      	b.n	8002a36 <prvTaskExitError+0x2a>
 8002a38:	20000008 	.word	0x20000008

08002a3c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002a3c:	4806      	ldr	r0, [pc, #24]	; (8002a58 <prvPortStartFirstTask+0x1c>)
 8002a3e:	6800      	ldr	r0, [r0, #0]
 8002a40:	6800      	ldr	r0, [r0, #0]
 8002a42:	f380 8808 	msr	MSP, r0
 8002a46:	b662      	cpsie	i
 8002a48:	b661      	cpsie	f
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	f3bf 8f6f 	isb	sy
 8002a52:	df00      	svc	0
 8002a54:	bf00      	nop
 8002a56:	0000      	.short	0x0000
 8002a58:	e000ed08 	.word	0xe000ed08

08002a5c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002a5c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002a6c <vPortEnableVFP+0x10>
 8002a60:	6801      	ldr	r1, [r0, #0]
 8002a62:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002a66:	6001      	str	r1, [r0, #0]
 8002a68:	4770      	bx	lr
 8002a6a:	0000      	.short	0x0000
 8002a6c:	e000ed88 	.word	0xe000ed88

08002a70 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002a70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a74:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002a78:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <pxPortInitialiseStack+0x28>)
 8002a7a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002a7e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002a82:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002a86:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002a8a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002a8e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002a92:	3844      	subs	r0, #68	; 0x44
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	08002a0d 	.word	0x08002a0d
 8002a9c:	00000000 	.word	0x00000000

08002aa0 <SVC_Handler>:
	__asm volatile (
 8002aa0:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <pxCurrentTCBConst2>)
 8002aa2:	6819      	ldr	r1, [r3, #0]
 8002aa4:	6808      	ldr	r0, [r1, #0]
 8002aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aaa:	f380 8809 	msr	PSP, r0
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	f04f 0000 	mov.w	r0, #0
 8002ab6:	f380 8811 	msr	BASEPRI, r0
 8002aba:	4770      	bx	lr
 8002abc:	f3af 8000 	nop.w

08002ac0 <pxCurrentTCBConst2>:
 8002ac0:	2000129c 	.word	0x2000129c

08002ac4 <vPortEnterCritical>:
 8002ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac8:	f383 8811 	msr	BASEPRI, r3
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002ad4:	4a0a      	ldr	r2, [pc, #40]	; (8002b00 <vPortEnterCritical+0x3c>)
 8002ad6:	6813      	ldr	r3, [r2, #0]
 8002ad8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8002ada:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002adc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002ade:	d10d      	bne.n	8002afc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <vPortEnterCritical+0x40>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002ae8:	d008      	beq.n	8002afc <vPortEnterCritical+0x38>
 8002aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aee:	f383 8811 	msr	BASEPRI, r3
 8002af2:	f3bf 8f6f 	isb	sy
 8002af6:	f3bf 8f4f 	dsb	sy
 8002afa:	e7fe      	b.n	8002afa <vPortEnterCritical+0x36>
}
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000008 	.word	0x20000008
 8002b04:	e000ed04 	.word	0xe000ed04

08002b08 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002b08:	4a08      	ldr	r2, [pc, #32]	; (8002b2c <vPortExitCritical+0x24>)
 8002b0a:	6813      	ldr	r3, [r2, #0]
 8002b0c:	b943      	cbnz	r3, 8002b20 <vPortExitCritical+0x18>
 8002b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	e7fe      	b.n	8002b1e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002b20:	3b01      	subs	r3, #1
 8002b22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002b24:	b90b      	cbnz	r3, 8002b2a <vPortExitCritical+0x22>
	__asm volatile
 8002b26:	f383 8811 	msr	BASEPRI, r3
}
 8002b2a:	4770      	bx	lr
 8002b2c:	20000008 	.word	0x20000008

08002b30 <PendSV_Handler>:
	__asm volatile
 8002b30:	f3ef 8009 	mrs	r0, PSP
 8002b34:	f3bf 8f6f 	isb	sy
 8002b38:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <pxCurrentTCBConst>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	f01e 0f10 	tst.w	lr, #16
 8002b40:	bf08      	it	eq
 8002b42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002b46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b4a:	6010      	str	r0, [r2, #0]
 8002b4c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002b50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002b54:	f380 8811 	msr	BASEPRI, r0
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	f3bf 8f6f 	isb	sy
 8002b60:	f000 fc7c 	bl	800345c <vTaskSwitchContext>
 8002b64:	f04f 0000 	mov.w	r0, #0
 8002b68:	f380 8811 	msr	BASEPRI, r0
 8002b6c:	bc08      	pop	{r3}
 8002b6e:	6819      	ldr	r1, [r3, #0]
 8002b70:	6808      	ldr	r0, [r1, #0]
 8002b72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b76:	f01e 0f10 	tst.w	lr, #16
 8002b7a:	bf08      	it	eq
 8002b7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002b80:	f380 8809 	msr	PSP, r0
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	f3af 8000 	nop.w

08002b90 <pxCurrentTCBConst>:
 8002b90:	2000129c 	.word	0x2000129c

08002b94 <xPortSysTickHandler>:
{
 8002b94:	b508      	push	{r3, lr}
	__asm volatile
 8002b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9a:	f383 8811 	msr	BASEPRI, r3
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002ba6:	f000 faf3 	bl	8003190 <xTaskIncrementTick>
 8002baa:	b118      	cbz	r0, 8002bb4 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002bac:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <xPortSysTickHandler+0x28>)
 8002bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bb2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f383 8811 	msr	BASEPRI, r3
}
 8002bba:	bd08      	pop	{r3, pc}
 8002bbc:	e000ed04 	.word	0xe000ed04

08002bc0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <vPortSetupTimerInterrupt+0x1c>)
 8002bc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002bcc:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <vPortSetupTimerInterrupt+0x20>)
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002bd2:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <vPortSetupTimerInterrupt+0x24>)
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	601a      	str	r2, [r3, #0]
}
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	20000000 	.word	0x20000000
 8002be0:	e000e014 	.word	0xe000e014
 8002be4:	e000e010 	.word	0xe000e010

08002be8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002be8:	4b31      	ldr	r3, [pc, #196]	; (8002cb0 <xPortStartScheduler+0xc8>)
 8002bea:	4a32      	ldr	r2, [pc, #200]	; (8002cb4 <xPortStartScheduler+0xcc>)
{
 8002bec:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002bee:	6819      	ldr	r1, [r3, #0]
 8002bf0:	4291      	cmp	r1, r2
 8002bf2:	d108      	bne.n	8002c06 <xPortStartScheduler+0x1e>
	__asm volatile
 8002bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf8:	f383 8811 	msr	BASEPRI, r3
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	e7fe      	b.n	8002c04 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4b2b      	ldr	r3, [pc, #172]	; (8002cb8 <xPortStartScheduler+0xd0>)
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d108      	bne.n	8002c20 <xPortStartScheduler+0x38>
 8002c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	e7fe      	b.n	8002c1e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c20:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <xPortStartScheduler+0xd4>)
 8002c22:	781a      	ldrb	r2, [r3, #0]
 8002c24:	b2d2      	uxtb	r2, r2
 8002c26:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c28:	22ff      	movs	r2, #255	; 0xff
 8002c2a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c2c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c2e:	4a24      	ldr	r2, [pc, #144]	; (8002cc0 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c36:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002c3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c3e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c40:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <xPortStartScheduler+0xdc>)
 8002c42:	2207      	movs	r2, #7
 8002c44:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c46:	2100      	movs	r1, #0
 8002c48:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002c4c:	0600      	lsls	r0, r0, #24
 8002c4e:	f102 34ff 	add.w	r4, r2, #4294967295
 8002c52:	d423      	bmi.n	8002c9c <xPortStartScheduler+0xb4>
 8002c54:	b101      	cbz	r1, 8002c58 <xPortStartScheduler+0x70>
 8002c56:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c5c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002c60:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c62:	9b01      	ldr	r3, [sp, #4]
 8002c64:	4a15      	ldr	r2, [pc, #84]	; (8002cbc <xPortStartScheduler+0xd4>)
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002c6a:	4b17      	ldr	r3, [pc, #92]	; (8002cc8 <xPortStartScheduler+0xe0>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002c72:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002c7a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002c7c:	f7ff ffa0 	bl	8002bc0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002c80:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <xPortStartScheduler+0xe4>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8002c86:	f7ff fee9 	bl	8002a5c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002c8a:	4a11      	ldr	r2, [pc, #68]	; (8002cd0 <xPortStartScheduler+0xe8>)
 8002c8c:	6813      	ldr	r3, [r2, #0]
 8002c8e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002c92:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002c94:	f7ff fed2 	bl	8002a3c <prvPortStartFirstTask>
	prvTaskExitError();
 8002c98:	f7ff feb8 	bl	8002a0c <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c9c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002ca0:	0052      	lsls	r2, r2, #1
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	f88d 2003 	strb.w	r2, [sp, #3]
 8002ca8:	2101      	movs	r1, #1
 8002caa:	4622      	mov	r2, r4
 8002cac:	e7cc      	b.n	8002c48 <xPortStartScheduler+0x60>
 8002cae:	bf00      	nop
 8002cb0:	e000ed00 	.word	0xe000ed00
 8002cb4:	410fc271 	.word	0x410fc271
 8002cb8:	410fc270 	.word	0x410fc270
 8002cbc:	e000e400 	.word	0xe000e400
 8002cc0:	20001294 	.word	0x20001294
 8002cc4:	20001298 	.word	0x20001298
 8002cc8:	e000ed20 	.word	0xe000ed20
 8002ccc:	20000008 	.word	0x20000008
 8002cd0:	e000ef34 	.word	0xe000ef34

08002cd4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8002cd4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002cd8:	2b0f      	cmp	r3, #15
 8002cda:	d90e      	bls.n	8002cfa <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002cdc:	4a10      	ldr	r2, [pc, #64]	; (8002d20 <vPortValidateInterruptPriority+0x4c>)
 8002cde:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002ce0:	4a10      	ldr	r2, [pc, #64]	; (8002d24 <vPortValidateInterruptPriority+0x50>)
 8002ce2:	7812      	ldrb	r2, [r2, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d908      	bls.n	8002cfa <vPortValidateInterruptPriority+0x26>
 8002ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cec:	f383 8811 	msr	BASEPRI, r3
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	e7fe      	b.n	8002cf8 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <vPortValidateInterruptPriority+0x54>)
 8002cfc:	4a0b      	ldr	r2, [pc, #44]	; (8002d2c <vPortValidateInterruptPriority+0x58>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d908      	bls.n	8002d1c <vPortValidateInterruptPriority+0x48>
 8002d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	e7fe      	b.n	8002d1a <vPortValidateInterruptPriority+0x46>
	}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000e3f0 	.word	0xe000e3f0
 8002d24:	20001294 	.word	0x20001294
 8002d28:	e000ed0c 	.word	0xe000ed0c
 8002d2c:	20001298 	.word	0x20001298

08002d30 <prvTaskIsTaskSuspended.part.0>:
 8002d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d34:	f383 8811 	msr	BASEPRI, r3
 8002d38:	f3bf 8f6f 	isb	sy
 8002d3c:	f3bf 8f4f 	dsb	sy
 8002d40:	e7fe      	b.n	8002d40 <prvTaskIsTaskSuspended.part.0+0x10>
	...

08002d44 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d44:	4a06      	ldr	r2, [pc, #24]	; (8002d60 <prvResetNextTaskUnblockTime+0x1c>)
 8002d46:	6813      	ldr	r3, [r2, #0]
 8002d48:	6819      	ldr	r1, [r3, #0]
 8002d4a:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <prvResetNextTaskUnblockTime+0x20>)
 8002d4c:	b919      	cbnz	r1, 8002d56 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d4e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002d52:	601a      	str	r2, [r3, #0]
	}
}
 8002d54:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002d5a:	68d2      	ldr	r2, [r2, #12]
 8002d5c:	6852      	ldr	r2, [r2, #4]
 8002d5e:	e7f8      	b.n	8002d52 <prvResetNextTaskUnblockTime+0xe>
 8002d60:	200012a0 	.word	0x200012a0
 8002d64:	2000138c 	.word	0x2000138c

08002d68 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002d6a:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d6c:	4e1b      	ldr	r6, [pc, #108]	; (8002ddc <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002d6e:	681c      	ldr	r4, [r3, #0]
{
 8002d70:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d72:	6830      	ldr	r0, [r6, #0]
 8002d74:	3004      	adds	r0, #4
{
 8002d76:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d78:	f7ff fe38 	bl	80029ec <uxListRemove>
 8002d7c:	4633      	mov	r3, r6
 8002d7e:	b940      	cbnz	r0, 8002d92 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002d80:	6831      	ldr	r1, [r6, #0]
 8002d82:	4e17      	ldr	r6, [pc, #92]	; (8002de0 <prvAddCurrentTaskToDelayedList+0x78>)
 8002d84:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002d86:	6832      	ldr	r2, [r6, #0]
 8002d88:	2001      	movs	r0, #1
 8002d8a:	4088      	lsls	r0, r1
 8002d8c:	ea22 0200 	bic.w	r2, r2, r0
 8002d90:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d92:	1c6a      	adds	r2, r5, #1
 8002d94:	d107      	bne.n	8002da6 <prvAddCurrentTaskToDelayedList+0x3e>
 8002d96:	b137      	cbz	r7, 8002da6 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d98:	6819      	ldr	r1, [r3, #0]
 8002d9a:	4812      	ldr	r0, [pc, #72]	; (8002de4 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002d9c:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002d9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002da2:	f7ff be00 	b.w	80029a6 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	1964      	adds	r4, r4, r5
 8002daa:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002dac:	d307      	bcc.n	8002dbe <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dae:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <prvAddCurrentTaskToDelayedList+0x80>)
 8002db0:	6810      	ldr	r0, [r2, #0]
 8002db2:	6819      	ldr	r1, [r3, #0]
}
 8002db4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002db8:	3104      	adds	r1, #4
 8002dba:	f7ff be00 	b.w	80029be <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dbe:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <prvAddCurrentTaskToDelayedList+0x84>)
 8002dc0:	6810      	ldr	r0, [r2, #0]
 8002dc2:	6819      	ldr	r1, [r3, #0]
 8002dc4:	3104      	adds	r1, #4
 8002dc6:	f7ff fdfa 	bl	80029be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002dca:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <prvAddCurrentTaskToDelayedList+0x88>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8002dd0:	bf88      	it	hi
 8002dd2:	601c      	strhi	r4, [r3, #0]
}
 8002dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	200013d4 	.word	0x200013d4
 8002ddc:	2000129c 	.word	0x2000129c
 8002de0:	2000135c 	.word	0x2000135c
 8002de4:	200013ac 	.word	0x200013ac
 8002de8:	200012a4 	.word	0x200012a4
 8002dec:	200012a0 	.word	0x200012a0
 8002df0:	2000138c 	.word	0x2000138c

08002df4 <xTaskCreate>:
	{
 8002df4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002df8:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002dfc:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dfe:	4650      	mov	r0, sl
	{
 8002e00:	460d      	mov	r5, r1
 8002e02:	4699      	mov	r9, r3
 8002e04:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e06:	f7ff fa0f 	bl	8002228 <pvPortMalloc>
			if( pxStack != NULL )
 8002e0a:	4607      	mov	r7, r0
 8002e0c:	2800      	cmp	r0, #0
 8002e0e:	f000 809f 	beq.w	8002f50 <xTaskCreate+0x15c>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002e12:	205c      	movs	r0, #92	; 0x5c
 8002e14:	f7ff fa08 	bl	8002228 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002e18:	4604      	mov	r4, r0
 8002e1a:	2800      	cmp	r0, #0
 8002e1c:	f000 8095 	beq.w	8002f4a <xTaskCreate+0x156>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e20:	4652      	mov	r2, sl
					pxNewTCB->pxStack = pxStack;
 8002e22:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e24:	21a5      	movs	r1, #165	; 0xa5
 8002e26:	4638      	mov	r0, r7
 8002e28:	f001 f835 	bl	8003e96 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002e2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e2e:	f1aa 0a04 	sub.w	sl, sl, #4
 8002e32:	449a      	add	sl, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002e34:	f02a 0a07 	bic.w	sl, sl, #7
 8002e38:	1e6b      	subs	r3, r5, #1
 8002e3a:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8002e3e:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e40:	f913 1f01 	ldrsb.w	r1, [r3, #1]!
 8002e44:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002e48:	f993 1000 	ldrsb.w	r1, [r3]
 8002e4c:	b109      	cbz	r1, 8002e52 <xTaskCreate+0x5e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e4e:	429d      	cmp	r5, r3
 8002e50:	d1f6      	bne.n	8002e40 <xTaskCreate+0x4c>
 8002e52:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002e54:	2d07      	cmp	r5, #7
 8002e56:	bf28      	it	cs
 8002e58:	2507      	movcs	r5, #7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e5a:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e5e:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8002e60:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8002e62:	e9c4 5b13 	strd	r5, fp, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e66:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e68:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e6c:	f7ff fd98 	bl	80029a0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e70:	f1c5 0508 	rsb	r5, r5, #8
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e74:	f104 0018 	add.w	r0, r4, #24
 8002e78:	f7ff fd92 	bl	80029a0 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002e7c:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e80:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e82:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e84:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e86:	f884 b058 	strb.w	fp, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e8a:	464a      	mov	r2, r9
 8002e8c:	4641      	mov	r1, r8
 8002e8e:	4650      	mov	r0, sl
 8002e90:	f7ff fdee 	bl	8002a70 <pxPortInitialiseStack>
 8002e94:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002e96:	b106      	cbz	r6, 8002e9a <xTaskCreate+0xa6>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e98:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8002e9a:	f7ff fe13 	bl	8002ac4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002e9e:	4b33      	ldr	r3, [pc, #204]	; (8002f6c <xTaskCreate+0x178>)
		if( pxCurrentTCB == NULL )
 8002ea0:	4e33      	ldr	r6, [pc, #204]	; (8002f70 <xTaskCreate+0x17c>)
		uxCurrentNumberOfTasks++;
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8002f9c <xTaskCreate+0x1a8>
 8002ea8:	3201      	adds	r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002eac:	6835      	ldr	r5, [r6, #0]
 8002eae:	2d00      	cmp	r5, #0
 8002eb0:	d151      	bne.n	8002f56 <xTaskCreate+0x162>
			pxCurrentTCB = pxNewTCB;
 8002eb2:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d11f      	bne.n	8002efa <xTaskCreate+0x106>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002eba:	f04f 0914 	mov.w	r9, #20
 8002ebe:	fb09 8005 	mla	r0, r9, r5, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ec2:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ec4:	f7ff fd61 	bl	800298a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ec8:	2d08      	cmp	r5, #8
 8002eca:	d1f8      	bne.n	8002ebe <xTaskCreate+0xca>
	vListInitialise( &xDelayedTaskList1 );
 8002ecc:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002fa0 <xTaskCreate+0x1ac>
	vListInitialise( &xDelayedTaskList2 );
 8002ed0:	4d28      	ldr	r5, [pc, #160]	; (8002f74 <xTaskCreate+0x180>)
	vListInitialise( &xDelayedTaskList1 );
 8002ed2:	4648      	mov	r0, r9
 8002ed4:	f7ff fd59 	bl	800298a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002ed8:	4628      	mov	r0, r5
 8002eda:	f7ff fd56 	bl	800298a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002ede:	4826      	ldr	r0, [pc, #152]	; (8002f78 <xTaskCreate+0x184>)
 8002ee0:	f7ff fd53 	bl	800298a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002ee4:	4825      	ldr	r0, [pc, #148]	; (8002f7c <xTaskCreate+0x188>)
 8002ee6:	f7ff fd50 	bl	800298a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002eea:	4825      	ldr	r0, [pc, #148]	; (8002f80 <xTaskCreate+0x18c>)
 8002eec:	f7ff fd4d 	bl	800298a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002ef0:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <xTaskCreate+0x190>)
 8002ef2:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ef6:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <xTaskCreate+0x194>)
 8002ef8:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002efa:	4a24      	ldr	r2, [pc, #144]	; (8002f8c <xTaskCreate+0x198>)
		prvAddTaskToReadyList( pxNewTCB );
 8002efc:	4924      	ldr	r1, [pc, #144]	; (8002f90 <xTaskCreate+0x19c>)
		uxTaskNumber++;
 8002efe:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002f00:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002f02:	3301      	adds	r3, #1
 8002f04:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002f06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f08:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8002f0a:	2501      	movs	r5, #1
 8002f0c:	fa05 f302 	lsl.w	r3, r5, r2
 8002f10:	4303      	orrs	r3, r0
 8002f12:	2014      	movs	r0, #20
 8002f14:	600b      	str	r3, [r1, #0]
 8002f16:	fb00 8002 	mla	r0, r0, r2, r8
 8002f1a:	4639      	mov	r1, r7
 8002f1c:	f7ff fd43 	bl	80029a6 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002f20:	f7ff fdf2 	bl	8002b08 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002f24:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <xTaskCreate+0x1a0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	b163      	cbz	r3, 8002f44 <xTaskCreate+0x150>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f2a:	6833      	ldr	r3, [r6, #0]
 8002f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d207      	bcs.n	8002f44 <xTaskCreate+0x150>
			taskYIELD_IF_USING_PREEMPTION();
 8002f34:	4b18      	ldr	r3, [pc, #96]	; (8002f98 <xTaskCreate+0x1a4>)
 8002f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	f3bf 8f6f 	isb	sy
	}
 8002f44:	4628      	mov	r0, r5
 8002f46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8002f4a:	4638      	mov	r0, r7
 8002f4c:	f7ff f9f8 	bl	8002340 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f50:	f04f 35ff 	mov.w	r5, #4294967295
 8002f54:	e7f6      	b.n	8002f44 <xTaskCreate+0x150>
			if( xSchedulerRunning == pdFALSE )
 8002f56:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <xTaskCreate+0x1a0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1cd      	bne.n	8002efa <xTaskCreate+0x106>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f5e:	6833      	ldr	r3, [r6, #0]
 8002f60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f64:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002f66:	bf28      	it	cs
 8002f68:	6034      	strcs	r4, [r6, #0]
 8002f6a:	e7c6      	b.n	8002efa <xTaskCreate+0x106>
 8002f6c:	20001348 	.word	0x20001348
 8002f70:	2000129c 	.word	0x2000129c
 8002f74:	20001374 	.word	0x20001374
 8002f78:	20001394 	.word	0x20001394
 8002f7c:	200013c0 	.word	0x200013c0
 8002f80:	200013ac 	.word	0x200013ac
 8002f84:	200012a0 	.word	0x200012a0
 8002f88:	200012a4 	.word	0x200012a4
 8002f8c:	20001358 	.word	0x20001358
 8002f90:	2000135c 	.word	0x2000135c
 8002f94:	200013a8 	.word	0x200013a8
 8002f98:	e000ed04 	.word	0xe000ed04
 8002f9c:	200012a8 	.word	0x200012a8
 8002fa0:	20001360 	.word	0x20001360

08002fa4 <vTaskResume>:
	{
 8002fa4:	b570      	push	{r4, r5, r6, lr}
		configASSERT( xTaskToResume );
 8002fa6:	4604      	mov	r4, r0
 8002fa8:	b940      	cbnz	r0, 8002fbc <vTaskResume+0x18>
 8002faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fae:	f383 8811 	msr	BASEPRI, r3
 8002fb2:	f3bf 8f6f 	isb	sy
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	e7fe      	b.n	8002fba <vTaskResume+0x16>
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8002fbc:	4d19      	ldr	r5, [pc, #100]	; (8003024 <vTaskResume+0x80>)
 8002fbe:	682b      	ldr	r3, [r5, #0]
 8002fc0:	4283      	cmp	r3, r0
 8002fc2:	d02d      	beq.n	8003020 <vTaskResume+0x7c>
			taskENTER_CRITICAL();
 8002fc4:	f7ff fd7e 	bl	8002ac4 <vPortEnterCritical>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002fc8:	6962      	ldr	r2, [r4, #20]
 8002fca:	4b17      	ldr	r3, [pc, #92]	; (8003028 <vTaskResume+0x84>)
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d123      	bne.n	8003018 <vTaskResume+0x74>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002fd0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002fd2:	4a16      	ldr	r2, [pc, #88]	; (800302c <vTaskResume+0x88>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d01f      	beq.n	8003018 <vTaskResume+0x74>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8002fd8:	b9f3      	cbnz	r3, 8003018 <vTaskResume+0x74>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8002fda:	1d26      	adds	r6, r4, #4
 8002fdc:	4630      	mov	r0, r6
 8002fde:	f7ff fd05 	bl	80029ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002fe2:	4913      	ldr	r1, [pc, #76]	; (8003030 <vTaskResume+0x8c>)
 8002fe4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002fe6:	6808      	ldr	r0, [r1, #0]
 8002fe8:	2301      	movs	r3, #1
 8002fea:	4093      	lsls	r3, r2
 8002fec:	4303      	orrs	r3, r0
 8002fee:	600b      	str	r3, [r1, #0]
 8002ff0:	4b10      	ldr	r3, [pc, #64]	; (8003034 <vTaskResume+0x90>)
 8002ff2:	2014      	movs	r0, #20
 8002ff4:	fb00 3002 	mla	r0, r0, r2, r3
 8002ff8:	4631      	mov	r1, r6
 8002ffa:	f7ff fcd4 	bl	80029a6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ffe:	682b      	ldr	r3, [r5, #0]
 8003000:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	429a      	cmp	r2, r3
 8003006:	d307      	bcc.n	8003018 <vTaskResume+0x74>
						taskYIELD_IF_USING_PREEMPTION();
 8003008:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <vTaskResume+0x94>)
 800300a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	f3bf 8f6f 	isb	sy
	}
 8003018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 800301c:	f7ff bd74 	b.w	8002b08 <vPortExitCritical>
	}
 8003020:	bd70      	pop	{r4, r5, r6, pc}
 8003022:	bf00      	nop
 8003024:	2000129c 	.word	0x2000129c
 8003028:	200013ac 	.word	0x200013ac
 800302c:	20001394 	.word	0x20001394
 8003030:	2000135c 	.word	0x2000135c
 8003034:	200012a8 	.word	0x200012a8
 8003038:	e000ed04 	.word	0xe000ed04

0800303c <xTaskResumeFromISR>:
	{
 800303c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
 800303e:	4605      	mov	r5, r0
 8003040:	b940      	cbnz	r0, 8003054 <xTaskResumeFromISR+0x18>
 8003042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003046:	f383 8811 	msr	BASEPRI, r3
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	e7fe      	b.n	8003052 <xTaskResumeFromISR+0x16>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003054:	f7ff fe3e 	bl	8002cd4 <vPortValidateInterruptPriority>
	__asm volatile
 8003058:	f3ef 8611 	mrs	r6, BASEPRI
 800305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003060:	f383 8811 	msr	BASEPRI, r3
 8003064:	f3bf 8f6f 	isb	sy
 8003068:	f3bf 8f4f 	dsb	sy
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800306c:	4b17      	ldr	r3, [pc, #92]	; (80030cc <xTaskResumeFromISR+0x90>)
 800306e:	696a      	ldr	r2, [r5, #20]
 8003070:	429a      	cmp	r2, r3
 8003072:	d128      	bne.n	80030c6 <xTaskResumeFromISR+0x8a>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003074:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8003076:	4816      	ldr	r0, [pc, #88]	; (80030d0 <xTaskResumeFromISR+0x94>)
 8003078:	4284      	cmp	r4, r0
 800307a:	d024      	beq.n	80030c6 <xTaskResumeFromISR+0x8a>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 800307c:	bb1c      	cbnz	r4, 80030c6 <xTaskResumeFromISR+0x8a>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800307e:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <xTaskResumeFromISR+0x98>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	b9eb      	cbnz	r3, 80030c0 <xTaskResumeFromISR+0x84>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003084:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <xTaskResumeFromISR+0x9c>)
 8003086:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800308c:	1d2f      	adds	r7, r5, #4
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800308e:	429c      	cmp	r4, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003090:	4638      	mov	r0, r7
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003092:	bf34      	ite	cc
 8003094:	2400      	movcc	r4, #0
 8003096:	2401      	movcs	r4, #1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003098:	f7ff fca8 	bl	80029ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800309c:	490f      	ldr	r1, [pc, #60]	; (80030dc <xTaskResumeFromISR+0xa0>)
 800309e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80030a0:	6808      	ldr	r0, [r1, #0]
 80030a2:	2301      	movs	r3, #1
 80030a4:	4093      	lsls	r3, r2
 80030a6:	4303      	orrs	r3, r0
 80030a8:	600b      	str	r3, [r1, #0]
 80030aa:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <xTaskResumeFromISR+0xa4>)
 80030ac:	2014      	movs	r0, #20
 80030ae:	4639      	mov	r1, r7
 80030b0:	fb00 3002 	mla	r0, r0, r2, r3
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80030b4:	f7ff fc77 	bl	80029a6 <vListInsertEnd>
	__asm volatile
 80030b8:	f386 8811 	msr	BASEPRI, r6
	}
 80030bc:	4620      	mov	r0, r4
 80030be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80030c0:	f105 0118 	add.w	r1, r5, #24
 80030c4:	e7f6      	b.n	80030b4 <xTaskResumeFromISR+0x78>
	BaseType_t xYieldRequired = pdFALSE;
 80030c6:	2400      	movs	r4, #0
 80030c8:	e7f6      	b.n	80030b8 <xTaskResumeFromISR+0x7c>
 80030ca:	bf00      	nop
 80030cc:	200013ac 	.word	0x200013ac
 80030d0:	20001394 	.word	0x20001394
 80030d4:	20001354 	.word	0x20001354
 80030d8:	2000129c 	.word	0x2000129c
 80030dc:	2000135c 	.word	0x2000135c
 80030e0:	200012a8 	.word	0x200012a8

080030e4 <vTaskStartScheduler>:
{
 80030e4:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80030e6:	4b19      	ldr	r3, [pc, #100]	; (800314c <vTaskStartScheduler+0x68>)
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	2400      	movs	r4, #0
 80030ec:	9400      	str	r4, [sp, #0]
 80030ee:	4623      	mov	r3, r4
 80030f0:	2280      	movs	r2, #128	; 0x80
 80030f2:	4917      	ldr	r1, [pc, #92]	; (8003150 <vTaskStartScheduler+0x6c>)
 80030f4:	4817      	ldr	r0, [pc, #92]	; (8003154 <vTaskStartScheduler+0x70>)
 80030f6:	f7ff fe7d 	bl	8002df4 <xTaskCreate>
		if( xReturn == pdPASS )
 80030fa:	2801      	cmp	r0, #1
 80030fc:	d118      	bne.n	8003130 <vTaskStartScheduler+0x4c>
			xReturn = xTimerCreateTimerTask();
 80030fe:	f000 fc13 	bl	8003928 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8003102:	2801      	cmp	r0, #1
 8003104:	d114      	bne.n	8003130 <vTaskStartScheduler+0x4c>
	__asm volatile
 8003106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <vTaskStartScheduler+0x74>)
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800311e:	4b0f      	ldr	r3, [pc, #60]	; (800315c <vTaskStartScheduler+0x78>)
 8003120:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003122:	4b0f      	ldr	r3, [pc, #60]	; (8003160 <vTaskStartScheduler+0x7c>)
 8003124:	601c      	str	r4, [r3, #0]
}
 8003126:	b002      	add	sp, #8
 8003128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800312c:	f7ff bd5c 	b.w	8002be8 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003130:	3001      	adds	r0, #1
 8003132:	d108      	bne.n	8003146 <vTaskStartScheduler+0x62>
 8003134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	e7fe      	b.n	8003144 <vTaskStartScheduler+0x60>
}
 8003146:	b002      	add	sp, #8
 8003148:	bd10      	pop	{r4, pc}
 800314a:	bf00      	nop
 800314c:	20001388 	.word	0x20001388
 8003150:	080082c5 	.word	0x080082c5
 8003154:	080033e9 	.word	0x080033e9
 8003158:	2000138c 	.word	0x2000138c
 800315c:	200013a8 	.word	0x200013a8
 8003160:	200013d4 	.word	0x200013d4

08003164 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003164:	4a02      	ldr	r2, [pc, #8]	; (8003170 <vTaskSuspendAll+0xc>)
 8003166:	6813      	ldr	r3, [r2, #0]
 8003168:	3301      	adds	r3, #1
 800316a:	6013      	str	r3, [r2, #0]
}
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20001354 	.word	0x20001354

08003174 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003174:	4b01      	ldr	r3, [pc, #4]	; (800317c <xTaskGetTickCount+0x8>)
 8003176:	6818      	ldr	r0, [r3, #0]
}
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	200013d4 	.word	0x200013d4

08003180 <xTaskGetTickCountFromISR>:
{
 8003180:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003182:	f7ff fda7 	bl	8002cd4 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8003186:	4b01      	ldr	r3, [pc, #4]	; (800318c <xTaskGetTickCountFromISR+0xc>)
 8003188:	6818      	ldr	r0, [r3, #0]
}
 800318a:	bd08      	pop	{r3, pc}
 800318c:	200013d4 	.word	0x200013d4

08003190 <xTaskIncrementTick>:
{
 8003190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003194:	4b3c      	ldr	r3, [pc, #240]	; (8003288 <xTaskIncrementTick+0xf8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d16e      	bne.n	800327a <xTaskIncrementTick+0xea>
		const TickType_t xConstTickCount = xTickCount + 1;
 800319c:	4b3b      	ldr	r3, [pc, #236]	; (800328c <xTaskIncrementTick+0xfc>)
 800319e:	681c      	ldr	r4, [r3, #0]
 80031a0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80031a2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80031a4:	b9bc      	cbnz	r4, 80031d6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80031a6:	4b3a      	ldr	r3, [pc, #232]	; (8003290 <xTaskIncrementTick+0x100>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	b142      	cbz	r2, 80031c0 <xTaskIncrementTick+0x30>
 80031ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	e7fe      	b.n	80031be <xTaskIncrementTick+0x2e>
 80031c0:	4a34      	ldr	r2, [pc, #208]	; (8003294 <xTaskIncrementTick+0x104>)
 80031c2:	6819      	ldr	r1, [r3, #0]
 80031c4:	6810      	ldr	r0, [r2, #0]
 80031c6:	6018      	str	r0, [r3, #0]
 80031c8:	6011      	str	r1, [r2, #0]
 80031ca:	4a33      	ldr	r2, [pc, #204]	; (8003298 <xTaskIncrementTick+0x108>)
 80031cc:	6813      	ldr	r3, [r2, #0]
 80031ce:	3301      	adds	r3, #1
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	f7ff fdb7 	bl	8002d44 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031d6:	4d31      	ldr	r5, [pc, #196]	; (800329c <xTaskIncrementTick+0x10c>)
 80031d8:	4f31      	ldr	r7, [pc, #196]	; (80032a0 <xTaskIncrementTick+0x110>)
 80031da:	682b      	ldr	r3, [r5, #0]
 80031dc:	42a3      	cmp	r3, r4
BaseType_t xSwitchRequired = pdFALSE;
 80031de:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031e2:	d911      	bls.n	8003208 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	4b2f      	ldr	r3, [pc, #188]	; (80032a4 <xTaskIncrementTick+0x114>)
 80031e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80031ea:	2214      	movs	r2, #20
 80031ec:	434a      	muls	r2, r1
 80031ee:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80031f0:	2a02      	cmp	r2, #2
 80031f2:	bf28      	it	cs
 80031f4:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80031f8:	4a2b      	ldr	r2, [pc, #172]	; (80032a8 <xTaskIncrementTick+0x118>)
 80031fa:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80031fc:	2a00      	cmp	r2, #0
}
 80031fe:	bf0c      	ite	eq
 8003200:	4658      	moveq	r0, fp
 8003202:	2001      	movne	r0, #1
 8003204:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003208:	f8df a084 	ldr.w	sl, [pc, #132]	; 8003290 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 800320c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80032b0 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003210:	f8da 2000 	ldr.w	r2, [sl]
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	b91a      	cbnz	r2, 8003220 <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003218:	f04f 32ff 	mov.w	r2, #4294967295
 800321c:	602a      	str	r2, [r5, #0]
					break;
 800321e:	e7e1      	b.n	80031e4 <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003220:	f8da 2000 	ldr.w	r2, [sl]
 8003224:	68d2      	ldr	r2, [r2, #12]
 8003226:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003228:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800322a:	428c      	cmp	r4, r1
 800322c:	d201      	bcs.n	8003232 <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 800322e:	6029      	str	r1, [r5, #0]
						break;
 8003230:	e7d8      	b.n	80031e4 <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003232:	f106 0804 	add.w	r8, r6, #4
 8003236:	4640      	mov	r0, r8
 8003238:	f7ff fbd8 	bl	80029ec <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800323c:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800323e:	b119      	cbz	r1, 8003248 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003240:	f106 0018 	add.w	r0, r6, #24
 8003244:	f7ff fbd2 	bl	80029ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003248:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800324a:	f8d9 3000 	ldr.w	r3, [r9]
 800324e:	2201      	movs	r2, #1
 8003250:	fa02 f100 	lsl.w	r1, r2, r0
 8003254:	4319      	orrs	r1, r3
 8003256:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <xTaskIncrementTick+0x114>)
 8003258:	f8c9 1000 	str.w	r1, [r9]
 800325c:	f04f 0c14 	mov.w	ip, #20
 8003260:	4641      	mov	r1, r8
 8003262:	fb0c 3000 	mla	r0, ip, r0, r3
 8003266:	f7ff fb9e 	bl	80029a6 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800326a:	6838      	ldr	r0, [r7, #0]
 800326c:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800326e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003270:	4291      	cmp	r1, r2
 8003272:	bf28      	it	cs
 8003274:	f04f 0b01 	movcs.w	fp, #1
 8003278:	e7ca      	b.n	8003210 <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 800327a:	4a0c      	ldr	r2, [pc, #48]	; (80032ac <xTaskIncrementTick+0x11c>)
 800327c:	6813      	ldr	r3, [r2, #0]
 800327e:	3301      	adds	r3, #1
 8003280:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003282:	f04f 0b00 	mov.w	fp, #0
 8003286:	e7b7      	b.n	80031f8 <xTaskIncrementTick+0x68>
 8003288:	20001354 	.word	0x20001354
 800328c:	200013d4 	.word	0x200013d4
 8003290:	200012a0 	.word	0x200012a0
 8003294:	200012a4 	.word	0x200012a4
 8003298:	20001390 	.word	0x20001390
 800329c:	2000138c 	.word	0x2000138c
 80032a0:	2000129c 	.word	0x2000129c
 80032a4:	200012a8 	.word	0x200012a8
 80032a8:	200013d8 	.word	0x200013d8
 80032ac:	20001350 	.word	0x20001350
 80032b0:	2000135c 	.word	0x2000135c

080032b4 <xTaskResumeAll>:
{
 80032b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80032b8:	4c30      	ldr	r4, [pc, #192]	; (800337c <xTaskResumeAll+0xc8>)
 80032ba:	6823      	ldr	r3, [r4, #0]
 80032bc:	b943      	cbnz	r3, 80032d0 <xTaskResumeAll+0x1c>
 80032be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	e7fe      	b.n	80032ce <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80032d0:	f7ff fbf8 	bl	8002ac4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032da:	6824      	ldr	r4, [r4, #0]
 80032dc:	b12c      	cbz	r4, 80032ea <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80032de:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80032e0:	f7ff fc12 	bl	8002b08 <vPortExitCritical>
}
 80032e4:	4620      	mov	r0, r4
 80032e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032ea:	4b25      	ldr	r3, [pc, #148]	; (8003380 <xTaskResumeAll+0xcc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f5      	beq.n	80032de <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032f2:	4d24      	ldr	r5, [pc, #144]	; (8003384 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 80032f4:	4e24      	ldr	r6, [pc, #144]	; (8003388 <xTaskResumeAll+0xd4>)
 80032f6:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800339c <xTaskResumeAll+0xe8>
 80032fa:	e01f      	b.n	800333c <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80032fc:	68eb      	ldr	r3, [r5, #12]
 80032fe:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003300:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003304:	f104 0018 	add.w	r0, r4, #24
 8003308:	f7ff fb70 	bl	80029ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800330c:	4648      	mov	r0, r9
 800330e:	f7ff fb6d 	bl	80029ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003312:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003314:	6831      	ldr	r1, [r6, #0]
 8003316:	2701      	movs	r7, #1
 8003318:	fa07 f302 	lsl.w	r3, r7, r2
 800331c:	2014      	movs	r0, #20
 800331e:	430b      	orrs	r3, r1
 8003320:	fb00 8002 	mla	r0, r0, r2, r8
 8003324:	4649      	mov	r1, r9
 8003326:	6033      	str	r3, [r6, #0]
 8003328:	f7ff fb3d 	bl	80029a6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800332c:	4b17      	ldr	r3, [pc, #92]	; (800338c <xTaskResumeAll+0xd8>)
 800332e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	429a      	cmp	r2, r3
 8003336:	d301      	bcc.n	800333c <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8003338:	4b15      	ldr	r3, [pc, #84]	; (8003390 <xTaskResumeAll+0xdc>)
 800333a:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800333c:	682b      	ldr	r3, [r5, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1dc      	bne.n	80032fc <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8003342:	b10c      	cbz	r4, 8003348 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8003344:	f7ff fcfe 	bl	8002d44 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003348:	4d12      	ldr	r5, [pc, #72]	; (8003394 <xTaskResumeAll+0xe0>)
 800334a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800334c:	b144      	cbz	r4, 8003360 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 800334e:	4e10      	ldr	r6, [pc, #64]	; (8003390 <xTaskResumeAll+0xdc>)
 8003350:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003352:	f7ff ff1d 	bl	8003190 <xTaskIncrementTick>
 8003356:	b100      	cbz	r0, 800335a <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8003358:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800335a:	3c01      	subs	r4, #1
 800335c:	d1f9      	bne.n	8003352 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 800335e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <xTaskResumeAll+0xdc>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ba      	beq.n	80032de <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <xTaskResumeAll+0xe4>)
 800336a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003378:	2401      	movs	r4, #1
 800337a:	e7b1      	b.n	80032e0 <xTaskResumeAll+0x2c>
 800337c:	20001354 	.word	0x20001354
 8003380:	20001348 	.word	0x20001348
 8003384:	20001394 	.word	0x20001394
 8003388:	2000135c 	.word	0x2000135c
 800338c:	2000129c 	.word	0x2000129c
 8003390:	200013d8 	.word	0x200013d8
 8003394:	20001350 	.word	0x20001350
 8003398:	e000ed04 	.word	0xe000ed04
 800339c:	200012a8 	.word	0x200012a8

080033a0 <vTaskDelay>:
	{
 80033a0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033a2:	b940      	cbnz	r0, 80033b6 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80033a4:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <vTaskDelay+0x40>)
 80033a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	f3bf 8f6f 	isb	sy
	}
 80033b4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80033b6:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <vTaskDelay+0x44>)
 80033b8:	6819      	ldr	r1, [r3, #0]
 80033ba:	b141      	cbz	r1, 80033ce <vTaskDelay+0x2e>
 80033bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	e7fe      	b.n	80033cc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80033ce:	f7ff fec9 	bl	8003164 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80033d2:	f7ff fcc9 	bl	8002d68 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80033d6:	f7ff ff6d 	bl	80032b4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80033da:	2800      	cmp	r0, #0
 80033dc:	d0e2      	beq.n	80033a4 <vTaskDelay+0x4>
 80033de:	e7e9      	b.n	80033b4 <vTaskDelay+0x14>
 80033e0:	e000ed04 	.word	0xe000ed04
 80033e4:	20001354 	.word	0x20001354

080033e8 <prvIdleTask>:
{
 80033e8:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80033ea:	4e17      	ldr	r6, [pc, #92]	; (8003448 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033ec:	4c17      	ldr	r4, [pc, #92]	; (800344c <prvIdleTask+0x64>)
 80033ee:	6823      	ldr	r3, [r4, #0]
 80033f0:	b963      	cbnz	r3, 800340c <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80033f2:	4b17      	ldr	r3, [pc, #92]	; (8003450 <prvIdleTask+0x68>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d9f8      	bls.n	80033ec <prvIdleTask+0x4>
				taskYIELD();
 80033fa:	4b16      	ldr	r3, [pc, #88]	; (8003454 <prvIdleTask+0x6c>)
 80033fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	f3bf 8f6f 	isb	sy
 800340a:	e7ef      	b.n	80033ec <prvIdleTask+0x4>
			vTaskSuspendAll();
 800340c:	f7ff feaa 	bl	8003164 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003410:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8003412:	f7ff ff4f 	bl	80032b4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8003416:	2d00      	cmp	r5, #0
 8003418:	d0e9      	beq.n	80033ee <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800341a:	f7ff fb53 	bl	8002ac4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800341e:	68f3      	ldr	r3, [r6, #12]
 8003420:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003422:	1d28      	adds	r0, r5, #4
 8003424:	f7ff fae2 	bl	80029ec <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003428:	4a0b      	ldr	r2, [pc, #44]	; (8003458 <prvIdleTask+0x70>)
 800342a:	6813      	ldr	r3, [r2, #0]
 800342c:	3b01      	subs	r3, #1
 800342e:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	3b01      	subs	r3, #1
 8003434:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8003436:	f7ff fb67 	bl	8002b08 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800343a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800343c:	f7fe ff80 	bl	8002340 <vPortFree>
			vPortFree( pxTCB );
 8003440:	4628      	mov	r0, r5
 8003442:	f7fe ff7d 	bl	8002340 <vPortFree>
 8003446:	e7d2      	b.n	80033ee <prvIdleTask+0x6>
 8003448:	200013c0 	.word	0x200013c0
 800344c:	2000134c 	.word	0x2000134c
 8003450:	200012a8 	.word	0x200012a8
 8003454:	e000ed04 	.word	0xe000ed04
 8003458:	20001348 	.word	0x20001348

0800345c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800345c:	4b17      	ldr	r3, [pc, #92]	; (80034bc <vTaskSwitchContext+0x60>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4b17      	ldr	r3, [pc, #92]	; (80034c0 <vTaskSwitchContext+0x64>)
{
 8003462:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003464:	b112      	cbz	r2, 800346c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003466:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003468:	601a      	str	r2, [r3, #0]
}
 800346a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800346c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800346e:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <vTaskSwitchContext+0x68>)
 8003470:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f1c3 031f 	rsb	r3, r3, #31
 800347c:	2214      	movs	r2, #20
 800347e:	4912      	ldr	r1, [pc, #72]	; (80034c8 <vTaskSwitchContext+0x6c>)
 8003480:	435a      	muls	r2, r3
 8003482:	1888      	adds	r0, r1, r2
 8003484:	588c      	ldr	r4, [r1, r2]
 8003486:	b944      	cbnz	r4, 800349a <vTaskSwitchContext+0x3e>
	__asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	e7fe      	b.n	8003498 <vTaskSwitchContext+0x3c>
 800349a:	6844      	ldr	r4, [r0, #4]
 800349c:	3208      	adds	r2, #8
 800349e:	6864      	ldr	r4, [r4, #4]
 80034a0:	6044      	str	r4, [r0, #4]
 80034a2:	440a      	add	r2, r1
 80034a4:	4294      	cmp	r4, r2
 80034a6:	bf04      	itt	eq
 80034a8:	6862      	ldreq	r2, [r4, #4]
 80034aa:	6042      	streq	r2, [r0, #4]
 80034ac:	2214      	movs	r2, #20
 80034ae:	fb02 1303 	mla	r3, r2, r3, r1
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	4b05      	ldr	r3, [pc, #20]	; (80034cc <vTaskSwitchContext+0x70>)
 80034b8:	e7d6      	b.n	8003468 <vTaskSwitchContext+0xc>
 80034ba:	bf00      	nop
 80034bc:	20001354 	.word	0x20001354
 80034c0:	200013d8 	.word	0x200013d8
 80034c4:	2000135c 	.word	0x2000135c
 80034c8:	200012a8 	.word	0x200012a8
 80034cc:	2000129c 	.word	0x2000129c

080034d0 <vTaskSuspend>:
	{
 80034d0:	b570      	push	{r4, r5, r6, lr}
 80034d2:	4604      	mov	r4, r0
 80034d4:	4e28      	ldr	r6, [pc, #160]	; (8003578 <vTaskSuspend+0xa8>)
		taskENTER_CRITICAL();
 80034d6:	f7ff faf5 	bl	8002ac4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80034da:	b904      	cbnz	r4, 80034de <vTaskSuspend+0xe>
 80034dc:	6834      	ldr	r4, [r6, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034de:	1d25      	adds	r5, r4, #4
 80034e0:	4628      	mov	r0, r5
 80034e2:	f7ff fa83 	bl	80029ec <uxListRemove>
 80034e6:	b960      	cbnz	r0, 8003502 <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80034e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80034ea:	4b24      	ldr	r3, [pc, #144]	; (800357c <vTaskSuspend+0xac>)
 80034ec:	2114      	movs	r1, #20
 80034ee:	4341      	muls	r1, r0
 80034f0:	585b      	ldr	r3, [r3, r1]
 80034f2:	b933      	cbnz	r3, 8003502 <vTaskSuspend+0x32>
 80034f4:	4922      	ldr	r1, [pc, #136]	; (8003580 <vTaskSuspend+0xb0>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	680b      	ldr	r3, [r1, #0]
 80034fa:	4082      	lsls	r2, r0
 80034fc:	ea23 0302 	bic.w	r3, r3, r2
 8003500:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003502:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003504:	b11b      	cbz	r3, 800350e <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003506:	f104 0018 	add.w	r0, r4, #24
 800350a:	f7ff fa6f 	bl	80029ec <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800350e:	4629      	mov	r1, r5
		if( xSchedulerRunning != pdFALSE )
 8003510:	4d1c      	ldr	r5, [pc, #112]	; (8003584 <vTaskSuspend+0xb4>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003512:	481d      	ldr	r0, [pc, #116]	; (8003588 <vTaskSuspend+0xb8>)
 8003514:	f7ff fa47 	bl	80029a6 <vListInsertEnd>
		taskEXIT_CRITICAL();
 8003518:	f7ff faf6 	bl	8002b08 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800351c:	682a      	ldr	r2, [r5, #0]
 800351e:	b12a      	cbz	r2, 800352c <vTaskSuspend+0x5c>
			taskENTER_CRITICAL();
 8003520:	f7ff fad0 	bl	8002ac4 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 8003524:	f7ff fc0e 	bl	8002d44 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 8003528:	f7ff faee 	bl	8002b08 <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
 800352c:	6833      	ldr	r3, [r6, #0]
 800352e:	42a3      	cmp	r3, r4
 8003530:	d115      	bne.n	800355e <vTaskSuspend+0x8e>
			if( xSchedulerRunning != pdFALSE )
 8003532:	682b      	ldr	r3, [r5, #0]
 8003534:	b1a3      	cbz	r3, 8003560 <vTaskSuspend+0x90>
				configASSERT( uxSchedulerSuspended == 0 );
 8003536:	4b15      	ldr	r3, [pc, #84]	; (800358c <vTaskSuspend+0xbc>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	b143      	cbz	r3, 800354e <vTaskSuspend+0x7e>
 800353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	e7fe      	b.n	800354c <vTaskSuspend+0x7c>
				portYIELD_WITHIN_API();
 800354e:	4b10      	ldr	r3, [pc, #64]	; (8003590 <vTaskSuspend+0xc0>)
 8003550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	f3bf 8f6f 	isb	sy
	}
 800355e:	bd70      	pop	{r4, r5, r6, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8003560:	4a0c      	ldr	r2, [pc, #48]	; (8003594 <vTaskSuspend+0xc4>)
 8003562:	4909      	ldr	r1, [pc, #36]	; (8003588 <vTaskSuspend+0xb8>)
 8003564:	6812      	ldr	r2, [r2, #0]
 8003566:	6809      	ldr	r1, [r1, #0]
 8003568:	4291      	cmp	r1, r2
 800356a:	d101      	bne.n	8003570 <vTaskSuspend+0xa0>
					pxCurrentTCB = NULL;
 800356c:	6033      	str	r3, [r6, #0]
 800356e:	e7f6      	b.n	800355e <vTaskSuspend+0x8e>
	}
 8003570:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 8003574:	f7ff bf72 	b.w	800345c <vTaskSwitchContext>
 8003578:	2000129c 	.word	0x2000129c
 800357c:	200012a8 	.word	0x200012a8
 8003580:	2000135c 	.word	0x2000135c
 8003584:	200013a8 	.word	0x200013a8
 8003588:	200013ac 	.word	0x200013ac
 800358c:	20001354 	.word	0x20001354
 8003590:	e000ed04 	.word	0xe000ed04
 8003594:	20001348 	.word	0x20001348

08003598 <vTaskPlaceOnEventList>:
{
 8003598:	b510      	push	{r4, lr}
 800359a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800359c:	b940      	cbnz	r0, 80035b0 <vTaskPlaceOnEventList+0x18>
 800359e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	e7fe      	b.n	80035ae <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <vTaskPlaceOnEventList+0x30>)
 80035b2:	6819      	ldr	r1, [r3, #0]
 80035b4:	3118      	adds	r1, #24
 80035b6:	f7ff fa02 	bl	80029be <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035ba:	4620      	mov	r0, r4
 80035bc:	2101      	movs	r1, #1
}
 80035be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035c2:	f7ff bbd1 	b.w	8002d68 <prvAddCurrentTaskToDelayedList>
 80035c6:	bf00      	nop
 80035c8:	2000129c 	.word	0x2000129c

080035cc <vTaskPlaceOnEventListRestricted>:
	{
 80035cc:	b538      	push	{r3, r4, r5, lr}
 80035ce:	460d      	mov	r5, r1
 80035d0:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80035d2:	b940      	cbnz	r0, 80035e6 <vTaskPlaceOnEventListRestricted+0x1a>
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	e7fe      	b.n	80035e4 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035e6:	4b07      	ldr	r3, [pc, #28]	; (8003604 <vTaskPlaceOnEventListRestricted+0x38>)
 80035e8:	6819      	ldr	r1, [r3, #0]
 80035ea:	3118      	adds	r1, #24
 80035ec:	f7ff f9db 	bl	80029a6 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80035f0:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035f2:	4621      	mov	r1, r4
 80035f4:	bf0c      	ite	eq
 80035f6:	4628      	moveq	r0, r5
 80035f8:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80035fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003600:	f7ff bbb2 	b.w	8002d68 <prvAddCurrentTaskToDelayedList>
 8003604:	2000129c 	.word	0x2000129c

08003608 <xTaskRemoveFromEventList>:
{
 8003608:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800360a:	68c3      	ldr	r3, [r0, #12]
 800360c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800360e:	b944      	cbnz	r4, 8003622 <xTaskRemoveFromEventList+0x1a>
 8003610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	e7fe      	b.n	8003620 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003622:	f104 0518 	add.w	r5, r4, #24
 8003626:	4628      	mov	r0, r5
 8003628:	f7ff f9e0 	bl	80029ec <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800362c:	4b11      	ldr	r3, [pc, #68]	; (8003674 <xTaskRemoveFromEventList+0x6c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	b9e3      	cbnz	r3, 800366c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003632:	1d25      	adds	r5, r4, #4
 8003634:	4628      	mov	r0, r5
 8003636:	f7ff f9d9 	bl	80029ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800363a:	490f      	ldr	r1, [pc, #60]	; (8003678 <xTaskRemoveFromEventList+0x70>)
 800363c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800363e:	6808      	ldr	r0, [r1, #0]
 8003640:	2301      	movs	r3, #1
 8003642:	4093      	lsls	r3, r2
 8003644:	4303      	orrs	r3, r0
 8003646:	600b      	str	r3, [r1, #0]
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <xTaskRemoveFromEventList+0x74>)
 800364a:	2014      	movs	r0, #20
 800364c:	4629      	mov	r1, r5
 800364e:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003652:	f7ff f9a8 	bl	80029a6 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003656:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <xTaskRemoveFromEventList+0x78>)
 8003658:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003660:	bf83      	ittte	hi
 8003662:	4b08      	ldrhi	r3, [pc, #32]	; (8003684 <xTaskRemoveFromEventList+0x7c>)
 8003664:	2001      	movhi	r0, #1
 8003666:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8003668:	2000      	movls	r0, #0
}
 800366a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800366c:	4629      	mov	r1, r5
 800366e:	4806      	ldr	r0, [pc, #24]	; (8003688 <xTaskRemoveFromEventList+0x80>)
 8003670:	e7ef      	b.n	8003652 <xTaskRemoveFromEventList+0x4a>
 8003672:	bf00      	nop
 8003674:	20001354 	.word	0x20001354
 8003678:	2000135c 	.word	0x2000135c
 800367c:	200012a8 	.word	0x200012a8
 8003680:	2000129c 	.word	0x2000129c
 8003684:	200013d8 	.word	0x200013d8
 8003688:	20001394 	.word	0x20001394

0800368c <vTaskSetTimeOutState>:
{
 800368c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 800368e:	b908      	cbnz	r0, 8003694 <vTaskSetTimeOutState+0x8>
 8003690:	f7ff fb4e 	bl	8002d30 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003694:	4b03      	ldr	r3, [pc, #12]	; (80036a4 <vTaskSetTimeOutState+0x18>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800369a:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <vTaskSetTimeOutState+0x1c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6043      	str	r3, [r0, #4]
}
 80036a0:	bd08      	pop	{r3, pc}
 80036a2:	bf00      	nop
 80036a4:	20001390 	.word	0x20001390
 80036a8:	200013d4 	.word	0x200013d4

080036ac <xTaskCheckForTimeOut>:
{
 80036ac:	b570      	push	{r4, r5, r6, lr}
 80036ae:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 80036b0:	4604      	mov	r4, r0
 80036b2:	b940      	cbnz	r0, 80036c6 <xTaskCheckForTimeOut+0x1a>
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	e7fe      	b.n	80036c4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80036c6:	b941      	cbnz	r1, 80036da <xTaskCheckForTimeOut+0x2e>
 80036c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036cc:	f383 8811 	msr	BASEPRI, r3
 80036d0:	f3bf 8f6f 	isb	sy
 80036d4:	f3bf 8f4f 	dsb	sy
 80036d8:	e7fe      	b.n	80036d8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80036da:	f7ff f9f3 	bl	8002ac4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80036de:	4b0e      	ldr	r3, [pc, #56]	; (8003718 <xTaskCheckForTimeOut+0x6c>)
 80036e0:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80036e2:	682b      	ldr	r3, [r5, #0]
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	d010      	beq.n	800370a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036e8:	4a0c      	ldr	r2, [pc, #48]	; (800371c <xTaskCheckForTimeOut+0x70>)
 80036ea:	6810      	ldr	r0, [r2, #0]
 80036ec:	e9d4 6200 	ldrd	r6, r2, [r4]
 80036f0:	4286      	cmp	r6, r0
 80036f2:	d001      	beq.n	80036f8 <xTaskCheckForTimeOut+0x4c>
 80036f4:	4291      	cmp	r1, r2
 80036f6:	d20d      	bcs.n	8003714 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036f8:	1a88      	subs	r0, r1, r2
 80036fa:	4283      	cmp	r3, r0
 80036fc:	d90a      	bls.n	8003714 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80036fe:	1a5b      	subs	r3, r3, r1
 8003700:	4413      	add	r3, r2
 8003702:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003704:	4620      	mov	r0, r4
 8003706:	f7ff ffc1 	bl	800368c <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 800370a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800370c:	f7ff f9fc 	bl	8002b08 <vPortExitCritical>
}
 8003710:	4620      	mov	r0, r4
 8003712:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 8003714:	2401      	movs	r4, #1
 8003716:	e7f9      	b.n	800370c <xTaskCheckForTimeOut+0x60>
 8003718:	200013d4 	.word	0x200013d4
 800371c:	20001390 	.word	0x20001390

08003720 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003720:	4b01      	ldr	r3, [pc, #4]	; (8003728 <vTaskMissedYield+0x8>)
 8003722:	2201      	movs	r2, #1
 8003724:	601a      	str	r2, [r3, #0]
}
 8003726:	4770      	bx	lr
 8003728:	200013d8 	.word	0x200013d8

0800372c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <xTaskGetSchedulerState+0x18>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	b133      	cbz	r3, 8003740 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003732:	4b05      	ldr	r3, [pc, #20]	; (8003748 <xTaskGetSchedulerState+0x1c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8003738:	bf0c      	ite	eq
 800373a:	2002      	moveq	r0, #2
 800373c:	2000      	movne	r0, #0
 800373e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003740:	2001      	movs	r0, #1
	}
 8003742:	4770      	bx	lr
 8003744:	200013a8 	.word	0x200013a8
 8003748:	20001354 	.word	0x20001354

0800374c <vTaskPriorityInherit>:
	{
 800374c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8003750:	4604      	mov	r4, r0
 8003752:	2800      	cmp	r0, #0
 8003754:	d02e      	beq.n	80037b4 <vTaskPriorityInherit+0x68>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003756:	4d1e      	ldr	r5, [pc, #120]	; (80037d0 <vTaskPriorityInherit+0x84>)
 8003758:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800375a:	682a      	ldr	r2, [r5, #0]
 800375c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800375e:	4293      	cmp	r3, r2
 8003760:	d228      	bcs.n	80037b4 <vTaskPriorityInherit+0x68>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003762:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003764:	4e1b      	ldr	r6, [pc, #108]	; (80037d4 <vTaskPriorityInherit+0x88>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003766:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003768:	bfa1      	itttt	ge
 800376a:	682a      	ldrge	r2, [r5, #0]
 800376c:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 800376e:	f1c2 0208 	rsbge	r2, r2, #8
 8003772:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003774:	2714      	movs	r7, #20
 8003776:	6942      	ldr	r2, [r0, #20]
 8003778:	fb07 6303 	mla	r3, r7, r3, r6
 800377c:	429a      	cmp	r2, r3
 800377e:	d116      	bne.n	80037ae <vTaskPriorityInherit+0x62>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003780:	f100 0804 	add.w	r8, r0, #4
 8003784:	4640      	mov	r0, r8
 8003786:	f7ff f931 	bl	80029ec <uxListRemove>
 800378a:	4a13      	ldr	r2, [pc, #76]	; (80037d8 <vTaskPriorityInherit+0x8c>)
 800378c:	b1a0      	cbz	r0, 80037b8 <vTaskPriorityInherit+0x6c>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800378e:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8003790:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003792:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003794:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8003796:	2301      	movs	r3, #1
 8003798:	4083      	lsls	r3, r0
 800379a:	430b      	orrs	r3, r1
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	2314      	movs	r3, #20
 80037a0:	4641      	mov	r1, r8
 80037a2:	fb03 6000 	mla	r0, r3, r0, r6
	}
 80037a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 80037aa:	f7ff b8fc 	b.w	80029a6 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80037ae:	682b      	ldr	r3, [r5, #0]
 80037b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b2:	62c3      	str	r3, [r0, #44]	; 0x2c
	}
 80037b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80037b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80037ba:	4347      	muls	r7, r0
 80037bc:	59f3      	ldr	r3, [r6, r7]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1e5      	bne.n	800378e <vTaskPriorityInherit+0x42>
 80037c2:	6813      	ldr	r3, [r2, #0]
 80037c4:	2101      	movs	r1, #1
 80037c6:	4081      	lsls	r1, r0
 80037c8:	ea23 0301 	bic.w	r3, r3, r1
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e7de      	b.n	800378e <vTaskPriorityInherit+0x42>
 80037d0:	2000129c 	.word	0x2000129c
 80037d4:	200012a8 	.word	0x200012a8
 80037d8:	2000135c 	.word	0x2000135c

080037dc <xTaskPriorityDisinherit>:
	{
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80037de:	4604      	mov	r4, r0
 80037e0:	b908      	cbnz	r0, 80037e6 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80037e2:	2000      	movs	r0, #0
	}
 80037e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80037e6:	4b22      	ldr	r3, [pc, #136]	; (8003870 <xTaskPriorityDisinherit+0x94>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4283      	cmp	r3, r0
 80037ec:	d008      	beq.n	8003800 <xTaskPriorityDisinherit+0x24>
 80037ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	e7fe      	b.n	80037fe <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003802:	b943      	cbnz	r3, 8003816 <xTaskPriorityDisinherit+0x3a>
 8003804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	e7fe      	b.n	8003814 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003816:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003818:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800381a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800381c:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800381e:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003820:	d0df      	beq.n	80037e2 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1dd      	bne.n	80037e2 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003826:	1d05      	adds	r5, r0, #4
 8003828:	4628      	mov	r0, r5
 800382a:	f7ff f8df 	bl	80029ec <uxListRemove>
 800382e:	4e11      	ldr	r6, [pc, #68]	; (8003874 <xTaskPriorityDisinherit+0x98>)
 8003830:	4a11      	ldr	r2, [pc, #68]	; (8003878 <xTaskPriorityDisinherit+0x9c>)
 8003832:	b950      	cbnz	r0, 800384a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003834:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003836:	2114      	movs	r1, #20
 8003838:	4379      	muls	r1, r7
 800383a:	5873      	ldr	r3, [r6, r1]
 800383c:	b92b      	cbnz	r3, 800384a <xTaskPriorityDisinherit+0x6e>
 800383e:	6813      	ldr	r3, [r2, #0]
 8003840:	2001      	movs	r0, #1
 8003842:	40b8      	lsls	r0, r7
 8003844:	ea23 0300 	bic.w	r3, r3, r0
 8003848:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800384a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800384c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800384e:	f1c3 0108 	rsb	r1, r3, #8
 8003852:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003854:	6811      	ldr	r1, [r2, #0]
 8003856:	2401      	movs	r4, #1
 8003858:	fa04 f003 	lsl.w	r0, r4, r3
 800385c:	4308      	orrs	r0, r1
 800385e:	6010      	str	r0, [r2, #0]
 8003860:	2014      	movs	r0, #20
 8003862:	fb00 6003 	mla	r0, r0, r3, r6
 8003866:	4629      	mov	r1, r5
 8003868:	f7ff f89d 	bl	80029a6 <vListInsertEnd>
					xReturn = pdTRUE;
 800386c:	4620      	mov	r0, r4
		return xReturn;
 800386e:	e7b9      	b.n	80037e4 <xTaskPriorityDisinherit+0x8>
 8003870:	2000129c 	.word	0x2000129c
 8003874:	200012a8 	.word	0x200012a8
 8003878:	2000135c 	.word	0x2000135c

0800387c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800387c:	4b04      	ldr	r3, [pc, #16]	; (8003890 <pvTaskIncrementMutexHeldCount+0x14>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	b11a      	cbz	r2, 800388a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003882:	6819      	ldr	r1, [r3, #0]
 8003884:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8003886:	3201      	adds	r2, #1
 8003888:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800388a:	6818      	ldr	r0, [r3, #0]
	}
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	2000129c 	.word	0x2000129c

08003894 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8003896:	4c0f      	ldr	r4, [pc, #60]	; (80038d4 <prvCheckForValidListAndQueue+0x40>)
	taskENTER_CRITICAL();
 8003898:	f7ff f914 	bl	8002ac4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800389c:	6825      	ldr	r5, [r4, #0]
 800389e:	b9ad      	cbnz	r5, 80038cc <prvCheckForValidListAndQueue+0x38>
		{
			vListInitialise( &xActiveTimerList1 );
 80038a0:	4f0d      	ldr	r7, [pc, #52]	; (80038d8 <prvCheckForValidListAndQueue+0x44>)
			vListInitialise( &xActiveTimerList2 );
 80038a2:	4e0e      	ldr	r6, [pc, #56]	; (80038dc <prvCheckForValidListAndQueue+0x48>)
			vListInitialise( &xActiveTimerList1 );
 80038a4:	4638      	mov	r0, r7
 80038a6:	f7ff f870 	bl	800298a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80038aa:	4630      	mov	r0, r6
 80038ac:	f7ff f86d 	bl	800298a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <prvCheckForValidListAndQueue+0x4c>)
 80038b2:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <prvCheckForValidListAndQueue+0x50>)

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80038b6:	462a      	mov	r2, r5
 80038b8:	210c      	movs	r1, #12
 80038ba:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80038bc:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80038be:	f7fe fe37 	bl	8002530 <xQueueGenericCreate>
 80038c2:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80038c4:	b110      	cbz	r0, 80038cc <prvCheckForValidListAndQueue+0x38>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80038c6:	4908      	ldr	r1, [pc, #32]	; (80038e8 <prvCheckForValidListAndQueue+0x54>)
 80038c8:	f7ff f82a 	bl	8002920 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80038cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80038d0:	f7ff b91a 	b.w	8002b08 <vPortExitCritical>
 80038d4:	20001410 	.word	0x20001410
 80038d8:	200013e4 	.word	0x200013e4
 80038dc:	200013f8 	.word	0x200013f8
 80038e0:	200013dc 	.word	0x200013dc
 80038e4:	200013e0 	.word	0x200013e0
 80038e8:	080082ca 	.word	0x080082ca

080038ec <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 80038ec:	4291      	cmp	r1, r2
{
 80038ee:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80038f0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038f2:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 80038f4:	d80a      	bhi.n	800390c <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038f6:	1ad2      	subs	r2, r2, r3
 80038f8:	6983      	ldr	r3, [r0, #24]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d20d      	bcs.n	800391a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80038fe:	4b08      	ldr	r3, [pc, #32]	; (8003920 <prvInsertTimerInActiveList+0x34>)
 8003900:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	f7ff f85b 	bl	80029be <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8003908:	2000      	movs	r0, #0
}
 800390a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800390c:	429a      	cmp	r2, r3
 800390e:	d201      	bcs.n	8003914 <prvInsertTimerInActiveList+0x28>
 8003910:	4299      	cmp	r1, r3
 8003912:	d202      	bcs.n	800391a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003914:	1d01      	adds	r1, r0, #4
 8003916:	4b03      	ldr	r3, [pc, #12]	; (8003924 <prvInsertTimerInActiveList+0x38>)
 8003918:	e7f3      	b.n	8003902 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800391a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800391c:	e7f5      	b.n	800390a <prvInsertTimerInActiveList+0x1e>
 800391e:	bf00      	nop
 8003920:	200013e0 	.word	0x200013e0
 8003924:	200013dc 	.word	0x200013dc

08003928 <xTimerCreateTimerTask>:
{
 8003928:	b507      	push	{r0, r1, r2, lr}
	prvCheckForValidListAndQueue();
 800392a:	f7ff ffb3 	bl	8003894 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800392e:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <xTimerCreateTimerTask+0x3c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	b15b      	cbz	r3, 800394c <xTimerCreateTimerTask+0x24>
			xReturn = xTaskCreate(	prvTimerTask,
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <xTimerCreateTimerTask+0x40>)
 8003936:	9301      	str	r3, [sp, #4]
 8003938:	2302      	movs	r3, #2
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003940:	2300      	movs	r3, #0
 8003942:	490a      	ldr	r1, [pc, #40]	; (800396c <xTimerCreateTimerTask+0x44>)
 8003944:	480a      	ldr	r0, [pc, #40]	; (8003970 <xTimerCreateTimerTask+0x48>)
 8003946:	f7ff fa55 	bl	8002df4 <xTaskCreate>
	configASSERT( xReturn );
 800394a:	b940      	cbnz	r0, 800395e <xTimerCreateTimerTask+0x36>
 800394c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003950:	f383 8811 	msr	BASEPRI, r3
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	e7fe      	b.n	800395c <xTimerCreateTimerTask+0x34>
}
 800395e:	b003      	add	sp, #12
 8003960:	f85d fb04 	ldr.w	pc, [sp], #4
 8003964:	20001410 	.word	0x20001410
 8003968:	20001414 	.word	0x20001414
 800396c:	080082cf 	.word	0x080082cf
 8003970:	08003a49 	.word	0x08003a49

08003974 <xTimerGenericCommand>:
{
 8003974:	b530      	push	{r4, r5, lr}
 8003976:	4615      	mov	r5, r2
 8003978:	b085      	sub	sp, #20
 800397a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800397c:	4603      	mov	r3, r0
 800397e:	b940      	cbnz	r0, 8003992 <xTimerGenericCommand+0x1e>
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	e7fe      	b.n	8003990 <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 8003992:	4c0d      	ldr	r4, [pc, #52]	; (80039c8 <xTimerGenericCommand+0x54>)
 8003994:	6820      	ldr	r0, [r4, #0]
 8003996:	b180      	cbz	r0, 80039ba <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003998:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800399a:	e9cd 1501 	strd	r1, r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800399e:	9303      	str	r3, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80039a0:	dc0d      	bgt.n	80039be <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80039a2:	f7ff fec3 	bl	800372c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80039a6:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80039a8:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80039aa:	bf08      	it	eq
 80039ac:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80039ae:	6820      	ldr	r0, [r4, #0]
 80039b0:	bf18      	it	ne
 80039b2:	461a      	movne	r2, r3
 80039b4:	a901      	add	r1, sp, #4
 80039b6:	f7fe fddf 	bl	8002578 <xQueueGenericSend>
}
 80039ba:	b005      	add	sp, #20
 80039bc:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80039be:	2300      	movs	r3, #0
 80039c0:	a901      	add	r1, sp, #4
 80039c2:	f7fe fe8b 	bl	80026dc <xQueueGenericSendFromISR>
 80039c6:	e7f8      	b.n	80039ba <xTimerGenericCommand+0x46>
 80039c8:	20001410 	.word	0x20001410

080039cc <prvSwitchTimerLists>:
{
 80039cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039d0:	4d1b      	ldr	r5, [pc, #108]	; (8003a40 <prvSwitchTimerLists+0x74>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80039d2:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039d6:	682b      	ldr	r3, [r5, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	b932      	cbnz	r2, 80039ea <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 80039dc:	4a19      	ldr	r2, [pc, #100]	; (8003a44 <prvSwitchTimerLists+0x78>)
 80039de:	6811      	ldr	r1, [r2, #0]
 80039e0:	6029      	str	r1, [r5, #0]
	pxOverflowTimerList = pxTemp;
 80039e2:	6013      	str	r3, [r2, #0]
}
 80039e4:	b002      	add	sp, #8
 80039e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039ea:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039ec:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039ee:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80039f0:	1d27      	adds	r7, r4, #4
 80039f2:	4638      	mov	r0, r7
 80039f4:	f7fe fffa 	bl	80029ec <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039fa:	4620      	mov	r0, r4
 80039fc:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80039fe:	69e3      	ldr	r3, [r4, #28]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d1e8      	bne.n	80039d6 <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003a04:	69a3      	ldr	r3, [r4, #24]
 8003a06:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8003a08:	429e      	cmp	r6, r3
 8003a0a:	d206      	bcs.n	8003a1a <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003a0c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a0e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a10:	4639      	mov	r1, r7
 8003a12:	6828      	ldr	r0, [r5, #0]
 8003a14:	f7fe ffd3 	bl	80029be <vListInsert>
 8003a18:	e7dd      	b.n	80039d6 <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f8cd 8000 	str.w	r8, [sp]
 8003a20:	4632      	mov	r2, r6
 8003a22:	4619      	mov	r1, r3
 8003a24:	4620      	mov	r0, r4
 8003a26:	f7ff ffa5 	bl	8003974 <xTimerGenericCommand>
				configASSERT( xResult );
 8003a2a:	2800      	cmp	r0, #0
 8003a2c:	d1d3      	bne.n	80039d6 <prvSwitchTimerLists+0xa>
 8003a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a32:	f383 8811 	msr	BASEPRI, r3
 8003a36:	f3bf 8f6f 	isb	sy
 8003a3a:	f3bf 8f4f 	dsb	sy
 8003a3e:	e7fe      	b.n	8003a3e <prvSwitchTimerLists+0x72>
 8003a40:	200013dc 	.word	0x200013dc
 8003a44:	200013e0 	.word	0x200013e0

08003a48 <prvTimerTask>:
{
 8003a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a4c:	4d68      	ldr	r5, [pc, #416]	; (8003bf0 <prvTimerTask+0x1a8>)
					portYIELD_WITHIN_API();
 8003a4e:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003c00 <prvTimerTask+0x1b8>
{
 8003a52:	b087      	sub	sp, #28
 8003a54:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a56:	682b      	ldr	r3, [r5, #0]
 8003a58:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8003a5c:	f1bb 0f00 	cmp.w	fp, #0
 8003a60:	d041      	beq.n	8003ae6 <prvTimerTask+0x9e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f8d3 a000 	ldr.w	sl, [r3]
	if( xTimeNow < xLastTime )
 8003a68:	4c62      	ldr	r4, [pc, #392]	; (8003bf4 <prvTimerTask+0x1ac>)
	vTaskSuspendAll();
 8003a6a:	f7ff fb7b 	bl	8003164 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8003a6e:	f7ff fb81 	bl	8003174 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8003a76:	4681      	mov	r9, r0
 8003a78:	4626      	mov	r6, r4
	if( xTimeNow < xLastTime )
 8003a7a:	d236      	bcs.n	8003aea <prvTimerTask+0xa2>
		prvSwitchTimerLists();
 8003a7c:	f7ff ffa6 	bl	80039cc <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8003a80:	f8c4 9000 	str.w	r9, [r4]
			( void ) xTaskResumeAll();
 8003a84:	f7ff fc16 	bl	80032b4 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a88:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8003bfc <prvTimerTask+0x1b4>
 8003a8c:	f8d9 0000 	ldr.w	r0, [r9]
 8003a90:	2300      	movs	r3, #0
 8003a92:	461a      	mov	r2, r3
 8003a94:	a903      	add	r1, sp, #12
 8003a96:	f7fe fe83 	bl	80027a0 <xQueueGenericReceive>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d0db      	beq.n	8003a56 <prvTimerTask+0xe>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003a9e:	9b03      	ldr	r3, [sp, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	dbf3      	blt.n	8003a8c <prvTimerTask+0x44>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003aa4:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8003aa6:	6963      	ldr	r3, [r4, #20]
 8003aa8:	b113      	cbz	r3, 8003ab0 <prvTimerTask+0x68>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003aaa:	1d20      	adds	r0, r4, #4
 8003aac:	f7fe ff9e 	bl	80029ec <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8003ab0:	f7ff fb60 	bl	8003174 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003ab4:	6833      	ldr	r3, [r6, #0]
 8003ab6:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8003ab8:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8003aba:	d201      	bcs.n	8003ac0 <prvTimerTask+0x78>
		prvSwitchTimerLists();
 8003abc:	f7ff ff86 	bl	80039cc <prvSwitchTimerLists>
 8003ac0:	9a03      	ldr	r2, [sp, #12]
	xLastTime = xTimeNow;
 8003ac2:	f8c6 b000 	str.w	fp, [r6]
 8003ac6:	2a09      	cmp	r2, #9
 8003ac8:	d8e0      	bhi.n	8003a8c <prvTimerTask+0x44>
 8003aca:	2301      	movs	r3, #1
 8003acc:	4093      	lsls	r3, r2
 8003ace:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 8003ad2:	d17a      	bne.n	8003bca <prvTimerTask+0x182>
 8003ad4:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 8003ad8:	d150      	bne.n	8003b7c <prvTimerTask+0x134>
 8003ada:	069b      	lsls	r3, r3, #26
 8003adc:	d5d6      	bpl.n	8003a8c <prvTimerTask+0x44>
						vPortFree( pxTimer );
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f7fe fc2e 	bl	8002340 <vPortFree>
 8003ae4:	e7d2      	b.n	8003a8c <prvTimerTask+0x44>
		xNextExpireTime = ( TickType_t ) 0U;
 8003ae6:	46da      	mov	sl, fp
 8003ae8:	e7be      	b.n	8003a68 <prvTimerTask+0x20>
	xLastTime = xTimeNow;
 8003aea:	6020      	str	r0, [r4, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003aec:	f1bb 0f00 	cmp.w	fp, #0
 8003af0:	d029      	beq.n	8003b46 <prvTimerTask+0xfe>
 8003af2:	4582      	cmp	sl, r0
 8003af4:	d840      	bhi.n	8003b78 <prvTimerTask+0x130>
				( void ) xTaskResumeAll();
 8003af6:	f7ff fbdd 	bl	80032b4 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b00:	1d20      	adds	r0, r4, #4
 8003b02:	f7fe ff73 	bl	80029ec <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003b06:	69e3      	ldr	r3, [r4, #28]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d118      	bne.n	8003b3e <prvTimerTask+0xf6>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b0c:	69a1      	ldr	r1, [r4, #24]
 8003b0e:	4653      	mov	r3, sl
 8003b10:	464a      	mov	r2, r9
 8003b12:	4451      	add	r1, sl
 8003b14:	4620      	mov	r0, r4
 8003b16:	f7ff fee9 	bl	80038ec <prvInsertTimerInActiveList>
 8003b1a:	b180      	cbz	r0, 8003b3e <prvTimerTask+0xf6>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	4652      	mov	r2, sl
 8003b22:	4619      	mov	r1, r3
 8003b24:	4620      	mov	r0, r4
 8003b26:	f7ff ff25 	bl	8003974 <xTimerGenericCommand>
			configASSERT( xResult );
 8003b2a:	b940      	cbnz	r0, 8003b3e <prvTimerTask+0xf6>
 8003b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	e7fe      	b.n	8003b3c <prvTimerTask+0xf4>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b40:	4620      	mov	r0, r4
 8003b42:	4798      	blx	r3
 8003b44:	e7a0      	b.n	8003a88 <prvTimerTask+0x40>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b46:	4b2c      	ldr	r3, [pc, #176]	; (8003bf8 <prvTimerTask+0x1b0>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	fab2 f282 	clz	r2, r2
 8003b50:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b52:	4b2a      	ldr	r3, [pc, #168]	; (8003bfc <prvTimerTask+0x1b4>)
 8003b54:	ebaa 0109 	sub.w	r1, sl, r9
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	f7fe fef3 	bl	8002944 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003b5e:	f7ff fba9 	bl	80032b4 <xTaskResumeAll>
 8003b62:	2800      	cmp	r0, #0
 8003b64:	d190      	bne.n	8003a88 <prvTimerTask+0x40>
					portYIELD_WITHIN_API();
 8003b66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003b6a:	f8c8 3000 	str.w	r3, [r8]
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	f3bf 8f6f 	isb	sy
 8003b76:	e787      	b.n	8003a88 <prvTimerTask+0x40>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b78:	2200      	movs	r2, #0
 8003b7a:	e7ea      	b.n	8003b52 <prvTimerTask+0x10a>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b7c:	69a1      	ldr	r1, [r4, #24]
 8003b7e:	9b04      	ldr	r3, [sp, #16]
 8003b80:	465a      	mov	r2, fp
 8003b82:	4419      	add	r1, r3
 8003b84:	4620      	mov	r0, r4
 8003b86:	f7ff feb1 	bl	80038ec <prvInsertTimerInActiveList>
 8003b8a:	2800      	cmp	r0, #0
 8003b8c:	f43f af7e 	beq.w	8003a8c <prvTimerTask+0x44>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b92:	4620      	mov	r0, r4
 8003b94:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003b96:	69e3      	ldr	r3, [r4, #28]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	f47f af77 	bne.w	8003a8c <prvTimerTask+0x44>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003b9e:	69a2      	ldr	r2, [r4, #24]
 8003ba0:	9904      	ldr	r1, [sp, #16]
 8003ba2:	f8cd a000 	str.w	sl, [sp]
 8003ba6:	440a      	add	r2, r1
 8003ba8:	4653      	mov	r3, sl
 8003baa:	4651      	mov	r1, sl
 8003bac:	4620      	mov	r0, r4
 8003bae:	f7ff fee1 	bl	8003974 <xTimerGenericCommand>
							configASSERT( xResult );
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	f47f af6a 	bne.w	8003a8c <prvTimerTask+0x44>
 8003bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	e7fe      	b.n	8003bc8 <prvTimerTask+0x180>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003bca:	9904      	ldr	r1, [sp, #16]
 8003bcc:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003bce:	b941      	cbnz	r1, 8003be2 <prvTimerTask+0x19a>
 8003bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	e7fe      	b.n	8003be0 <prvTimerTask+0x198>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003be2:	465b      	mov	r3, fp
 8003be4:	465a      	mov	r2, fp
 8003be6:	4459      	add	r1, fp
 8003be8:	4620      	mov	r0, r4
 8003bea:	f7ff fe7f 	bl	80038ec <prvInsertTimerInActiveList>
 8003bee:	e74d      	b.n	8003a8c <prvTimerTask+0x44>
 8003bf0:	200013dc 	.word	0x200013dc
 8003bf4:	2000140c 	.word	0x2000140c
 8003bf8:	200013e0 	.word	0x200013e0
 8003bfc:	20001410 	.word	0x20001410
 8003c00:	e000ed04 	.word	0xe000ed04

08003c04 <_sbrk>:




caddr_t _sbrk(int incr)
{
 8003c04:	b508      	push	{r3, lr}
	extern char end __asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 8003c06:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <_sbrk+0x34>)
 8003c08:	6819      	ldr	r1, [r3, #0]
{
 8003c0a:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003c0c:	b909      	cbnz	r1, 8003c12 <_sbrk+0xe>
		heap_end = &end;
 8003c0e:	490b      	ldr	r1, [pc, #44]	; (8003c3c <_sbrk+0x38>)
 8003c10:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8003c12:	490b      	ldr	r1, [pc, #44]	; (8003c40 <_sbrk+0x3c>)
	prev_heap_end = heap_end;
 8003c14:	6818      	ldr	r0, [r3, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8003c16:	6809      	ldr	r1, [r1, #0]
 8003c18:	6809      	ldr	r1, [r1, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 8003c1a:	4402      	add	r2, r0
	min_stack_ptr -= MAX_STACK_SIZE;
 8003c1c:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
	if (heap_end + incr > min_stack_ptr)
 8003c20:	428a      	cmp	r2, r1
 8003c22:	d906      	bls.n	8003c32 <_sbrk+0x2e>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003c24:	f000 f902 	bl	8003e2c <__errno>
 8003c28:	230c      	movs	r3, #12
 8003c2a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003c2c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8003c30:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8003c32:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8003c34:	e7fc      	b.n	8003c30 <_sbrk+0x2c>
 8003c36:	bf00      	nop
 8003c38:	20001418 	.word	0x20001418
 8003c3c:	20001430 	.word	0x20001430
 8003c40:	e000ed08 	.word	0xe000ed08

08003c44 <_write>:
	_kill(status, -1);
	while (1) {}
}

int _write(int file, char *ptr, int len)
{
 8003c44:	b570      	push	{r4, r5, r6, lr}
 8003c46:	460e      	mov	r6, r1
 8003c48:	4615      	mov	r5, r2
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c4a:	460c      	mov	r4, r1
 8003c4c:	1ba3      	subs	r3, r4, r6
 8003c4e:	429d      	cmp	r5, r3
 8003c50:	dc01      	bgt.n	8003c56 <_write+0x12>
		{
		   __io_putchar( *ptr++ );
		}
	return len;
}
 8003c52:	4628      	mov	r0, r5
 8003c54:	bd70      	pop	{r4, r5, r6, pc}
		   __io_putchar( *ptr++ );
 8003c56:	f914 0b01 	ldrsb.w	r0, [r4], #1
 8003c5a:	f7fe fa11 	bl	8002080 <__io_putchar>
 8003c5e:	e7f5      	b.n	8003c4c <_write+0x8>

08003c60 <_close>:

int _close(int file)
{
	return -1;
}
 8003c60:	f04f 30ff 	mov.w	r0, #4294967295
 8003c64:	4770      	bx	lr

08003c66 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003c66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c6a:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	4770      	bx	lr

08003c70 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003c70:	2001      	movs	r0, #1
 8003c72:	4770      	bx	lr

08003c74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003c74:	2000      	movs	r0, #0
 8003c76:	4770      	bx	lr

08003c78 <_read>:

int _read(int file, char *ptr, int len)
{
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	460e      	mov	r6, r1
 8003c7c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c7e:	460c      	mov	r4, r1
 8003c80:	1ba3      	subs	r3, r4, r6
 8003c82:	429d      	cmp	r5, r3
 8003c84:	dc01      	bgt.n	8003c8a <_read+0x12>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 8003c86:	4628      	mov	r0, r5
 8003c88:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 8003c8a:	f7fe fa09 	bl	80020a0 <__io_getchar>
 8003c8e:	f804 0b01 	strb.w	r0, [r4], #1
 8003c92:	e7f5      	b.n	8003c80 <_read+0x8>

08003c94 <Uart_Thread>:

		osThreadResume(hUartThread);
	}
}

static void Uart_Thread(void const* arg) {
 8003c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	while (1) {
		count = osKernelSysTick() + 10000;

		while (count >= osKernelSysTick()) {
			puts("Test String");
 8003c96:	4e0d      	ldr	r6, [pc, #52]	; (8003ccc <Uart_Thread+0x38>)
			osDelay(500);
		}

		osThreadResume(hLedThread);
 8003c98:	4c0d      	ldr	r4, [pc, #52]	; (8003cd0 <Uart_Thread+0x3c>)
		count = osKernelSysTick() + 10000;
 8003c9a:	f242 7510 	movw	r5, #10000	; 0x2710
 8003c9e:	f7fe fa50 	bl	8002142 <osKernelSysTick>
 8003ca2:	1947      	adds	r7, r0, r5
		while (count >= osKernelSysTick()) {
 8003ca4:	f7fe fa4d 	bl	8002142 <osKernelSysTick>
 8003ca8:	42b8      	cmp	r0, r7
 8003caa:	d906      	bls.n	8003cba <Uart_Thread+0x26>
		osThreadResume(hLedThread);
 8003cac:	6820      	ldr	r0, [r4, #0]
 8003cae:	f7fe fa7f 	bl	80021b0 <osThreadResume>
		osThreadSuspend(NULL);
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	f7fe fa76 	bl	80021a4 <osThreadSuspend>
		count = osKernelSysTick() + 10000;
 8003cb8:	e7f1      	b.n	8003c9e <Uart_Thread+0xa>
			puts("Test String");
 8003cba:	4630      	mov	r0, r6
 8003cbc:	f000 ff8e 	bl	8004bdc <puts>
			osDelay(500);
 8003cc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003cc4:	f7fe fa5c 	bl	8002180 <osDelay>
 8003cc8:	e7ec      	b.n	8003ca4 <Uart_Thread+0x10>
 8003cca:	bf00      	nop
 8003ccc:	080082d7 	.word	0x080082d7
 8003cd0:	2000141c 	.word	0x2000141c

08003cd4 <LED_Thread>:
static void LED_Thread(void const* arg) {
 8003cd4:	b570      	push	{r4, r5, r6, lr}
		osThreadResume(hUartThread);
 8003cd6:	4d15      	ldr	r5, [pc, #84]	; (8003d2c <LED_Thread+0x58>)
		count = osKernelSysTick() + 5000;
 8003cd8:	f241 3488 	movw	r4, #5000	; 0x1388
 8003cdc:	f7fe fa31 	bl	8002142 <osKernelSysTick>
 8003ce0:	1906      	adds	r6, r0, r4
		while (count >= osKernelSysTick()) {
 8003ce2:	f7fe fa2e 	bl	8002142 <osKernelSysTick>
 8003ce6:	42b0      	cmp	r0, r6
			BSP_LED_Toggle(LED2);
 8003ce8:	f04f 0000 	mov.w	r0, #0
		while (count >= osKernelSysTick()) {
 8003cec:	d90f      	bls.n	8003d0e <LED_Thread+0x3a>
		BSP_LED_Off(LED2);
 8003cee:	f7fe f991 	bl	8002014 <BSP_LED_Off>
		osThreadSuspend(NULL);
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	f7fe fa56 	bl	80021a4 <osThreadSuspend>
		count = osKernelSysTick() + 5000;
 8003cf8:	f7fe fa23 	bl	8002142 <osKernelSysTick>
 8003cfc:	1906      	adds	r6, r0, r4
		while (count >= osKernelSysTick()) {
 8003cfe:	f7fe fa20 	bl	8002142 <osKernelSysTick>
 8003d02:	42b0      	cmp	r0, r6
 8003d04:	d90a      	bls.n	8003d1c <LED_Thread+0x48>
		osThreadResume(hUartThread);
 8003d06:	6828      	ldr	r0, [r5, #0]
 8003d08:	f7fe fa52 	bl	80021b0 <osThreadResume>
		count = osKernelSysTick() + 5000;
 8003d0c:	e7e6      	b.n	8003cdc <LED_Thread+0x8>
			BSP_LED_Toggle(LED2);
 8003d0e:	f7fe f98b 	bl	8002028 <BSP_LED_Toggle>
			osDelay(500);
 8003d12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d16:	f7fe fa33 	bl	8002180 <osDelay>
 8003d1a:	e7e2      	b.n	8003ce2 <LED_Thread+0xe>
			BSP_LED_Toggle(LED2);
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	f7fe f983 	bl	8002028 <BSP_LED_Toggle>
			osDelay(1000);
 8003d22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d26:	f7fe fa2b 	bl	8002180 <osDelay>
 8003d2a:	e7e8      	b.n	8003cfe <LED_Thread+0x2a>
 8003d2c:	20001420 	.word	0x20001420

08003d30 <main>:
int main(void) {
 8003d30:	b500      	push	{lr}
 8003d32:	b095      	sub	sp, #84	; 0x54
	HAL_Init();
 8003d34:	f7fd f996 	bl	8001064 <HAL_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d38:	2200      	movs	r2, #0
 8003d3a:	4b30      	ldr	r3, [pc, #192]	; (8003dfc <main+0xcc>)
 8003d3c:	9201      	str	r2, [sp, #4]
 8003d3e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003d40:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003d44:	6419      	str	r1, [r3, #64]	; 0x40
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d48:	492d      	ldr	r1, [pc, #180]	; (8003e00 <main+0xd0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	9301      	str	r3, [sp, #4]
 8003d50:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d52:	9202      	str	r2, [sp, #8]
 8003d54:	680b      	ldr	r3, [r1, #0]
 8003d56:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d5e:	600b      	str	r3, [r1, #0]
 8003d60:	680b      	ldr	r3, [r1, #0]
 8003d62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d66:	9302      	str	r3, [sp, #8]
 8003d68:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003d6e:	f44f 70a8 	mov.w	r0, #336	; 0x150
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 8003d72:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003d76:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003d78:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d7a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003d7c:	e9cd 0311 	strd	r0, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003d80:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003d82:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d84:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003d86:	e9cd 420e 	strd	r4, r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003d8a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003d8c:	f7fd fb58 	bl	8001440 <HAL_RCC_OscConfig>
 8003d90:	b958      	cbnz	r0, 8003daa <main+0x7a>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |	\
 8003d92:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d94:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d9c:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d9e:	e9cd 3006 	strd	r3, r0, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8003da2:	4621      	mov	r1, r4
 8003da4:	a803      	add	r0, sp, #12
 8003da6:	f7fd fd61 	bl	800186c <HAL_RCC_ClockConfig>
	BSP_LED_Init(LED2);
 8003daa:	2000      	movs	r0, #0
 8003dac:	f7fe f90a 	bl	8001fc4 <BSP_LED_Init>
	uart_init(115200);
 8003db0:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8003db4:	f7fe f940 	bl	8002038 <uart_init>
	osThreadDef(LED, LED_Thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8003db8:	4c12      	ldr	r4, [pc, #72]	; (8003e04 <main+0xd4>)
	puts("");
 8003dba:	4813      	ldr	r0, [pc, #76]	; (8003e08 <main+0xd8>)
 8003dbc:	f000 ff0e 	bl	8004bdc <puts>
	puts("Hello World!\r");
 8003dc0:	4812      	ldr	r0, [pc, #72]	; (8003e0c <main+0xdc>)
 8003dc2:	f000 ff0b 	bl	8004bdc <puts>
	osThreadDef(LED, LED_Thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8003dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dc8:	ad03      	add	r5, sp, #12
 8003dca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dcc:	f854 3b04 	ldr.w	r3, [r4], #4
 8003dd0:	602b      	str	r3, [r5, #0]
	osThreadDef(UART, Uart_Thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8003dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dd4:	ad08      	add	r5, sp, #32
 8003dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dd8:	6823      	ldr	r3, [r4, #0]
 8003dda:	602b      	str	r3, [r5, #0]
	hLedThread = osThreadCreate(osThread(LED), NULL);
 8003ddc:	2100      	movs	r1, #0
 8003dde:	a803      	add	r0, sp, #12
 8003de0:	f7fe f9b6 	bl	8002150 <osThreadCreate>
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <main+0xe0>)
	hUartThread = osThreadCreate(osThread(UART), NULL);
 8003de6:	2100      	movs	r1, #0
	hLedThread = osThreadCreate(osThread(LED), NULL);
 8003de8:	6018      	str	r0, [r3, #0]
	hUartThread = osThreadCreate(osThread(UART), NULL);
 8003dea:	a808      	add	r0, sp, #32
 8003dec:	f7fe f9b0 	bl	8002150 <osThreadCreate>
 8003df0:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <main+0xe4>)
 8003df2:	6018      	str	r0, [r3, #0]
	osKernelStart();
 8003df4:	f7fe f9a0 	bl	8002138 <osKernelStart>
 8003df8:	e7fe      	b.n	8003df8 <main+0xc8>
 8003dfa:	bf00      	nop
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	40007000 	.word	0x40007000
 8003e04:	080081d0 	.word	0x080081d0
 8003e08:	080082f0 	.word	0x080082f0
 8003e0c:	080082e3 	.word	0x080082e3
 8003e10:	2000141c 	.word	0x2000141c
 8003e14:	20001420 	.word	0x20001420

08003e18 <assert_failed>:
void assert_failed(uint8_t* file, uint32_t line) {
 8003e18:	e7fe      	b.n	8003e18 <assert_failed>

08003e1a <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8003e1a:	4770      	bx	lr

08003e1c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003e1c:	e7fe      	b.n	8003e1c <HardFault_Handler>

08003e1e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003e1e:	e7fe      	b.n	8003e1e <MemManage_Handler>

08003e20 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003e20:	e7fe      	b.n	8003e20 <BusFault_Handler>

08003e22 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003e22:	e7fe      	b.n	8003e22 <UsageFault_Handler>

08003e24 <DebugMon_Handler>:
 8003e24:	4770      	bx	lr

08003e26 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  osSystickHandler();
 8003e26:	f7fe b9b3 	b.w	8002190 <osSystickHandler>
	...

08003e2c <__errno>:
 8003e2c:	4b01      	ldr	r3, [pc, #4]	; (8003e34 <__errno+0x8>)
 8003e2e:	6818      	ldr	r0, [r3, #0]
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	2000000c 	.word	0x2000000c

08003e38 <__libc_init_array>:
 8003e38:	b570      	push	{r4, r5, r6, lr}
 8003e3a:	4e0d      	ldr	r6, [pc, #52]	; (8003e70 <__libc_init_array+0x38>)
 8003e3c:	4c0d      	ldr	r4, [pc, #52]	; (8003e74 <__libc_init_array+0x3c>)
 8003e3e:	1ba4      	subs	r4, r4, r6
 8003e40:	10a4      	asrs	r4, r4, #2
 8003e42:	2500      	movs	r5, #0
 8003e44:	42a5      	cmp	r5, r4
 8003e46:	d109      	bne.n	8003e5c <__libc_init_array+0x24>
 8003e48:	4e0b      	ldr	r6, [pc, #44]	; (8003e78 <__libc_init_array+0x40>)
 8003e4a:	4c0c      	ldr	r4, [pc, #48]	; (8003e7c <__libc_init_array+0x44>)
 8003e4c:	f004 f9b4 	bl	80081b8 <_init>
 8003e50:	1ba4      	subs	r4, r4, r6
 8003e52:	10a4      	asrs	r4, r4, #2
 8003e54:	2500      	movs	r5, #0
 8003e56:	42a5      	cmp	r5, r4
 8003e58:	d105      	bne.n	8003e66 <__libc_init_array+0x2e>
 8003e5a:	bd70      	pop	{r4, r5, r6, pc}
 8003e5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e60:	4798      	blx	r3
 8003e62:	3501      	adds	r5, #1
 8003e64:	e7ee      	b.n	8003e44 <__libc_init_array+0xc>
 8003e66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e6a:	4798      	blx	r3
 8003e6c:	3501      	adds	r5, #1
 8003e6e:	e7f2      	b.n	8003e56 <__libc_init_array+0x1e>
 8003e70:	08008628 	.word	0x08008628
 8003e74:	08008628 	.word	0x08008628
 8003e78:	08008628 	.word	0x08008628
 8003e7c:	0800862c 	.word	0x0800862c

08003e80 <memcpy>:
 8003e80:	b510      	push	{r4, lr}
 8003e82:	1e43      	subs	r3, r0, #1
 8003e84:	440a      	add	r2, r1
 8003e86:	4291      	cmp	r1, r2
 8003e88:	d100      	bne.n	8003e8c <memcpy+0xc>
 8003e8a:	bd10      	pop	{r4, pc}
 8003e8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e94:	e7f7      	b.n	8003e86 <memcpy+0x6>

08003e96 <memset>:
 8003e96:	4402      	add	r2, r0
 8003e98:	4603      	mov	r3, r0
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d100      	bne.n	8003ea0 <memset+0xa>
 8003e9e:	4770      	bx	lr
 8003ea0:	f803 1b01 	strb.w	r1, [r3], #1
 8003ea4:	e7f9      	b.n	8003e9a <memset+0x4>

08003ea6 <__cvt>:
 8003ea6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003eaa:	ec55 4b10 	vmov	r4, r5, d0
 8003eae:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003eb0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003eb4:	2d00      	cmp	r5, #0
 8003eb6:	460e      	mov	r6, r1
 8003eb8:	4691      	mov	r9, r2
 8003eba:	4619      	mov	r1, r3
 8003ebc:	bfb8      	it	lt
 8003ebe:	4622      	movlt	r2, r4
 8003ec0:	462b      	mov	r3, r5
 8003ec2:	f027 0720 	bic.w	r7, r7, #32
 8003ec6:	bfbb      	ittet	lt
 8003ec8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003ecc:	461d      	movlt	r5, r3
 8003ece:	2300      	movge	r3, #0
 8003ed0:	232d      	movlt	r3, #45	; 0x2d
 8003ed2:	bfb8      	it	lt
 8003ed4:	4614      	movlt	r4, r2
 8003ed6:	2f46      	cmp	r7, #70	; 0x46
 8003ed8:	700b      	strb	r3, [r1, #0]
 8003eda:	d004      	beq.n	8003ee6 <__cvt+0x40>
 8003edc:	2f45      	cmp	r7, #69	; 0x45
 8003ede:	d100      	bne.n	8003ee2 <__cvt+0x3c>
 8003ee0:	3601      	adds	r6, #1
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	e000      	b.n	8003ee8 <__cvt+0x42>
 8003ee6:	2103      	movs	r1, #3
 8003ee8:	ab03      	add	r3, sp, #12
 8003eea:	9301      	str	r3, [sp, #4]
 8003eec:	ab02      	add	r3, sp, #8
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	4632      	mov	r2, r6
 8003ef2:	4653      	mov	r3, sl
 8003ef4:	ec45 4b10 	vmov	d0, r4, r5
 8003ef8:	f001 ff4a 	bl	8005d90 <_dtoa_r>
 8003efc:	2f47      	cmp	r7, #71	; 0x47
 8003efe:	4680      	mov	r8, r0
 8003f00:	d102      	bne.n	8003f08 <__cvt+0x62>
 8003f02:	f019 0f01 	tst.w	r9, #1
 8003f06:	d026      	beq.n	8003f56 <__cvt+0xb0>
 8003f08:	2f46      	cmp	r7, #70	; 0x46
 8003f0a:	eb08 0906 	add.w	r9, r8, r6
 8003f0e:	d111      	bne.n	8003f34 <__cvt+0x8e>
 8003f10:	f898 3000 	ldrb.w	r3, [r8]
 8003f14:	2b30      	cmp	r3, #48	; 0x30
 8003f16:	d10a      	bne.n	8003f2e <__cvt+0x88>
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	4629      	mov	r1, r5
 8003f20:	f7fc ff5a 	bl	8000dd8 <__aeabi_dcmpeq>
 8003f24:	b918      	cbnz	r0, 8003f2e <__cvt+0x88>
 8003f26:	f1c6 0601 	rsb	r6, r6, #1
 8003f2a:	f8ca 6000 	str.w	r6, [sl]
 8003f2e:	f8da 3000 	ldr.w	r3, [sl]
 8003f32:	4499      	add	r9, r3
 8003f34:	2200      	movs	r2, #0
 8003f36:	2300      	movs	r3, #0
 8003f38:	4620      	mov	r0, r4
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	f7fc ff4c 	bl	8000dd8 <__aeabi_dcmpeq>
 8003f40:	b938      	cbnz	r0, 8003f52 <__cvt+0xac>
 8003f42:	2230      	movs	r2, #48	; 0x30
 8003f44:	9b03      	ldr	r3, [sp, #12]
 8003f46:	454b      	cmp	r3, r9
 8003f48:	d205      	bcs.n	8003f56 <__cvt+0xb0>
 8003f4a:	1c59      	adds	r1, r3, #1
 8003f4c:	9103      	str	r1, [sp, #12]
 8003f4e:	701a      	strb	r2, [r3, #0]
 8003f50:	e7f8      	b.n	8003f44 <__cvt+0x9e>
 8003f52:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f56:	9b03      	ldr	r3, [sp, #12]
 8003f58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f5a:	eba3 0308 	sub.w	r3, r3, r8
 8003f5e:	4640      	mov	r0, r8
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	b004      	add	sp, #16
 8003f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003f68 <__exponent>:
 8003f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f6a:	2900      	cmp	r1, #0
 8003f6c:	4604      	mov	r4, r0
 8003f6e:	bfba      	itte	lt
 8003f70:	4249      	neglt	r1, r1
 8003f72:	232d      	movlt	r3, #45	; 0x2d
 8003f74:	232b      	movge	r3, #43	; 0x2b
 8003f76:	2909      	cmp	r1, #9
 8003f78:	f804 2b02 	strb.w	r2, [r4], #2
 8003f7c:	7043      	strb	r3, [r0, #1]
 8003f7e:	dd20      	ble.n	8003fc2 <__exponent+0x5a>
 8003f80:	f10d 0307 	add.w	r3, sp, #7
 8003f84:	461f      	mov	r7, r3
 8003f86:	260a      	movs	r6, #10
 8003f88:	fb91 f5f6 	sdiv	r5, r1, r6
 8003f8c:	fb06 1115 	mls	r1, r6, r5, r1
 8003f90:	3130      	adds	r1, #48	; 0x30
 8003f92:	2d09      	cmp	r5, #9
 8003f94:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003f98:	f103 32ff 	add.w	r2, r3, #4294967295
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	dc09      	bgt.n	8003fb4 <__exponent+0x4c>
 8003fa0:	3130      	adds	r1, #48	; 0x30
 8003fa2:	3b02      	subs	r3, #2
 8003fa4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003fa8:	42bb      	cmp	r3, r7
 8003faa:	4622      	mov	r2, r4
 8003fac:	d304      	bcc.n	8003fb8 <__exponent+0x50>
 8003fae:	1a10      	subs	r0, r2, r0
 8003fb0:	b003      	add	sp, #12
 8003fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	e7e7      	b.n	8003f88 <__exponent+0x20>
 8003fb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fbc:	f804 2b01 	strb.w	r2, [r4], #1
 8003fc0:	e7f2      	b.n	8003fa8 <__exponent+0x40>
 8003fc2:	2330      	movs	r3, #48	; 0x30
 8003fc4:	4419      	add	r1, r3
 8003fc6:	7083      	strb	r3, [r0, #2]
 8003fc8:	1d02      	adds	r2, r0, #4
 8003fca:	70c1      	strb	r1, [r0, #3]
 8003fcc:	e7ef      	b.n	8003fae <__exponent+0x46>
	...

08003fd0 <_printf_float>:
 8003fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fd4:	b08d      	sub	sp, #52	; 0x34
 8003fd6:	460c      	mov	r4, r1
 8003fd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003fdc:	4616      	mov	r6, r2
 8003fde:	461f      	mov	r7, r3
 8003fe0:	4605      	mov	r5, r0
 8003fe2:	f003 f933 	bl	800724c <_localeconv_r>
 8003fe6:	6803      	ldr	r3, [r0, #0]
 8003fe8:	9304      	str	r3, [sp, #16]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fc fa78 	bl	80004e0 <strlen>
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8003ff4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ff8:	9005      	str	r0, [sp, #20]
 8003ffa:	3307      	adds	r3, #7
 8003ffc:	f023 0307 	bic.w	r3, r3, #7
 8004000:	f103 0208 	add.w	r2, r3, #8
 8004004:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004008:	f8d4 b000 	ldr.w	fp, [r4]
 800400c:	f8c8 2000 	str.w	r2, [r8]
 8004010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004014:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004018:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800401c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004020:	9307      	str	r3, [sp, #28]
 8004022:	f8cd 8018 	str.w	r8, [sp, #24]
 8004026:	f04f 32ff 	mov.w	r2, #4294967295
 800402a:	4ba7      	ldr	r3, [pc, #668]	; (80042c8 <_printf_float+0x2f8>)
 800402c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004030:	f7fc ff04 	bl	8000e3c <__aeabi_dcmpun>
 8004034:	bb70      	cbnz	r0, 8004094 <_printf_float+0xc4>
 8004036:	f04f 32ff 	mov.w	r2, #4294967295
 800403a:	4ba3      	ldr	r3, [pc, #652]	; (80042c8 <_printf_float+0x2f8>)
 800403c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004040:	f7fc fede 	bl	8000e00 <__aeabi_dcmple>
 8004044:	bb30      	cbnz	r0, 8004094 <_printf_float+0xc4>
 8004046:	2200      	movs	r2, #0
 8004048:	2300      	movs	r3, #0
 800404a:	4640      	mov	r0, r8
 800404c:	4649      	mov	r1, r9
 800404e:	f7fc fecd 	bl	8000dec <__aeabi_dcmplt>
 8004052:	b110      	cbz	r0, 800405a <_printf_float+0x8a>
 8004054:	232d      	movs	r3, #45	; 0x2d
 8004056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800405a:	4a9c      	ldr	r2, [pc, #624]	; (80042cc <_printf_float+0x2fc>)
 800405c:	4b9c      	ldr	r3, [pc, #624]	; (80042d0 <_printf_float+0x300>)
 800405e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004062:	bf8c      	ite	hi
 8004064:	4690      	movhi	r8, r2
 8004066:	4698      	movls	r8, r3
 8004068:	2303      	movs	r3, #3
 800406a:	f02b 0204 	bic.w	r2, fp, #4
 800406e:	6123      	str	r3, [r4, #16]
 8004070:	6022      	str	r2, [r4, #0]
 8004072:	f04f 0900 	mov.w	r9, #0
 8004076:	9700      	str	r7, [sp, #0]
 8004078:	4633      	mov	r3, r6
 800407a:	aa0b      	add	r2, sp, #44	; 0x2c
 800407c:	4621      	mov	r1, r4
 800407e:	4628      	mov	r0, r5
 8004080:	f000 f9e6 	bl	8004450 <_printf_common>
 8004084:	3001      	adds	r0, #1
 8004086:	f040 808d 	bne.w	80041a4 <_printf_float+0x1d4>
 800408a:	f04f 30ff 	mov.w	r0, #4294967295
 800408e:	b00d      	add	sp, #52	; 0x34
 8004090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004094:	4642      	mov	r2, r8
 8004096:	464b      	mov	r3, r9
 8004098:	4640      	mov	r0, r8
 800409a:	4649      	mov	r1, r9
 800409c:	f7fc fece 	bl	8000e3c <__aeabi_dcmpun>
 80040a0:	b110      	cbz	r0, 80040a8 <_printf_float+0xd8>
 80040a2:	4a8c      	ldr	r2, [pc, #560]	; (80042d4 <_printf_float+0x304>)
 80040a4:	4b8c      	ldr	r3, [pc, #560]	; (80042d8 <_printf_float+0x308>)
 80040a6:	e7da      	b.n	800405e <_printf_float+0x8e>
 80040a8:	6861      	ldr	r1, [r4, #4]
 80040aa:	1c4b      	adds	r3, r1, #1
 80040ac:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80040b0:	a80a      	add	r0, sp, #40	; 0x28
 80040b2:	d13e      	bne.n	8004132 <_printf_float+0x162>
 80040b4:	2306      	movs	r3, #6
 80040b6:	6063      	str	r3, [r4, #4]
 80040b8:	2300      	movs	r3, #0
 80040ba:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80040be:	ab09      	add	r3, sp, #36	; 0x24
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	ec49 8b10 	vmov	d0, r8, r9
 80040c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80040ca:	6022      	str	r2, [r4, #0]
 80040cc:	f8cd a004 	str.w	sl, [sp, #4]
 80040d0:	6861      	ldr	r1, [r4, #4]
 80040d2:	4628      	mov	r0, r5
 80040d4:	f7ff fee7 	bl	8003ea6 <__cvt>
 80040d8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80040dc:	2b47      	cmp	r3, #71	; 0x47
 80040de:	4680      	mov	r8, r0
 80040e0:	d109      	bne.n	80040f6 <_printf_float+0x126>
 80040e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040e4:	1cd8      	adds	r0, r3, #3
 80040e6:	db02      	blt.n	80040ee <_printf_float+0x11e>
 80040e8:	6862      	ldr	r2, [r4, #4]
 80040ea:	4293      	cmp	r3, r2
 80040ec:	dd47      	ble.n	800417e <_printf_float+0x1ae>
 80040ee:	f1aa 0a02 	sub.w	sl, sl, #2
 80040f2:	fa5f fa8a 	uxtb.w	sl, sl
 80040f6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80040fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040fc:	d824      	bhi.n	8004148 <_printf_float+0x178>
 80040fe:	3901      	subs	r1, #1
 8004100:	4652      	mov	r2, sl
 8004102:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004106:	9109      	str	r1, [sp, #36]	; 0x24
 8004108:	f7ff ff2e 	bl	8003f68 <__exponent>
 800410c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800410e:	1813      	adds	r3, r2, r0
 8004110:	2a01      	cmp	r2, #1
 8004112:	4681      	mov	r9, r0
 8004114:	6123      	str	r3, [r4, #16]
 8004116:	dc02      	bgt.n	800411e <_printf_float+0x14e>
 8004118:	6822      	ldr	r2, [r4, #0]
 800411a:	07d1      	lsls	r1, r2, #31
 800411c:	d501      	bpl.n	8004122 <_printf_float+0x152>
 800411e:	3301      	adds	r3, #1
 8004120:	6123      	str	r3, [r4, #16]
 8004122:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0a5      	beq.n	8004076 <_printf_float+0xa6>
 800412a:	232d      	movs	r3, #45	; 0x2d
 800412c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004130:	e7a1      	b.n	8004076 <_printf_float+0xa6>
 8004132:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004136:	f000 8177 	beq.w	8004428 <_printf_float+0x458>
 800413a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800413e:	d1bb      	bne.n	80040b8 <_printf_float+0xe8>
 8004140:	2900      	cmp	r1, #0
 8004142:	d1b9      	bne.n	80040b8 <_printf_float+0xe8>
 8004144:	2301      	movs	r3, #1
 8004146:	e7b6      	b.n	80040b6 <_printf_float+0xe6>
 8004148:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800414c:	d119      	bne.n	8004182 <_printf_float+0x1b2>
 800414e:	2900      	cmp	r1, #0
 8004150:	6863      	ldr	r3, [r4, #4]
 8004152:	dd0c      	ble.n	800416e <_printf_float+0x19e>
 8004154:	6121      	str	r1, [r4, #16]
 8004156:	b913      	cbnz	r3, 800415e <_printf_float+0x18e>
 8004158:	6822      	ldr	r2, [r4, #0]
 800415a:	07d2      	lsls	r2, r2, #31
 800415c:	d502      	bpl.n	8004164 <_printf_float+0x194>
 800415e:	3301      	adds	r3, #1
 8004160:	440b      	add	r3, r1
 8004162:	6123      	str	r3, [r4, #16]
 8004164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004166:	65a3      	str	r3, [r4, #88]	; 0x58
 8004168:	f04f 0900 	mov.w	r9, #0
 800416c:	e7d9      	b.n	8004122 <_printf_float+0x152>
 800416e:	b913      	cbnz	r3, 8004176 <_printf_float+0x1a6>
 8004170:	6822      	ldr	r2, [r4, #0]
 8004172:	07d0      	lsls	r0, r2, #31
 8004174:	d501      	bpl.n	800417a <_printf_float+0x1aa>
 8004176:	3302      	adds	r3, #2
 8004178:	e7f3      	b.n	8004162 <_printf_float+0x192>
 800417a:	2301      	movs	r3, #1
 800417c:	e7f1      	b.n	8004162 <_printf_float+0x192>
 800417e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004182:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004186:	4293      	cmp	r3, r2
 8004188:	db05      	blt.n	8004196 <_printf_float+0x1c6>
 800418a:	6822      	ldr	r2, [r4, #0]
 800418c:	6123      	str	r3, [r4, #16]
 800418e:	07d1      	lsls	r1, r2, #31
 8004190:	d5e8      	bpl.n	8004164 <_printf_float+0x194>
 8004192:	3301      	adds	r3, #1
 8004194:	e7e5      	b.n	8004162 <_printf_float+0x192>
 8004196:	2b00      	cmp	r3, #0
 8004198:	bfd4      	ite	le
 800419a:	f1c3 0302 	rsble	r3, r3, #2
 800419e:	2301      	movgt	r3, #1
 80041a0:	4413      	add	r3, r2
 80041a2:	e7de      	b.n	8004162 <_printf_float+0x192>
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	055a      	lsls	r2, r3, #21
 80041a8:	d407      	bmi.n	80041ba <_printf_float+0x1ea>
 80041aa:	6923      	ldr	r3, [r4, #16]
 80041ac:	4642      	mov	r2, r8
 80041ae:	4631      	mov	r1, r6
 80041b0:	4628      	mov	r0, r5
 80041b2:	47b8      	blx	r7
 80041b4:	3001      	adds	r0, #1
 80041b6:	d12b      	bne.n	8004210 <_printf_float+0x240>
 80041b8:	e767      	b.n	800408a <_printf_float+0xba>
 80041ba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80041be:	f240 80dc 	bls.w	800437a <_printf_float+0x3aa>
 80041c2:	2200      	movs	r2, #0
 80041c4:	2300      	movs	r3, #0
 80041c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041ca:	f7fc fe05 	bl	8000dd8 <__aeabi_dcmpeq>
 80041ce:	2800      	cmp	r0, #0
 80041d0:	d033      	beq.n	800423a <_printf_float+0x26a>
 80041d2:	2301      	movs	r3, #1
 80041d4:	4a41      	ldr	r2, [pc, #260]	; (80042dc <_printf_float+0x30c>)
 80041d6:	4631      	mov	r1, r6
 80041d8:	4628      	mov	r0, r5
 80041da:	47b8      	blx	r7
 80041dc:	3001      	adds	r0, #1
 80041de:	f43f af54 	beq.w	800408a <_printf_float+0xba>
 80041e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041e6:	429a      	cmp	r2, r3
 80041e8:	db02      	blt.n	80041f0 <_printf_float+0x220>
 80041ea:	6823      	ldr	r3, [r4, #0]
 80041ec:	07d8      	lsls	r0, r3, #31
 80041ee:	d50f      	bpl.n	8004210 <_printf_float+0x240>
 80041f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041f4:	4631      	mov	r1, r6
 80041f6:	4628      	mov	r0, r5
 80041f8:	47b8      	blx	r7
 80041fa:	3001      	adds	r0, #1
 80041fc:	f43f af45 	beq.w	800408a <_printf_float+0xba>
 8004200:	f04f 0800 	mov.w	r8, #0
 8004204:	f104 091a 	add.w	r9, r4, #26
 8004208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800420a:	3b01      	subs	r3, #1
 800420c:	4543      	cmp	r3, r8
 800420e:	dc09      	bgt.n	8004224 <_printf_float+0x254>
 8004210:	6823      	ldr	r3, [r4, #0]
 8004212:	079b      	lsls	r3, r3, #30
 8004214:	f100 8103 	bmi.w	800441e <_printf_float+0x44e>
 8004218:	68e0      	ldr	r0, [r4, #12]
 800421a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800421c:	4298      	cmp	r0, r3
 800421e:	bfb8      	it	lt
 8004220:	4618      	movlt	r0, r3
 8004222:	e734      	b.n	800408e <_printf_float+0xbe>
 8004224:	2301      	movs	r3, #1
 8004226:	464a      	mov	r2, r9
 8004228:	4631      	mov	r1, r6
 800422a:	4628      	mov	r0, r5
 800422c:	47b8      	blx	r7
 800422e:	3001      	adds	r0, #1
 8004230:	f43f af2b 	beq.w	800408a <_printf_float+0xba>
 8004234:	f108 0801 	add.w	r8, r8, #1
 8004238:	e7e6      	b.n	8004208 <_printf_float+0x238>
 800423a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800423c:	2b00      	cmp	r3, #0
 800423e:	dc2b      	bgt.n	8004298 <_printf_float+0x2c8>
 8004240:	2301      	movs	r3, #1
 8004242:	4a26      	ldr	r2, [pc, #152]	; (80042dc <_printf_float+0x30c>)
 8004244:	4631      	mov	r1, r6
 8004246:	4628      	mov	r0, r5
 8004248:	47b8      	blx	r7
 800424a:	3001      	adds	r0, #1
 800424c:	f43f af1d 	beq.w	800408a <_printf_float+0xba>
 8004250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004252:	b923      	cbnz	r3, 800425e <_printf_float+0x28e>
 8004254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004256:	b913      	cbnz	r3, 800425e <_printf_float+0x28e>
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	07d9      	lsls	r1, r3, #31
 800425c:	d5d8      	bpl.n	8004210 <_printf_float+0x240>
 800425e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004262:	4631      	mov	r1, r6
 8004264:	4628      	mov	r0, r5
 8004266:	47b8      	blx	r7
 8004268:	3001      	adds	r0, #1
 800426a:	f43f af0e 	beq.w	800408a <_printf_float+0xba>
 800426e:	f04f 0900 	mov.w	r9, #0
 8004272:	f104 0a1a 	add.w	sl, r4, #26
 8004276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004278:	425b      	negs	r3, r3
 800427a:	454b      	cmp	r3, r9
 800427c:	dc01      	bgt.n	8004282 <_printf_float+0x2b2>
 800427e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004280:	e794      	b.n	80041ac <_printf_float+0x1dc>
 8004282:	2301      	movs	r3, #1
 8004284:	4652      	mov	r2, sl
 8004286:	4631      	mov	r1, r6
 8004288:	4628      	mov	r0, r5
 800428a:	47b8      	blx	r7
 800428c:	3001      	adds	r0, #1
 800428e:	f43f aefc 	beq.w	800408a <_printf_float+0xba>
 8004292:	f109 0901 	add.w	r9, r9, #1
 8004296:	e7ee      	b.n	8004276 <_printf_float+0x2a6>
 8004298:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800429a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800429c:	429a      	cmp	r2, r3
 800429e:	bfa8      	it	ge
 80042a0:	461a      	movge	r2, r3
 80042a2:	2a00      	cmp	r2, #0
 80042a4:	4691      	mov	r9, r2
 80042a6:	dd07      	ble.n	80042b8 <_printf_float+0x2e8>
 80042a8:	4613      	mov	r3, r2
 80042aa:	4631      	mov	r1, r6
 80042ac:	4642      	mov	r2, r8
 80042ae:	4628      	mov	r0, r5
 80042b0:	47b8      	blx	r7
 80042b2:	3001      	adds	r0, #1
 80042b4:	f43f aee9 	beq.w	800408a <_printf_float+0xba>
 80042b8:	f104 031a 	add.w	r3, r4, #26
 80042bc:	f04f 0b00 	mov.w	fp, #0
 80042c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042c4:	9306      	str	r3, [sp, #24]
 80042c6:	e015      	b.n	80042f4 <_printf_float+0x324>
 80042c8:	7fefffff 	.word	0x7fefffff
 80042cc:	08008304 	.word	0x08008304
 80042d0:	08008300 	.word	0x08008300
 80042d4:	0800830c 	.word	0x0800830c
 80042d8:	08008308 	.word	0x08008308
 80042dc:	08008310 	.word	0x08008310
 80042e0:	2301      	movs	r3, #1
 80042e2:	9a06      	ldr	r2, [sp, #24]
 80042e4:	4631      	mov	r1, r6
 80042e6:	4628      	mov	r0, r5
 80042e8:	47b8      	blx	r7
 80042ea:	3001      	adds	r0, #1
 80042ec:	f43f aecd 	beq.w	800408a <_printf_float+0xba>
 80042f0:	f10b 0b01 	add.w	fp, fp, #1
 80042f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80042f8:	ebaa 0309 	sub.w	r3, sl, r9
 80042fc:	455b      	cmp	r3, fp
 80042fe:	dcef      	bgt.n	80042e0 <_printf_float+0x310>
 8004300:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004304:	429a      	cmp	r2, r3
 8004306:	44d0      	add	r8, sl
 8004308:	db15      	blt.n	8004336 <_printf_float+0x366>
 800430a:	6823      	ldr	r3, [r4, #0]
 800430c:	07da      	lsls	r2, r3, #31
 800430e:	d412      	bmi.n	8004336 <_printf_float+0x366>
 8004310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004312:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004314:	eba3 020a 	sub.w	r2, r3, sl
 8004318:	eba3 0a01 	sub.w	sl, r3, r1
 800431c:	4592      	cmp	sl, r2
 800431e:	bfa8      	it	ge
 8004320:	4692      	movge	sl, r2
 8004322:	f1ba 0f00 	cmp.w	sl, #0
 8004326:	dc0e      	bgt.n	8004346 <_printf_float+0x376>
 8004328:	f04f 0800 	mov.w	r8, #0
 800432c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004330:	f104 091a 	add.w	r9, r4, #26
 8004334:	e019      	b.n	800436a <_printf_float+0x39a>
 8004336:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800433a:	4631      	mov	r1, r6
 800433c:	4628      	mov	r0, r5
 800433e:	47b8      	blx	r7
 8004340:	3001      	adds	r0, #1
 8004342:	d1e5      	bne.n	8004310 <_printf_float+0x340>
 8004344:	e6a1      	b.n	800408a <_printf_float+0xba>
 8004346:	4653      	mov	r3, sl
 8004348:	4642      	mov	r2, r8
 800434a:	4631      	mov	r1, r6
 800434c:	4628      	mov	r0, r5
 800434e:	47b8      	blx	r7
 8004350:	3001      	adds	r0, #1
 8004352:	d1e9      	bne.n	8004328 <_printf_float+0x358>
 8004354:	e699      	b.n	800408a <_printf_float+0xba>
 8004356:	2301      	movs	r3, #1
 8004358:	464a      	mov	r2, r9
 800435a:	4631      	mov	r1, r6
 800435c:	4628      	mov	r0, r5
 800435e:	47b8      	blx	r7
 8004360:	3001      	adds	r0, #1
 8004362:	f43f ae92 	beq.w	800408a <_printf_float+0xba>
 8004366:	f108 0801 	add.w	r8, r8, #1
 800436a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800436e:	1a9b      	subs	r3, r3, r2
 8004370:	eba3 030a 	sub.w	r3, r3, sl
 8004374:	4543      	cmp	r3, r8
 8004376:	dcee      	bgt.n	8004356 <_printf_float+0x386>
 8004378:	e74a      	b.n	8004210 <_printf_float+0x240>
 800437a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800437c:	2a01      	cmp	r2, #1
 800437e:	dc01      	bgt.n	8004384 <_printf_float+0x3b4>
 8004380:	07db      	lsls	r3, r3, #31
 8004382:	d53a      	bpl.n	80043fa <_printf_float+0x42a>
 8004384:	2301      	movs	r3, #1
 8004386:	4642      	mov	r2, r8
 8004388:	4631      	mov	r1, r6
 800438a:	4628      	mov	r0, r5
 800438c:	47b8      	blx	r7
 800438e:	3001      	adds	r0, #1
 8004390:	f43f ae7b 	beq.w	800408a <_printf_float+0xba>
 8004394:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004398:	4631      	mov	r1, r6
 800439a:	4628      	mov	r0, r5
 800439c:	47b8      	blx	r7
 800439e:	3001      	adds	r0, #1
 80043a0:	f108 0801 	add.w	r8, r8, #1
 80043a4:	f43f ae71 	beq.w	800408a <_printf_float+0xba>
 80043a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043aa:	2200      	movs	r2, #0
 80043ac:	f103 3aff 	add.w	sl, r3, #4294967295
 80043b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043b4:	2300      	movs	r3, #0
 80043b6:	f7fc fd0f 	bl	8000dd8 <__aeabi_dcmpeq>
 80043ba:	b9c8      	cbnz	r0, 80043f0 <_printf_float+0x420>
 80043bc:	4653      	mov	r3, sl
 80043be:	4642      	mov	r2, r8
 80043c0:	4631      	mov	r1, r6
 80043c2:	4628      	mov	r0, r5
 80043c4:	47b8      	blx	r7
 80043c6:	3001      	adds	r0, #1
 80043c8:	d10e      	bne.n	80043e8 <_printf_float+0x418>
 80043ca:	e65e      	b.n	800408a <_printf_float+0xba>
 80043cc:	2301      	movs	r3, #1
 80043ce:	4652      	mov	r2, sl
 80043d0:	4631      	mov	r1, r6
 80043d2:	4628      	mov	r0, r5
 80043d4:	47b8      	blx	r7
 80043d6:	3001      	adds	r0, #1
 80043d8:	f43f ae57 	beq.w	800408a <_printf_float+0xba>
 80043dc:	f108 0801 	add.w	r8, r8, #1
 80043e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043e2:	3b01      	subs	r3, #1
 80043e4:	4543      	cmp	r3, r8
 80043e6:	dcf1      	bgt.n	80043cc <_printf_float+0x3fc>
 80043e8:	464b      	mov	r3, r9
 80043ea:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80043ee:	e6de      	b.n	80041ae <_printf_float+0x1de>
 80043f0:	f04f 0800 	mov.w	r8, #0
 80043f4:	f104 0a1a 	add.w	sl, r4, #26
 80043f8:	e7f2      	b.n	80043e0 <_printf_float+0x410>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e7df      	b.n	80043be <_printf_float+0x3ee>
 80043fe:	2301      	movs	r3, #1
 8004400:	464a      	mov	r2, r9
 8004402:	4631      	mov	r1, r6
 8004404:	4628      	mov	r0, r5
 8004406:	47b8      	blx	r7
 8004408:	3001      	adds	r0, #1
 800440a:	f43f ae3e 	beq.w	800408a <_printf_float+0xba>
 800440e:	f108 0801 	add.w	r8, r8, #1
 8004412:	68e3      	ldr	r3, [r4, #12]
 8004414:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	4543      	cmp	r3, r8
 800441a:	dcf0      	bgt.n	80043fe <_printf_float+0x42e>
 800441c:	e6fc      	b.n	8004218 <_printf_float+0x248>
 800441e:	f04f 0800 	mov.w	r8, #0
 8004422:	f104 0919 	add.w	r9, r4, #25
 8004426:	e7f4      	b.n	8004412 <_printf_float+0x442>
 8004428:	2900      	cmp	r1, #0
 800442a:	f43f ae8b 	beq.w	8004144 <_printf_float+0x174>
 800442e:	2300      	movs	r3, #0
 8004430:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004434:	ab09      	add	r3, sp, #36	; 0x24
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	ec49 8b10 	vmov	d0, r8, r9
 800443c:	6022      	str	r2, [r4, #0]
 800443e:	f8cd a004 	str.w	sl, [sp, #4]
 8004442:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004446:	4628      	mov	r0, r5
 8004448:	f7ff fd2d 	bl	8003ea6 <__cvt>
 800444c:	4680      	mov	r8, r0
 800444e:	e648      	b.n	80040e2 <_printf_float+0x112>

08004450 <_printf_common>:
 8004450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004454:	4691      	mov	r9, r2
 8004456:	461f      	mov	r7, r3
 8004458:	688a      	ldr	r2, [r1, #8]
 800445a:	690b      	ldr	r3, [r1, #16]
 800445c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004460:	4293      	cmp	r3, r2
 8004462:	bfb8      	it	lt
 8004464:	4613      	movlt	r3, r2
 8004466:	f8c9 3000 	str.w	r3, [r9]
 800446a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800446e:	4606      	mov	r6, r0
 8004470:	460c      	mov	r4, r1
 8004472:	b112      	cbz	r2, 800447a <_printf_common+0x2a>
 8004474:	3301      	adds	r3, #1
 8004476:	f8c9 3000 	str.w	r3, [r9]
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	0699      	lsls	r1, r3, #26
 800447e:	bf42      	ittt	mi
 8004480:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004484:	3302      	addmi	r3, #2
 8004486:	f8c9 3000 	strmi.w	r3, [r9]
 800448a:	6825      	ldr	r5, [r4, #0]
 800448c:	f015 0506 	ands.w	r5, r5, #6
 8004490:	d107      	bne.n	80044a2 <_printf_common+0x52>
 8004492:	f104 0a19 	add.w	sl, r4, #25
 8004496:	68e3      	ldr	r3, [r4, #12]
 8004498:	f8d9 2000 	ldr.w	r2, [r9]
 800449c:	1a9b      	subs	r3, r3, r2
 800449e:	42ab      	cmp	r3, r5
 80044a0:	dc28      	bgt.n	80044f4 <_printf_common+0xa4>
 80044a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80044a6:	6822      	ldr	r2, [r4, #0]
 80044a8:	3300      	adds	r3, #0
 80044aa:	bf18      	it	ne
 80044ac:	2301      	movne	r3, #1
 80044ae:	0692      	lsls	r2, r2, #26
 80044b0:	d42d      	bmi.n	800450e <_printf_common+0xbe>
 80044b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044b6:	4639      	mov	r1, r7
 80044b8:	4630      	mov	r0, r6
 80044ba:	47c0      	blx	r8
 80044bc:	3001      	adds	r0, #1
 80044be:	d020      	beq.n	8004502 <_printf_common+0xb2>
 80044c0:	6823      	ldr	r3, [r4, #0]
 80044c2:	68e5      	ldr	r5, [r4, #12]
 80044c4:	f8d9 2000 	ldr.w	r2, [r9]
 80044c8:	f003 0306 	and.w	r3, r3, #6
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	bf08      	it	eq
 80044d0:	1aad      	subeq	r5, r5, r2
 80044d2:	68a3      	ldr	r3, [r4, #8]
 80044d4:	6922      	ldr	r2, [r4, #16]
 80044d6:	bf0c      	ite	eq
 80044d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044dc:	2500      	movne	r5, #0
 80044de:	4293      	cmp	r3, r2
 80044e0:	bfc4      	itt	gt
 80044e2:	1a9b      	subgt	r3, r3, r2
 80044e4:	18ed      	addgt	r5, r5, r3
 80044e6:	f04f 0900 	mov.w	r9, #0
 80044ea:	341a      	adds	r4, #26
 80044ec:	454d      	cmp	r5, r9
 80044ee:	d11a      	bne.n	8004526 <_printf_common+0xd6>
 80044f0:	2000      	movs	r0, #0
 80044f2:	e008      	b.n	8004506 <_printf_common+0xb6>
 80044f4:	2301      	movs	r3, #1
 80044f6:	4652      	mov	r2, sl
 80044f8:	4639      	mov	r1, r7
 80044fa:	4630      	mov	r0, r6
 80044fc:	47c0      	blx	r8
 80044fe:	3001      	adds	r0, #1
 8004500:	d103      	bne.n	800450a <_printf_common+0xba>
 8004502:	f04f 30ff 	mov.w	r0, #4294967295
 8004506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800450a:	3501      	adds	r5, #1
 800450c:	e7c3      	b.n	8004496 <_printf_common+0x46>
 800450e:	18e1      	adds	r1, r4, r3
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	2030      	movs	r0, #48	; 0x30
 8004514:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004518:	4422      	add	r2, r4
 800451a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800451e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004522:	3302      	adds	r3, #2
 8004524:	e7c5      	b.n	80044b2 <_printf_common+0x62>
 8004526:	2301      	movs	r3, #1
 8004528:	4622      	mov	r2, r4
 800452a:	4639      	mov	r1, r7
 800452c:	4630      	mov	r0, r6
 800452e:	47c0      	blx	r8
 8004530:	3001      	adds	r0, #1
 8004532:	d0e6      	beq.n	8004502 <_printf_common+0xb2>
 8004534:	f109 0901 	add.w	r9, r9, #1
 8004538:	e7d8      	b.n	80044ec <_printf_common+0x9c>
	...

0800453c <_printf_i>:
 800453c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004540:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004544:	460c      	mov	r4, r1
 8004546:	7e09      	ldrb	r1, [r1, #24]
 8004548:	b085      	sub	sp, #20
 800454a:	296e      	cmp	r1, #110	; 0x6e
 800454c:	4617      	mov	r7, r2
 800454e:	4606      	mov	r6, r0
 8004550:	4698      	mov	r8, r3
 8004552:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004554:	f000 80b3 	beq.w	80046be <_printf_i+0x182>
 8004558:	d822      	bhi.n	80045a0 <_printf_i+0x64>
 800455a:	2963      	cmp	r1, #99	; 0x63
 800455c:	d036      	beq.n	80045cc <_printf_i+0x90>
 800455e:	d80a      	bhi.n	8004576 <_printf_i+0x3a>
 8004560:	2900      	cmp	r1, #0
 8004562:	f000 80b9 	beq.w	80046d8 <_printf_i+0x19c>
 8004566:	2958      	cmp	r1, #88	; 0x58
 8004568:	f000 8083 	beq.w	8004672 <_printf_i+0x136>
 800456c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004570:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004574:	e032      	b.n	80045dc <_printf_i+0xa0>
 8004576:	2964      	cmp	r1, #100	; 0x64
 8004578:	d001      	beq.n	800457e <_printf_i+0x42>
 800457a:	2969      	cmp	r1, #105	; 0x69
 800457c:	d1f6      	bne.n	800456c <_printf_i+0x30>
 800457e:	6820      	ldr	r0, [r4, #0]
 8004580:	6813      	ldr	r3, [r2, #0]
 8004582:	0605      	lsls	r5, r0, #24
 8004584:	f103 0104 	add.w	r1, r3, #4
 8004588:	d52a      	bpl.n	80045e0 <_printf_i+0xa4>
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6011      	str	r1, [r2, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	da03      	bge.n	800459a <_printf_i+0x5e>
 8004592:	222d      	movs	r2, #45	; 0x2d
 8004594:	425b      	negs	r3, r3
 8004596:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800459a:	486f      	ldr	r0, [pc, #444]	; (8004758 <_printf_i+0x21c>)
 800459c:	220a      	movs	r2, #10
 800459e:	e039      	b.n	8004614 <_printf_i+0xd8>
 80045a0:	2973      	cmp	r1, #115	; 0x73
 80045a2:	f000 809d 	beq.w	80046e0 <_printf_i+0x1a4>
 80045a6:	d808      	bhi.n	80045ba <_printf_i+0x7e>
 80045a8:	296f      	cmp	r1, #111	; 0x6f
 80045aa:	d020      	beq.n	80045ee <_printf_i+0xb2>
 80045ac:	2970      	cmp	r1, #112	; 0x70
 80045ae:	d1dd      	bne.n	800456c <_printf_i+0x30>
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	f043 0320 	orr.w	r3, r3, #32
 80045b6:	6023      	str	r3, [r4, #0]
 80045b8:	e003      	b.n	80045c2 <_printf_i+0x86>
 80045ba:	2975      	cmp	r1, #117	; 0x75
 80045bc:	d017      	beq.n	80045ee <_printf_i+0xb2>
 80045be:	2978      	cmp	r1, #120	; 0x78
 80045c0:	d1d4      	bne.n	800456c <_printf_i+0x30>
 80045c2:	2378      	movs	r3, #120	; 0x78
 80045c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045c8:	4864      	ldr	r0, [pc, #400]	; (800475c <_printf_i+0x220>)
 80045ca:	e055      	b.n	8004678 <_printf_i+0x13c>
 80045cc:	6813      	ldr	r3, [r2, #0]
 80045ce:	1d19      	adds	r1, r3, #4
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	6011      	str	r1, [r2, #0]
 80045d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045dc:	2301      	movs	r3, #1
 80045de:	e08c      	b.n	80046fa <_printf_i+0x1be>
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	6011      	str	r1, [r2, #0]
 80045e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045e8:	bf18      	it	ne
 80045ea:	b21b      	sxthne	r3, r3
 80045ec:	e7cf      	b.n	800458e <_printf_i+0x52>
 80045ee:	6813      	ldr	r3, [r2, #0]
 80045f0:	6825      	ldr	r5, [r4, #0]
 80045f2:	1d18      	adds	r0, r3, #4
 80045f4:	6010      	str	r0, [r2, #0]
 80045f6:	0628      	lsls	r0, r5, #24
 80045f8:	d501      	bpl.n	80045fe <_printf_i+0xc2>
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	e002      	b.n	8004604 <_printf_i+0xc8>
 80045fe:	0668      	lsls	r0, r5, #25
 8004600:	d5fb      	bpl.n	80045fa <_printf_i+0xbe>
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	4854      	ldr	r0, [pc, #336]	; (8004758 <_printf_i+0x21c>)
 8004606:	296f      	cmp	r1, #111	; 0x6f
 8004608:	bf14      	ite	ne
 800460a:	220a      	movne	r2, #10
 800460c:	2208      	moveq	r2, #8
 800460e:	2100      	movs	r1, #0
 8004610:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004614:	6865      	ldr	r5, [r4, #4]
 8004616:	60a5      	str	r5, [r4, #8]
 8004618:	2d00      	cmp	r5, #0
 800461a:	f2c0 8095 	blt.w	8004748 <_printf_i+0x20c>
 800461e:	6821      	ldr	r1, [r4, #0]
 8004620:	f021 0104 	bic.w	r1, r1, #4
 8004624:	6021      	str	r1, [r4, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d13d      	bne.n	80046a6 <_printf_i+0x16a>
 800462a:	2d00      	cmp	r5, #0
 800462c:	f040 808e 	bne.w	800474c <_printf_i+0x210>
 8004630:	4665      	mov	r5, ip
 8004632:	2a08      	cmp	r2, #8
 8004634:	d10b      	bne.n	800464e <_printf_i+0x112>
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	07db      	lsls	r3, r3, #31
 800463a:	d508      	bpl.n	800464e <_printf_i+0x112>
 800463c:	6923      	ldr	r3, [r4, #16]
 800463e:	6862      	ldr	r2, [r4, #4]
 8004640:	429a      	cmp	r2, r3
 8004642:	bfde      	ittt	le
 8004644:	2330      	movle	r3, #48	; 0x30
 8004646:	f805 3c01 	strble.w	r3, [r5, #-1]
 800464a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800464e:	ebac 0305 	sub.w	r3, ip, r5
 8004652:	6123      	str	r3, [r4, #16]
 8004654:	f8cd 8000 	str.w	r8, [sp]
 8004658:	463b      	mov	r3, r7
 800465a:	aa03      	add	r2, sp, #12
 800465c:	4621      	mov	r1, r4
 800465e:	4630      	mov	r0, r6
 8004660:	f7ff fef6 	bl	8004450 <_printf_common>
 8004664:	3001      	adds	r0, #1
 8004666:	d14d      	bne.n	8004704 <_printf_i+0x1c8>
 8004668:	f04f 30ff 	mov.w	r0, #4294967295
 800466c:	b005      	add	sp, #20
 800466e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004672:	4839      	ldr	r0, [pc, #228]	; (8004758 <_printf_i+0x21c>)
 8004674:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004678:	6813      	ldr	r3, [r2, #0]
 800467a:	6821      	ldr	r1, [r4, #0]
 800467c:	1d1d      	adds	r5, r3, #4
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6015      	str	r5, [r2, #0]
 8004682:	060a      	lsls	r2, r1, #24
 8004684:	d50b      	bpl.n	800469e <_printf_i+0x162>
 8004686:	07ca      	lsls	r2, r1, #31
 8004688:	bf44      	itt	mi
 800468a:	f041 0120 	orrmi.w	r1, r1, #32
 800468e:	6021      	strmi	r1, [r4, #0]
 8004690:	b91b      	cbnz	r3, 800469a <_printf_i+0x15e>
 8004692:	6822      	ldr	r2, [r4, #0]
 8004694:	f022 0220 	bic.w	r2, r2, #32
 8004698:	6022      	str	r2, [r4, #0]
 800469a:	2210      	movs	r2, #16
 800469c:	e7b7      	b.n	800460e <_printf_i+0xd2>
 800469e:	064d      	lsls	r5, r1, #25
 80046a0:	bf48      	it	mi
 80046a2:	b29b      	uxthmi	r3, r3
 80046a4:	e7ef      	b.n	8004686 <_printf_i+0x14a>
 80046a6:	4665      	mov	r5, ip
 80046a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80046ac:	fb02 3311 	mls	r3, r2, r1, r3
 80046b0:	5cc3      	ldrb	r3, [r0, r3]
 80046b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80046b6:	460b      	mov	r3, r1
 80046b8:	2900      	cmp	r1, #0
 80046ba:	d1f5      	bne.n	80046a8 <_printf_i+0x16c>
 80046bc:	e7b9      	b.n	8004632 <_printf_i+0xf6>
 80046be:	6813      	ldr	r3, [r2, #0]
 80046c0:	6825      	ldr	r5, [r4, #0]
 80046c2:	6961      	ldr	r1, [r4, #20]
 80046c4:	1d18      	adds	r0, r3, #4
 80046c6:	6010      	str	r0, [r2, #0]
 80046c8:	0628      	lsls	r0, r5, #24
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	d501      	bpl.n	80046d2 <_printf_i+0x196>
 80046ce:	6019      	str	r1, [r3, #0]
 80046d0:	e002      	b.n	80046d8 <_printf_i+0x19c>
 80046d2:	066a      	lsls	r2, r5, #25
 80046d4:	d5fb      	bpl.n	80046ce <_printf_i+0x192>
 80046d6:	8019      	strh	r1, [r3, #0]
 80046d8:	2300      	movs	r3, #0
 80046da:	6123      	str	r3, [r4, #16]
 80046dc:	4665      	mov	r5, ip
 80046de:	e7b9      	b.n	8004654 <_printf_i+0x118>
 80046e0:	6813      	ldr	r3, [r2, #0]
 80046e2:	1d19      	adds	r1, r3, #4
 80046e4:	6011      	str	r1, [r2, #0]
 80046e6:	681d      	ldr	r5, [r3, #0]
 80046e8:	6862      	ldr	r2, [r4, #4]
 80046ea:	2100      	movs	r1, #0
 80046ec:	4628      	mov	r0, r5
 80046ee:	f7fb feff 	bl	80004f0 <memchr>
 80046f2:	b108      	cbz	r0, 80046f8 <_printf_i+0x1bc>
 80046f4:	1b40      	subs	r0, r0, r5
 80046f6:	6060      	str	r0, [r4, #4]
 80046f8:	6863      	ldr	r3, [r4, #4]
 80046fa:	6123      	str	r3, [r4, #16]
 80046fc:	2300      	movs	r3, #0
 80046fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004702:	e7a7      	b.n	8004654 <_printf_i+0x118>
 8004704:	6923      	ldr	r3, [r4, #16]
 8004706:	462a      	mov	r2, r5
 8004708:	4639      	mov	r1, r7
 800470a:	4630      	mov	r0, r6
 800470c:	47c0      	blx	r8
 800470e:	3001      	adds	r0, #1
 8004710:	d0aa      	beq.n	8004668 <_printf_i+0x12c>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	079b      	lsls	r3, r3, #30
 8004716:	d413      	bmi.n	8004740 <_printf_i+0x204>
 8004718:	68e0      	ldr	r0, [r4, #12]
 800471a:	9b03      	ldr	r3, [sp, #12]
 800471c:	4298      	cmp	r0, r3
 800471e:	bfb8      	it	lt
 8004720:	4618      	movlt	r0, r3
 8004722:	e7a3      	b.n	800466c <_printf_i+0x130>
 8004724:	2301      	movs	r3, #1
 8004726:	464a      	mov	r2, r9
 8004728:	4639      	mov	r1, r7
 800472a:	4630      	mov	r0, r6
 800472c:	47c0      	blx	r8
 800472e:	3001      	adds	r0, #1
 8004730:	d09a      	beq.n	8004668 <_printf_i+0x12c>
 8004732:	3501      	adds	r5, #1
 8004734:	68e3      	ldr	r3, [r4, #12]
 8004736:	9a03      	ldr	r2, [sp, #12]
 8004738:	1a9b      	subs	r3, r3, r2
 800473a:	42ab      	cmp	r3, r5
 800473c:	dcf2      	bgt.n	8004724 <_printf_i+0x1e8>
 800473e:	e7eb      	b.n	8004718 <_printf_i+0x1dc>
 8004740:	2500      	movs	r5, #0
 8004742:	f104 0919 	add.w	r9, r4, #25
 8004746:	e7f5      	b.n	8004734 <_printf_i+0x1f8>
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1ac      	bne.n	80046a6 <_printf_i+0x16a>
 800474c:	7803      	ldrb	r3, [r0, #0]
 800474e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004752:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004756:	e76c      	b.n	8004632 <_printf_i+0xf6>
 8004758:	08008312 	.word	0x08008312
 800475c:	08008323 	.word	0x08008323

08004760 <_scanf_float>:
 8004760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004764:	469a      	mov	sl, r3
 8004766:	688b      	ldr	r3, [r1, #8]
 8004768:	4616      	mov	r6, r2
 800476a:	1e5a      	subs	r2, r3, #1
 800476c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004770:	b087      	sub	sp, #28
 8004772:	bf83      	ittte	hi
 8004774:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004778:	189b      	addhi	r3, r3, r2
 800477a:	9301      	strhi	r3, [sp, #4]
 800477c:	2300      	movls	r3, #0
 800477e:	bf86      	itte	hi
 8004780:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004784:	608b      	strhi	r3, [r1, #8]
 8004786:	9301      	strls	r3, [sp, #4]
 8004788:	680b      	ldr	r3, [r1, #0]
 800478a:	4688      	mov	r8, r1
 800478c:	f04f 0b00 	mov.w	fp, #0
 8004790:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004794:	f848 3b1c 	str.w	r3, [r8], #28
 8004798:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800479c:	4607      	mov	r7, r0
 800479e:	460c      	mov	r4, r1
 80047a0:	4645      	mov	r5, r8
 80047a2:	465a      	mov	r2, fp
 80047a4:	46d9      	mov	r9, fp
 80047a6:	f8cd b008 	str.w	fp, [sp, #8]
 80047aa:	68a1      	ldr	r1, [r4, #8]
 80047ac:	b181      	cbz	r1, 80047d0 <_scanf_float+0x70>
 80047ae:	6833      	ldr	r3, [r6, #0]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b49      	cmp	r3, #73	; 0x49
 80047b4:	d071      	beq.n	800489a <_scanf_float+0x13a>
 80047b6:	d84d      	bhi.n	8004854 <_scanf_float+0xf4>
 80047b8:	2b39      	cmp	r3, #57	; 0x39
 80047ba:	d840      	bhi.n	800483e <_scanf_float+0xde>
 80047bc:	2b31      	cmp	r3, #49	; 0x31
 80047be:	f080 8088 	bcs.w	80048d2 <_scanf_float+0x172>
 80047c2:	2b2d      	cmp	r3, #45	; 0x2d
 80047c4:	f000 8090 	beq.w	80048e8 <_scanf_float+0x188>
 80047c8:	d815      	bhi.n	80047f6 <_scanf_float+0x96>
 80047ca:	2b2b      	cmp	r3, #43	; 0x2b
 80047cc:	f000 808c 	beq.w	80048e8 <_scanf_float+0x188>
 80047d0:	f1b9 0f00 	cmp.w	r9, #0
 80047d4:	d003      	beq.n	80047de <_scanf_float+0x7e>
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	3a01      	subs	r2, #1
 80047e0:	2a01      	cmp	r2, #1
 80047e2:	f200 80ea 	bhi.w	80049ba <_scanf_float+0x25a>
 80047e6:	4545      	cmp	r5, r8
 80047e8:	f200 80dc 	bhi.w	80049a4 <_scanf_float+0x244>
 80047ec:	2601      	movs	r6, #1
 80047ee:	4630      	mov	r0, r6
 80047f0:	b007      	add	sp, #28
 80047f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f6:	2b2e      	cmp	r3, #46	; 0x2e
 80047f8:	f000 809f 	beq.w	800493a <_scanf_float+0x1da>
 80047fc:	2b30      	cmp	r3, #48	; 0x30
 80047fe:	d1e7      	bne.n	80047d0 <_scanf_float+0x70>
 8004800:	6820      	ldr	r0, [r4, #0]
 8004802:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004806:	d064      	beq.n	80048d2 <_scanf_float+0x172>
 8004808:	9b01      	ldr	r3, [sp, #4]
 800480a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800480e:	6020      	str	r0, [r4, #0]
 8004810:	f109 0901 	add.w	r9, r9, #1
 8004814:	b11b      	cbz	r3, 800481e <_scanf_float+0xbe>
 8004816:	3b01      	subs	r3, #1
 8004818:	3101      	adds	r1, #1
 800481a:	9301      	str	r3, [sp, #4]
 800481c:	60a1      	str	r1, [r4, #8]
 800481e:	68a3      	ldr	r3, [r4, #8]
 8004820:	3b01      	subs	r3, #1
 8004822:	60a3      	str	r3, [r4, #8]
 8004824:	6923      	ldr	r3, [r4, #16]
 8004826:	3301      	adds	r3, #1
 8004828:	6123      	str	r3, [r4, #16]
 800482a:	6873      	ldr	r3, [r6, #4]
 800482c:	3b01      	subs	r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	6073      	str	r3, [r6, #4]
 8004832:	f340 80ac 	ble.w	800498e <_scanf_float+0x22e>
 8004836:	6833      	ldr	r3, [r6, #0]
 8004838:	3301      	adds	r3, #1
 800483a:	6033      	str	r3, [r6, #0]
 800483c:	e7b5      	b.n	80047aa <_scanf_float+0x4a>
 800483e:	2b45      	cmp	r3, #69	; 0x45
 8004840:	f000 8085 	beq.w	800494e <_scanf_float+0x1ee>
 8004844:	2b46      	cmp	r3, #70	; 0x46
 8004846:	d06a      	beq.n	800491e <_scanf_float+0x1be>
 8004848:	2b41      	cmp	r3, #65	; 0x41
 800484a:	d1c1      	bne.n	80047d0 <_scanf_float+0x70>
 800484c:	2a01      	cmp	r2, #1
 800484e:	d1bf      	bne.n	80047d0 <_scanf_float+0x70>
 8004850:	2202      	movs	r2, #2
 8004852:	e046      	b.n	80048e2 <_scanf_float+0x182>
 8004854:	2b65      	cmp	r3, #101	; 0x65
 8004856:	d07a      	beq.n	800494e <_scanf_float+0x1ee>
 8004858:	d818      	bhi.n	800488c <_scanf_float+0x12c>
 800485a:	2b54      	cmp	r3, #84	; 0x54
 800485c:	d066      	beq.n	800492c <_scanf_float+0x1cc>
 800485e:	d811      	bhi.n	8004884 <_scanf_float+0x124>
 8004860:	2b4e      	cmp	r3, #78	; 0x4e
 8004862:	d1b5      	bne.n	80047d0 <_scanf_float+0x70>
 8004864:	2a00      	cmp	r2, #0
 8004866:	d146      	bne.n	80048f6 <_scanf_float+0x196>
 8004868:	f1b9 0f00 	cmp.w	r9, #0
 800486c:	d145      	bne.n	80048fa <_scanf_float+0x19a>
 800486e:	6821      	ldr	r1, [r4, #0]
 8004870:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004874:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004878:	d13f      	bne.n	80048fa <_scanf_float+0x19a>
 800487a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800487e:	6021      	str	r1, [r4, #0]
 8004880:	2201      	movs	r2, #1
 8004882:	e02e      	b.n	80048e2 <_scanf_float+0x182>
 8004884:	2b59      	cmp	r3, #89	; 0x59
 8004886:	d01e      	beq.n	80048c6 <_scanf_float+0x166>
 8004888:	2b61      	cmp	r3, #97	; 0x61
 800488a:	e7de      	b.n	800484a <_scanf_float+0xea>
 800488c:	2b6e      	cmp	r3, #110	; 0x6e
 800488e:	d0e9      	beq.n	8004864 <_scanf_float+0x104>
 8004890:	d815      	bhi.n	80048be <_scanf_float+0x15e>
 8004892:	2b66      	cmp	r3, #102	; 0x66
 8004894:	d043      	beq.n	800491e <_scanf_float+0x1be>
 8004896:	2b69      	cmp	r3, #105	; 0x69
 8004898:	d19a      	bne.n	80047d0 <_scanf_float+0x70>
 800489a:	f1bb 0f00 	cmp.w	fp, #0
 800489e:	d138      	bne.n	8004912 <_scanf_float+0x1b2>
 80048a0:	f1b9 0f00 	cmp.w	r9, #0
 80048a4:	d197      	bne.n	80047d6 <_scanf_float+0x76>
 80048a6:	6821      	ldr	r1, [r4, #0]
 80048a8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80048ac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80048b0:	d195      	bne.n	80047de <_scanf_float+0x7e>
 80048b2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80048b6:	6021      	str	r1, [r4, #0]
 80048b8:	f04f 0b01 	mov.w	fp, #1
 80048bc:	e011      	b.n	80048e2 <_scanf_float+0x182>
 80048be:	2b74      	cmp	r3, #116	; 0x74
 80048c0:	d034      	beq.n	800492c <_scanf_float+0x1cc>
 80048c2:	2b79      	cmp	r3, #121	; 0x79
 80048c4:	d184      	bne.n	80047d0 <_scanf_float+0x70>
 80048c6:	f1bb 0f07 	cmp.w	fp, #7
 80048ca:	d181      	bne.n	80047d0 <_scanf_float+0x70>
 80048cc:	f04f 0b08 	mov.w	fp, #8
 80048d0:	e007      	b.n	80048e2 <_scanf_float+0x182>
 80048d2:	eb12 0f0b 	cmn.w	r2, fp
 80048d6:	f47f af7b 	bne.w	80047d0 <_scanf_float+0x70>
 80048da:	6821      	ldr	r1, [r4, #0]
 80048dc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80048e0:	6021      	str	r1, [r4, #0]
 80048e2:	702b      	strb	r3, [r5, #0]
 80048e4:	3501      	adds	r5, #1
 80048e6:	e79a      	b.n	800481e <_scanf_float+0xbe>
 80048e8:	6821      	ldr	r1, [r4, #0]
 80048ea:	0608      	lsls	r0, r1, #24
 80048ec:	f57f af70 	bpl.w	80047d0 <_scanf_float+0x70>
 80048f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80048f4:	e7f4      	b.n	80048e0 <_scanf_float+0x180>
 80048f6:	2a02      	cmp	r2, #2
 80048f8:	d047      	beq.n	800498a <_scanf_float+0x22a>
 80048fa:	f1bb 0f01 	cmp.w	fp, #1
 80048fe:	d003      	beq.n	8004908 <_scanf_float+0x1a8>
 8004900:	f1bb 0f04 	cmp.w	fp, #4
 8004904:	f47f af64 	bne.w	80047d0 <_scanf_float+0x70>
 8004908:	f10b 0b01 	add.w	fp, fp, #1
 800490c:	fa5f fb8b 	uxtb.w	fp, fp
 8004910:	e7e7      	b.n	80048e2 <_scanf_float+0x182>
 8004912:	f1bb 0f03 	cmp.w	fp, #3
 8004916:	d0f7      	beq.n	8004908 <_scanf_float+0x1a8>
 8004918:	f1bb 0f05 	cmp.w	fp, #5
 800491c:	e7f2      	b.n	8004904 <_scanf_float+0x1a4>
 800491e:	f1bb 0f02 	cmp.w	fp, #2
 8004922:	f47f af55 	bne.w	80047d0 <_scanf_float+0x70>
 8004926:	f04f 0b03 	mov.w	fp, #3
 800492a:	e7da      	b.n	80048e2 <_scanf_float+0x182>
 800492c:	f1bb 0f06 	cmp.w	fp, #6
 8004930:	f47f af4e 	bne.w	80047d0 <_scanf_float+0x70>
 8004934:	f04f 0b07 	mov.w	fp, #7
 8004938:	e7d3      	b.n	80048e2 <_scanf_float+0x182>
 800493a:	6821      	ldr	r1, [r4, #0]
 800493c:	0588      	lsls	r0, r1, #22
 800493e:	f57f af47 	bpl.w	80047d0 <_scanf_float+0x70>
 8004942:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004946:	6021      	str	r1, [r4, #0]
 8004948:	f8cd 9008 	str.w	r9, [sp, #8]
 800494c:	e7c9      	b.n	80048e2 <_scanf_float+0x182>
 800494e:	6821      	ldr	r1, [r4, #0]
 8004950:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004954:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004958:	d006      	beq.n	8004968 <_scanf_float+0x208>
 800495a:	0548      	lsls	r0, r1, #21
 800495c:	f57f af38 	bpl.w	80047d0 <_scanf_float+0x70>
 8004960:	f1b9 0f00 	cmp.w	r9, #0
 8004964:	f43f af3b 	beq.w	80047de <_scanf_float+0x7e>
 8004968:	0588      	lsls	r0, r1, #22
 800496a:	bf58      	it	pl
 800496c:	9802      	ldrpl	r0, [sp, #8]
 800496e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004972:	bf58      	it	pl
 8004974:	eba9 0000 	subpl.w	r0, r9, r0
 8004978:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800497c:	bf58      	it	pl
 800497e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004982:	6021      	str	r1, [r4, #0]
 8004984:	f04f 0900 	mov.w	r9, #0
 8004988:	e7ab      	b.n	80048e2 <_scanf_float+0x182>
 800498a:	2203      	movs	r2, #3
 800498c:	e7a9      	b.n	80048e2 <_scanf_float+0x182>
 800498e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004992:	9205      	str	r2, [sp, #20]
 8004994:	4631      	mov	r1, r6
 8004996:	4638      	mov	r0, r7
 8004998:	4798      	blx	r3
 800499a:	9a05      	ldr	r2, [sp, #20]
 800499c:	2800      	cmp	r0, #0
 800499e:	f43f af04 	beq.w	80047aa <_scanf_float+0x4a>
 80049a2:	e715      	b.n	80047d0 <_scanf_float+0x70>
 80049a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80049a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80049ac:	4632      	mov	r2, r6
 80049ae:	4638      	mov	r0, r7
 80049b0:	4798      	blx	r3
 80049b2:	6923      	ldr	r3, [r4, #16]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	6123      	str	r3, [r4, #16]
 80049b8:	e715      	b.n	80047e6 <_scanf_float+0x86>
 80049ba:	f10b 33ff 	add.w	r3, fp, #4294967295
 80049be:	2b06      	cmp	r3, #6
 80049c0:	d80a      	bhi.n	80049d8 <_scanf_float+0x278>
 80049c2:	f1bb 0f02 	cmp.w	fp, #2
 80049c6:	d968      	bls.n	8004a9a <_scanf_float+0x33a>
 80049c8:	f1ab 0b03 	sub.w	fp, fp, #3
 80049cc:	fa5f fb8b 	uxtb.w	fp, fp
 80049d0:	eba5 0b0b 	sub.w	fp, r5, fp
 80049d4:	455d      	cmp	r5, fp
 80049d6:	d14b      	bne.n	8004a70 <_scanf_float+0x310>
 80049d8:	6823      	ldr	r3, [r4, #0]
 80049da:	05da      	lsls	r2, r3, #23
 80049dc:	d51f      	bpl.n	8004a1e <_scanf_float+0x2be>
 80049de:	055b      	lsls	r3, r3, #21
 80049e0:	d468      	bmi.n	8004ab4 <_scanf_float+0x354>
 80049e2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80049e6:	6923      	ldr	r3, [r4, #16]
 80049e8:	2965      	cmp	r1, #101	; 0x65
 80049ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80049ee:	f105 3bff 	add.w	fp, r5, #4294967295
 80049f2:	6123      	str	r3, [r4, #16]
 80049f4:	d00d      	beq.n	8004a12 <_scanf_float+0x2b2>
 80049f6:	2945      	cmp	r1, #69	; 0x45
 80049f8:	d00b      	beq.n	8004a12 <_scanf_float+0x2b2>
 80049fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80049fe:	4632      	mov	r2, r6
 8004a00:	4638      	mov	r0, r7
 8004a02:	4798      	blx	r3
 8004a04:	6923      	ldr	r3, [r4, #16]
 8004a06:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	f1a5 0b02 	sub.w	fp, r5, #2
 8004a10:	6123      	str	r3, [r4, #16]
 8004a12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a16:	4632      	mov	r2, r6
 8004a18:	4638      	mov	r0, r7
 8004a1a:	4798      	blx	r3
 8004a1c:	465d      	mov	r5, fp
 8004a1e:	6826      	ldr	r6, [r4, #0]
 8004a20:	f016 0610 	ands.w	r6, r6, #16
 8004a24:	d17a      	bne.n	8004b1c <_scanf_float+0x3bc>
 8004a26:	702e      	strb	r6, [r5, #0]
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a32:	d142      	bne.n	8004aba <_scanf_float+0x35a>
 8004a34:	9b02      	ldr	r3, [sp, #8]
 8004a36:	eba9 0303 	sub.w	r3, r9, r3
 8004a3a:	425a      	negs	r2, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d149      	bne.n	8004ad4 <_scanf_float+0x374>
 8004a40:	2200      	movs	r2, #0
 8004a42:	4641      	mov	r1, r8
 8004a44:	4638      	mov	r0, r7
 8004a46:	f000 ffb7 	bl	80059b8 <_strtod_r>
 8004a4a:	6825      	ldr	r5, [r4, #0]
 8004a4c:	f8da 3000 	ldr.w	r3, [sl]
 8004a50:	f015 0f02 	tst.w	r5, #2
 8004a54:	f103 0204 	add.w	r2, r3, #4
 8004a58:	ec59 8b10 	vmov	r8, r9, d0
 8004a5c:	f8ca 2000 	str.w	r2, [sl]
 8004a60:	d043      	beq.n	8004aea <_scanf_float+0x38a>
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	e9c3 8900 	strd	r8, r9, [r3]
 8004a68:	68e3      	ldr	r3, [r4, #12]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	60e3      	str	r3, [r4, #12]
 8004a6e:	e6be      	b.n	80047ee <_scanf_float+0x8e>
 8004a70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a74:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004a78:	4632      	mov	r2, r6
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	4798      	blx	r3
 8004a7e:	6923      	ldr	r3, [r4, #16]
 8004a80:	3b01      	subs	r3, #1
 8004a82:	6123      	str	r3, [r4, #16]
 8004a84:	e7a6      	b.n	80049d4 <_scanf_float+0x274>
 8004a86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a8a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004a8e:	4632      	mov	r2, r6
 8004a90:	4638      	mov	r0, r7
 8004a92:	4798      	blx	r3
 8004a94:	6923      	ldr	r3, [r4, #16]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	6123      	str	r3, [r4, #16]
 8004a9a:	4545      	cmp	r5, r8
 8004a9c:	d8f3      	bhi.n	8004a86 <_scanf_float+0x326>
 8004a9e:	e6a5      	b.n	80047ec <_scanf_float+0x8c>
 8004aa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004aa4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004aa8:	4632      	mov	r2, r6
 8004aaa:	4638      	mov	r0, r7
 8004aac:	4798      	blx	r3
 8004aae:	6923      	ldr	r3, [r4, #16]
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	6123      	str	r3, [r4, #16]
 8004ab4:	4545      	cmp	r5, r8
 8004ab6:	d8f3      	bhi.n	8004aa0 <_scanf_float+0x340>
 8004ab8:	e698      	b.n	80047ec <_scanf_float+0x8c>
 8004aba:	9b03      	ldr	r3, [sp, #12]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0bf      	beq.n	8004a40 <_scanf_float+0x2e0>
 8004ac0:	9904      	ldr	r1, [sp, #16]
 8004ac2:	230a      	movs	r3, #10
 8004ac4:	4632      	mov	r2, r6
 8004ac6:	3101      	adds	r1, #1
 8004ac8:	4638      	mov	r0, r7
 8004aca:	f001 f801 	bl	8005ad0 <_strtol_r>
 8004ace:	9b03      	ldr	r3, [sp, #12]
 8004ad0:	9d04      	ldr	r5, [sp, #16]
 8004ad2:	1ac2      	subs	r2, r0, r3
 8004ad4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004ad8:	429d      	cmp	r5, r3
 8004ada:	bf28      	it	cs
 8004adc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004ae0:	490f      	ldr	r1, [pc, #60]	; (8004b20 <_scanf_float+0x3c0>)
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	f000 f936 	bl	8004d54 <siprintf>
 8004ae8:	e7aa      	b.n	8004a40 <_scanf_float+0x2e0>
 8004aea:	f015 0504 	ands.w	r5, r5, #4
 8004aee:	d1b8      	bne.n	8004a62 <_scanf_float+0x302>
 8004af0:	681f      	ldr	r7, [r3, #0]
 8004af2:	ee10 2a10 	vmov	r2, s0
 8004af6:	464b      	mov	r3, r9
 8004af8:	ee10 0a10 	vmov	r0, s0
 8004afc:	4649      	mov	r1, r9
 8004afe:	f7fc f99d 	bl	8000e3c <__aeabi_dcmpun>
 8004b02:	b128      	cbz	r0, 8004b10 <_scanf_float+0x3b0>
 8004b04:	4628      	mov	r0, r5
 8004b06:	f000 f91f 	bl	8004d48 <nanf>
 8004b0a:	ed87 0a00 	vstr	s0, [r7]
 8004b0e:	e7ab      	b.n	8004a68 <_scanf_float+0x308>
 8004b10:	4640      	mov	r0, r8
 8004b12:	4649      	mov	r1, r9
 8004b14:	f7fc f9f0 	bl	8000ef8 <__aeabi_d2f>
 8004b18:	6038      	str	r0, [r7, #0]
 8004b1a:	e7a5      	b.n	8004a68 <_scanf_float+0x308>
 8004b1c:	2600      	movs	r6, #0
 8004b1e:	e666      	b.n	80047ee <_scanf_float+0x8e>
 8004b20:	08008334 	.word	0x08008334

08004b24 <_puts_r>:
 8004b24:	b570      	push	{r4, r5, r6, lr}
 8004b26:	460e      	mov	r6, r1
 8004b28:	4605      	mov	r5, r0
 8004b2a:	b118      	cbz	r0, 8004b34 <_puts_r+0x10>
 8004b2c:	6983      	ldr	r3, [r0, #24]
 8004b2e:	b90b      	cbnz	r3, 8004b34 <_puts_r+0x10>
 8004b30:	f001 ffd6 	bl	8006ae0 <__sinit>
 8004b34:	69ab      	ldr	r3, [r5, #24]
 8004b36:	68ac      	ldr	r4, [r5, #8]
 8004b38:	b913      	cbnz	r3, 8004b40 <_puts_r+0x1c>
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	f001 ffd0 	bl	8006ae0 <__sinit>
 8004b40:	4b23      	ldr	r3, [pc, #140]	; (8004bd0 <_puts_r+0xac>)
 8004b42:	429c      	cmp	r4, r3
 8004b44:	d117      	bne.n	8004b76 <_puts_r+0x52>
 8004b46:	686c      	ldr	r4, [r5, #4]
 8004b48:	89a3      	ldrh	r3, [r4, #12]
 8004b4a:	071b      	lsls	r3, r3, #28
 8004b4c:	d51d      	bpl.n	8004b8a <_puts_r+0x66>
 8004b4e:	6923      	ldr	r3, [r4, #16]
 8004b50:	b1db      	cbz	r3, 8004b8a <_puts_r+0x66>
 8004b52:	3e01      	subs	r6, #1
 8004b54:	68a3      	ldr	r3, [r4, #8]
 8004b56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	60a3      	str	r3, [r4, #8]
 8004b5e:	b9e9      	cbnz	r1, 8004b9c <_puts_r+0x78>
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	da2e      	bge.n	8004bc2 <_puts_r+0x9e>
 8004b64:	4622      	mov	r2, r4
 8004b66:	210a      	movs	r1, #10
 8004b68:	4628      	mov	r0, r5
 8004b6a:	f000 ffc3 	bl	8005af4 <__swbuf_r>
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d011      	beq.n	8004b96 <_puts_r+0x72>
 8004b72:	200a      	movs	r0, #10
 8004b74:	e011      	b.n	8004b9a <_puts_r+0x76>
 8004b76:	4b17      	ldr	r3, [pc, #92]	; (8004bd4 <_puts_r+0xb0>)
 8004b78:	429c      	cmp	r4, r3
 8004b7a:	d101      	bne.n	8004b80 <_puts_r+0x5c>
 8004b7c:	68ac      	ldr	r4, [r5, #8]
 8004b7e:	e7e3      	b.n	8004b48 <_puts_r+0x24>
 8004b80:	4b15      	ldr	r3, [pc, #84]	; (8004bd8 <_puts_r+0xb4>)
 8004b82:	429c      	cmp	r4, r3
 8004b84:	bf08      	it	eq
 8004b86:	68ec      	ldreq	r4, [r5, #12]
 8004b88:	e7de      	b.n	8004b48 <_puts_r+0x24>
 8004b8a:	4621      	mov	r1, r4
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	f001 f803 	bl	8005b98 <__swsetup_r>
 8004b92:	2800      	cmp	r0, #0
 8004b94:	d0dd      	beq.n	8004b52 <_puts_r+0x2e>
 8004b96:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	da04      	bge.n	8004baa <_puts_r+0x86>
 8004ba0:	69a2      	ldr	r2, [r4, #24]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	dc06      	bgt.n	8004bb4 <_puts_r+0x90>
 8004ba6:	290a      	cmp	r1, #10
 8004ba8:	d004      	beq.n	8004bb4 <_puts_r+0x90>
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	6022      	str	r2, [r4, #0]
 8004bb0:	7019      	strb	r1, [r3, #0]
 8004bb2:	e7cf      	b.n	8004b54 <_puts_r+0x30>
 8004bb4:	4622      	mov	r2, r4
 8004bb6:	4628      	mov	r0, r5
 8004bb8:	f000 ff9c 	bl	8005af4 <__swbuf_r>
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	d1c9      	bne.n	8004b54 <_puts_r+0x30>
 8004bc0:	e7e9      	b.n	8004b96 <_puts_r+0x72>
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	200a      	movs	r0, #10
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	6022      	str	r2, [r4, #0]
 8004bca:	7018      	strb	r0, [r3, #0]
 8004bcc:	e7e5      	b.n	8004b9a <_puts_r+0x76>
 8004bce:	bf00      	nop
 8004bd0:	080083c0 	.word	0x080083c0
 8004bd4:	080083e0 	.word	0x080083e0
 8004bd8:	080083a0 	.word	0x080083a0

08004bdc <puts>:
 8004bdc:	4b02      	ldr	r3, [pc, #8]	; (8004be8 <puts+0xc>)
 8004bde:	4601      	mov	r1, r0
 8004be0:	6818      	ldr	r0, [r3, #0]
 8004be2:	f7ff bf9f 	b.w	8004b24 <_puts_r>
 8004be6:	bf00      	nop
 8004be8:	2000000c 	.word	0x2000000c

08004bec <setvbuf>:
 8004bec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004bf0:	461d      	mov	r5, r3
 8004bf2:	4b51      	ldr	r3, [pc, #324]	; (8004d38 <setvbuf+0x14c>)
 8004bf4:	681e      	ldr	r6, [r3, #0]
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	460f      	mov	r7, r1
 8004bfa:	4690      	mov	r8, r2
 8004bfc:	b126      	cbz	r6, 8004c08 <setvbuf+0x1c>
 8004bfe:	69b3      	ldr	r3, [r6, #24]
 8004c00:	b913      	cbnz	r3, 8004c08 <setvbuf+0x1c>
 8004c02:	4630      	mov	r0, r6
 8004c04:	f001 ff6c 	bl	8006ae0 <__sinit>
 8004c08:	4b4c      	ldr	r3, [pc, #304]	; (8004d3c <setvbuf+0x150>)
 8004c0a:	429c      	cmp	r4, r3
 8004c0c:	d152      	bne.n	8004cb4 <setvbuf+0xc8>
 8004c0e:	6874      	ldr	r4, [r6, #4]
 8004c10:	f1b8 0f02 	cmp.w	r8, #2
 8004c14:	d006      	beq.n	8004c24 <setvbuf+0x38>
 8004c16:	f1b8 0f01 	cmp.w	r8, #1
 8004c1a:	f200 8089 	bhi.w	8004d30 <setvbuf+0x144>
 8004c1e:	2d00      	cmp	r5, #0
 8004c20:	f2c0 8086 	blt.w	8004d30 <setvbuf+0x144>
 8004c24:	4621      	mov	r1, r4
 8004c26:	4630      	mov	r0, r6
 8004c28:	f001 fef0 	bl	8006a0c <_fflush_r>
 8004c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c2e:	b141      	cbz	r1, 8004c42 <setvbuf+0x56>
 8004c30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c34:	4299      	cmp	r1, r3
 8004c36:	d002      	beq.n	8004c3e <setvbuf+0x52>
 8004c38:	4630      	mov	r0, r6
 8004c3a:	f002 ffa1 	bl	8007b80 <_free_r>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	6363      	str	r3, [r4, #52]	; 0x34
 8004c42:	2300      	movs	r3, #0
 8004c44:	61a3      	str	r3, [r4, #24]
 8004c46:	6063      	str	r3, [r4, #4]
 8004c48:	89a3      	ldrh	r3, [r4, #12]
 8004c4a:	061b      	lsls	r3, r3, #24
 8004c4c:	d503      	bpl.n	8004c56 <setvbuf+0x6a>
 8004c4e:	6921      	ldr	r1, [r4, #16]
 8004c50:	4630      	mov	r0, r6
 8004c52:	f002 ff95 	bl	8007b80 <_free_r>
 8004c56:	89a3      	ldrh	r3, [r4, #12]
 8004c58:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8004c5c:	f023 0303 	bic.w	r3, r3, #3
 8004c60:	f1b8 0f02 	cmp.w	r8, #2
 8004c64:	81a3      	strh	r3, [r4, #12]
 8004c66:	d05d      	beq.n	8004d24 <setvbuf+0x138>
 8004c68:	ab01      	add	r3, sp, #4
 8004c6a:	466a      	mov	r2, sp
 8004c6c:	4621      	mov	r1, r4
 8004c6e:	4630      	mov	r0, r6
 8004c70:	f002 fafa 	bl	8007268 <__swhatbuf_r>
 8004c74:	89a3      	ldrh	r3, [r4, #12]
 8004c76:	4318      	orrs	r0, r3
 8004c78:	81a0      	strh	r0, [r4, #12]
 8004c7a:	bb2d      	cbnz	r5, 8004cc8 <setvbuf+0xdc>
 8004c7c:	9d00      	ldr	r5, [sp, #0]
 8004c7e:	4628      	mov	r0, r5
 8004c80:	f002 fb56 	bl	8007330 <malloc>
 8004c84:	4607      	mov	r7, r0
 8004c86:	2800      	cmp	r0, #0
 8004c88:	d14e      	bne.n	8004d28 <setvbuf+0x13c>
 8004c8a:	f8dd 9000 	ldr.w	r9, [sp]
 8004c8e:	45a9      	cmp	r9, r5
 8004c90:	d13c      	bne.n	8004d0c <setvbuf+0x120>
 8004c92:	f04f 30ff 	mov.w	r0, #4294967295
 8004c96:	89a3      	ldrh	r3, [r4, #12]
 8004c98:	f043 0302 	orr.w	r3, r3, #2
 8004c9c:	81a3      	strh	r3, [r4, #12]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60a3      	str	r3, [r4, #8]
 8004ca2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ca6:	6023      	str	r3, [r4, #0]
 8004ca8:	6123      	str	r3, [r4, #16]
 8004caa:	2301      	movs	r3, #1
 8004cac:	6163      	str	r3, [r4, #20]
 8004cae:	b003      	add	sp, #12
 8004cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cb4:	4b22      	ldr	r3, [pc, #136]	; (8004d40 <setvbuf+0x154>)
 8004cb6:	429c      	cmp	r4, r3
 8004cb8:	d101      	bne.n	8004cbe <setvbuf+0xd2>
 8004cba:	68b4      	ldr	r4, [r6, #8]
 8004cbc:	e7a8      	b.n	8004c10 <setvbuf+0x24>
 8004cbe:	4b21      	ldr	r3, [pc, #132]	; (8004d44 <setvbuf+0x158>)
 8004cc0:	429c      	cmp	r4, r3
 8004cc2:	bf08      	it	eq
 8004cc4:	68f4      	ldreq	r4, [r6, #12]
 8004cc6:	e7a3      	b.n	8004c10 <setvbuf+0x24>
 8004cc8:	2f00      	cmp	r7, #0
 8004cca:	d0d8      	beq.n	8004c7e <setvbuf+0x92>
 8004ccc:	69b3      	ldr	r3, [r6, #24]
 8004cce:	b913      	cbnz	r3, 8004cd6 <setvbuf+0xea>
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	f001 ff05 	bl	8006ae0 <__sinit>
 8004cd6:	f1b8 0f01 	cmp.w	r8, #1
 8004cda:	bf08      	it	eq
 8004cdc:	89a3      	ldrheq	r3, [r4, #12]
 8004cde:	6027      	str	r7, [r4, #0]
 8004ce0:	bf04      	itt	eq
 8004ce2:	f043 0301 	orreq.w	r3, r3, #1
 8004ce6:	81a3      	strheq	r3, [r4, #12]
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	f013 0008 	ands.w	r0, r3, #8
 8004cee:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8004cf2:	d01b      	beq.n	8004d2c <setvbuf+0x140>
 8004cf4:	f013 0001 	ands.w	r0, r3, #1
 8004cf8:	bf18      	it	ne
 8004cfa:	426d      	negne	r5, r5
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	bf1d      	ittte	ne
 8004d02:	60a3      	strne	r3, [r4, #8]
 8004d04:	61a5      	strne	r5, [r4, #24]
 8004d06:	4618      	movne	r0, r3
 8004d08:	60a5      	streq	r5, [r4, #8]
 8004d0a:	e7d0      	b.n	8004cae <setvbuf+0xc2>
 8004d0c:	4648      	mov	r0, r9
 8004d0e:	f002 fb0f 	bl	8007330 <malloc>
 8004d12:	4607      	mov	r7, r0
 8004d14:	2800      	cmp	r0, #0
 8004d16:	d0bc      	beq.n	8004c92 <setvbuf+0xa6>
 8004d18:	89a3      	ldrh	r3, [r4, #12]
 8004d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d1e:	81a3      	strh	r3, [r4, #12]
 8004d20:	464d      	mov	r5, r9
 8004d22:	e7d3      	b.n	8004ccc <setvbuf+0xe0>
 8004d24:	2000      	movs	r0, #0
 8004d26:	e7b6      	b.n	8004c96 <setvbuf+0xaa>
 8004d28:	46a9      	mov	r9, r5
 8004d2a:	e7f5      	b.n	8004d18 <setvbuf+0x12c>
 8004d2c:	60a0      	str	r0, [r4, #8]
 8004d2e:	e7be      	b.n	8004cae <setvbuf+0xc2>
 8004d30:	f04f 30ff 	mov.w	r0, #4294967295
 8004d34:	e7bb      	b.n	8004cae <setvbuf+0xc2>
 8004d36:	bf00      	nop
 8004d38:	2000000c 	.word	0x2000000c
 8004d3c:	080083c0 	.word	0x080083c0
 8004d40:	080083e0 	.word	0x080083e0
 8004d44:	080083a0 	.word	0x080083a0

08004d48 <nanf>:
 8004d48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004d50 <nanf+0x8>
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	7fc00000 	.word	0x7fc00000

08004d54 <siprintf>:
 8004d54:	b40e      	push	{r1, r2, r3}
 8004d56:	b500      	push	{lr}
 8004d58:	b09c      	sub	sp, #112	; 0x70
 8004d5a:	ab1d      	add	r3, sp, #116	; 0x74
 8004d5c:	9002      	str	r0, [sp, #8]
 8004d5e:	9006      	str	r0, [sp, #24]
 8004d60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d64:	4809      	ldr	r0, [pc, #36]	; (8004d8c <siprintf+0x38>)
 8004d66:	9107      	str	r1, [sp, #28]
 8004d68:	9104      	str	r1, [sp, #16]
 8004d6a:	4909      	ldr	r1, [pc, #36]	; (8004d90 <siprintf+0x3c>)
 8004d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d70:	9105      	str	r1, [sp, #20]
 8004d72:	6800      	ldr	r0, [r0, #0]
 8004d74:	9301      	str	r3, [sp, #4]
 8004d76:	a902      	add	r1, sp, #8
 8004d78:	f003 f804 	bl	8007d84 <_svfiprintf_r>
 8004d7c:	9b02      	ldr	r3, [sp, #8]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	701a      	strb	r2, [r3, #0]
 8004d82:	b01c      	add	sp, #112	; 0x70
 8004d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d88:	b003      	add	sp, #12
 8004d8a:	4770      	bx	lr
 8004d8c:	2000000c 	.word	0x2000000c
 8004d90:	ffff0208 	.word	0xffff0208

08004d94 <sulp>:
 8004d94:	b570      	push	{r4, r5, r6, lr}
 8004d96:	4604      	mov	r4, r0
 8004d98:	460d      	mov	r5, r1
 8004d9a:	ec45 4b10 	vmov	d0, r4, r5
 8004d9e:	4616      	mov	r6, r2
 8004da0:	f002 fdac 	bl	80078fc <__ulp>
 8004da4:	ec51 0b10 	vmov	r0, r1, d0
 8004da8:	b17e      	cbz	r6, 8004dca <sulp+0x36>
 8004daa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004dae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	dd09      	ble.n	8004dca <sulp+0x36>
 8004db6:	051b      	lsls	r3, r3, #20
 8004db8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004dbc:	2400      	movs	r4, #0
 8004dbe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004dc2:	4622      	mov	r2, r4
 8004dc4:	462b      	mov	r3, r5
 8004dc6:	f7fb fd9f 	bl	8000908 <__aeabi_dmul>
 8004dca:	bd70      	pop	{r4, r5, r6, pc}
 8004dcc:	0000      	movs	r0, r0
	...

08004dd0 <_strtod_l>:
 8004dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd4:	461f      	mov	r7, r3
 8004dd6:	b0a1      	sub	sp, #132	; 0x84
 8004dd8:	2300      	movs	r3, #0
 8004dda:	4681      	mov	r9, r0
 8004ddc:	4638      	mov	r0, r7
 8004dde:	460e      	mov	r6, r1
 8004de0:	9217      	str	r2, [sp, #92]	; 0x5c
 8004de2:	931c      	str	r3, [sp, #112]	; 0x70
 8004de4:	f002 fa2f 	bl	8007246 <__localeconv_l>
 8004de8:	4680      	mov	r8, r0
 8004dea:	6800      	ldr	r0, [r0, #0]
 8004dec:	f7fb fb78 	bl	80004e0 <strlen>
 8004df0:	f04f 0a00 	mov.w	sl, #0
 8004df4:	4604      	mov	r4, r0
 8004df6:	f04f 0b00 	mov.w	fp, #0
 8004dfa:	961b      	str	r6, [sp, #108]	; 0x6c
 8004dfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004dfe:	781a      	ldrb	r2, [r3, #0]
 8004e00:	2a0d      	cmp	r2, #13
 8004e02:	d832      	bhi.n	8004e6a <_strtod_l+0x9a>
 8004e04:	2a09      	cmp	r2, #9
 8004e06:	d236      	bcs.n	8004e76 <_strtod_l+0xa6>
 8004e08:	2a00      	cmp	r2, #0
 8004e0a:	d03e      	beq.n	8004e8a <_strtod_l+0xba>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	930d      	str	r3, [sp, #52]	; 0x34
 8004e10:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004e12:	782b      	ldrb	r3, [r5, #0]
 8004e14:	2b30      	cmp	r3, #48	; 0x30
 8004e16:	f040 80ac 	bne.w	8004f72 <_strtod_l+0x1a2>
 8004e1a:	786b      	ldrb	r3, [r5, #1]
 8004e1c:	2b58      	cmp	r3, #88	; 0x58
 8004e1e:	d001      	beq.n	8004e24 <_strtod_l+0x54>
 8004e20:	2b78      	cmp	r3, #120	; 0x78
 8004e22:	d167      	bne.n	8004ef4 <_strtod_l+0x124>
 8004e24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e26:	9301      	str	r3, [sp, #4]
 8004e28:	ab1c      	add	r3, sp, #112	; 0x70
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	9702      	str	r7, [sp, #8]
 8004e2e:	ab1d      	add	r3, sp, #116	; 0x74
 8004e30:	4a88      	ldr	r2, [pc, #544]	; (8005054 <_strtod_l+0x284>)
 8004e32:	a91b      	add	r1, sp, #108	; 0x6c
 8004e34:	4648      	mov	r0, r9
 8004e36:	f001 ff2c 	bl	8006c92 <__gethex>
 8004e3a:	f010 0407 	ands.w	r4, r0, #7
 8004e3e:	4606      	mov	r6, r0
 8004e40:	d005      	beq.n	8004e4e <_strtod_l+0x7e>
 8004e42:	2c06      	cmp	r4, #6
 8004e44:	d12b      	bne.n	8004e9e <_strtod_l+0xce>
 8004e46:	3501      	adds	r5, #1
 8004e48:	2300      	movs	r3, #0
 8004e4a:	951b      	str	r5, [sp, #108]	; 0x6c
 8004e4c:	930d      	str	r3, [sp, #52]	; 0x34
 8004e4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f040 859a 	bne.w	800598a <_strtod_l+0xbba>
 8004e56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e58:	b1e3      	cbz	r3, 8004e94 <_strtod_l+0xc4>
 8004e5a:	4652      	mov	r2, sl
 8004e5c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004e60:	ec43 2b10 	vmov	d0, r2, r3
 8004e64:	b021      	add	sp, #132	; 0x84
 8004e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e6a:	2a2b      	cmp	r2, #43	; 0x2b
 8004e6c:	d015      	beq.n	8004e9a <_strtod_l+0xca>
 8004e6e:	2a2d      	cmp	r2, #45	; 0x2d
 8004e70:	d004      	beq.n	8004e7c <_strtod_l+0xac>
 8004e72:	2a20      	cmp	r2, #32
 8004e74:	d1ca      	bne.n	8004e0c <_strtod_l+0x3c>
 8004e76:	3301      	adds	r3, #1
 8004e78:	931b      	str	r3, [sp, #108]	; 0x6c
 8004e7a:	e7bf      	b.n	8004dfc <_strtod_l+0x2c>
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	920d      	str	r2, [sp, #52]	; 0x34
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	921b      	str	r2, [sp, #108]	; 0x6c
 8004e84:	785b      	ldrb	r3, [r3, #1]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1c2      	bne.n	8004e10 <_strtod_l+0x40>
 8004e8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e8c:	961b      	str	r6, [sp, #108]	; 0x6c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f040 8579 	bne.w	8005986 <_strtod_l+0xbb6>
 8004e94:	4652      	mov	r2, sl
 8004e96:	465b      	mov	r3, fp
 8004e98:	e7e2      	b.n	8004e60 <_strtod_l+0x90>
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	e7ef      	b.n	8004e7e <_strtod_l+0xae>
 8004e9e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004ea0:	b13a      	cbz	r2, 8004eb2 <_strtod_l+0xe2>
 8004ea2:	2135      	movs	r1, #53	; 0x35
 8004ea4:	a81e      	add	r0, sp, #120	; 0x78
 8004ea6:	f002 fe21 	bl	8007aec <__copybits>
 8004eaa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004eac:	4648      	mov	r0, r9
 8004eae:	f002 fa8d 	bl	80073cc <_Bfree>
 8004eb2:	3c01      	subs	r4, #1
 8004eb4:	2c04      	cmp	r4, #4
 8004eb6:	d806      	bhi.n	8004ec6 <_strtod_l+0xf6>
 8004eb8:	e8df f004 	tbb	[pc, r4]
 8004ebc:	1714030a 	.word	0x1714030a
 8004ec0:	0a          	.byte	0x0a
 8004ec1:	00          	.byte	0x00
 8004ec2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8004ec6:	0730      	lsls	r0, r6, #28
 8004ec8:	d5c1      	bpl.n	8004e4e <_strtod_l+0x7e>
 8004eca:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004ece:	e7be      	b.n	8004e4e <_strtod_l+0x7e>
 8004ed0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8004ed4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004ed6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004eda:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004ede:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004ee2:	e7f0      	b.n	8004ec6 <_strtod_l+0xf6>
 8004ee4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8005058 <_strtod_l+0x288>
 8004ee8:	e7ed      	b.n	8004ec6 <_strtod_l+0xf6>
 8004eea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004eee:	f04f 3aff 	mov.w	sl, #4294967295
 8004ef2:	e7e8      	b.n	8004ec6 <_strtod_l+0xf6>
 8004ef4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	921b      	str	r2, [sp, #108]	; 0x6c
 8004efa:	785b      	ldrb	r3, [r3, #1]
 8004efc:	2b30      	cmp	r3, #48	; 0x30
 8004efe:	d0f9      	beq.n	8004ef4 <_strtod_l+0x124>
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0a4      	beq.n	8004e4e <_strtod_l+0x7e>
 8004f04:	2301      	movs	r3, #1
 8004f06:	2500      	movs	r5, #0
 8004f08:	9306      	str	r3, [sp, #24]
 8004f0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f0c:	9308      	str	r3, [sp, #32]
 8004f0e:	9507      	str	r5, [sp, #28]
 8004f10:	9505      	str	r5, [sp, #20]
 8004f12:	220a      	movs	r2, #10
 8004f14:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004f16:	7807      	ldrb	r7, [r0, #0]
 8004f18:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8004f1c:	b2d9      	uxtb	r1, r3
 8004f1e:	2909      	cmp	r1, #9
 8004f20:	d929      	bls.n	8004f76 <_strtod_l+0x1a6>
 8004f22:	4622      	mov	r2, r4
 8004f24:	f8d8 1000 	ldr.w	r1, [r8]
 8004f28:	f003 f875 	bl	8008016 <strncmp>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	d031      	beq.n	8004f94 <_strtod_l+0x1c4>
 8004f30:	2000      	movs	r0, #0
 8004f32:	9c05      	ldr	r4, [sp, #20]
 8004f34:	9004      	str	r0, [sp, #16]
 8004f36:	463b      	mov	r3, r7
 8004f38:	4602      	mov	r2, r0
 8004f3a:	2b65      	cmp	r3, #101	; 0x65
 8004f3c:	d001      	beq.n	8004f42 <_strtod_l+0x172>
 8004f3e:	2b45      	cmp	r3, #69	; 0x45
 8004f40:	d114      	bne.n	8004f6c <_strtod_l+0x19c>
 8004f42:	b924      	cbnz	r4, 8004f4e <_strtod_l+0x17e>
 8004f44:	b910      	cbnz	r0, 8004f4c <_strtod_l+0x17c>
 8004f46:	9b06      	ldr	r3, [sp, #24]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d09e      	beq.n	8004e8a <_strtod_l+0xba>
 8004f4c:	2400      	movs	r4, #0
 8004f4e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004f50:	1c73      	adds	r3, r6, #1
 8004f52:	931b      	str	r3, [sp, #108]	; 0x6c
 8004f54:	7873      	ldrb	r3, [r6, #1]
 8004f56:	2b2b      	cmp	r3, #43	; 0x2b
 8004f58:	d078      	beq.n	800504c <_strtod_l+0x27c>
 8004f5a:	2b2d      	cmp	r3, #45	; 0x2d
 8004f5c:	d070      	beq.n	8005040 <_strtod_l+0x270>
 8004f5e:	f04f 0c00 	mov.w	ip, #0
 8004f62:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004f66:	2f09      	cmp	r7, #9
 8004f68:	d97c      	bls.n	8005064 <_strtod_l+0x294>
 8004f6a:	961b      	str	r6, [sp, #108]	; 0x6c
 8004f6c:	f04f 0e00 	mov.w	lr, #0
 8004f70:	e09a      	b.n	80050a8 <_strtod_l+0x2d8>
 8004f72:	2300      	movs	r3, #0
 8004f74:	e7c7      	b.n	8004f06 <_strtod_l+0x136>
 8004f76:	9905      	ldr	r1, [sp, #20]
 8004f78:	2908      	cmp	r1, #8
 8004f7a:	bfdd      	ittte	le
 8004f7c:	9907      	ldrle	r1, [sp, #28]
 8004f7e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004f82:	9307      	strle	r3, [sp, #28]
 8004f84:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004f88:	9b05      	ldr	r3, [sp, #20]
 8004f8a:	3001      	adds	r0, #1
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	9305      	str	r3, [sp, #20]
 8004f90:	901b      	str	r0, [sp, #108]	; 0x6c
 8004f92:	e7bf      	b.n	8004f14 <_strtod_l+0x144>
 8004f94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f96:	191a      	adds	r2, r3, r4
 8004f98:	921b      	str	r2, [sp, #108]	; 0x6c
 8004f9a:	9a05      	ldr	r2, [sp, #20]
 8004f9c:	5d1b      	ldrb	r3, [r3, r4]
 8004f9e:	2a00      	cmp	r2, #0
 8004fa0:	d037      	beq.n	8005012 <_strtod_l+0x242>
 8004fa2:	9c05      	ldr	r4, [sp, #20]
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004faa:	2909      	cmp	r1, #9
 8004fac:	d913      	bls.n	8004fd6 <_strtod_l+0x206>
 8004fae:	2101      	movs	r1, #1
 8004fb0:	9104      	str	r1, [sp, #16]
 8004fb2:	e7c2      	b.n	8004f3a <_strtod_l+0x16a>
 8004fb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	921b      	str	r2, [sp, #108]	; 0x6c
 8004fba:	785b      	ldrb	r3, [r3, #1]
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	2b30      	cmp	r3, #48	; 0x30
 8004fc0:	d0f8      	beq.n	8004fb4 <_strtod_l+0x1e4>
 8004fc2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004fc6:	2a08      	cmp	r2, #8
 8004fc8:	f200 84e4 	bhi.w	8005994 <_strtod_l+0xbc4>
 8004fcc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004fce:	9208      	str	r2, [sp, #32]
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8004fda:	f100 0101 	add.w	r1, r0, #1
 8004fde:	d012      	beq.n	8005006 <_strtod_l+0x236>
 8004fe0:	440a      	add	r2, r1
 8004fe2:	eb00 0c04 	add.w	ip, r0, r4
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	270a      	movs	r7, #10
 8004fea:	458c      	cmp	ip, r1
 8004fec:	d113      	bne.n	8005016 <_strtod_l+0x246>
 8004fee:	1821      	adds	r1, r4, r0
 8004ff0:	2908      	cmp	r1, #8
 8004ff2:	f104 0401 	add.w	r4, r4, #1
 8004ff6:	4404      	add	r4, r0
 8004ff8:	dc19      	bgt.n	800502e <_strtod_l+0x25e>
 8004ffa:	9b07      	ldr	r3, [sp, #28]
 8004ffc:	210a      	movs	r1, #10
 8004ffe:	fb01 e303 	mla	r3, r1, r3, lr
 8005002:	9307      	str	r3, [sp, #28]
 8005004:	2100      	movs	r1, #0
 8005006:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005008:	1c58      	adds	r0, r3, #1
 800500a:	901b      	str	r0, [sp, #108]	; 0x6c
 800500c:	785b      	ldrb	r3, [r3, #1]
 800500e:	4608      	mov	r0, r1
 8005010:	e7c9      	b.n	8004fa6 <_strtod_l+0x1d6>
 8005012:	9805      	ldr	r0, [sp, #20]
 8005014:	e7d3      	b.n	8004fbe <_strtod_l+0x1ee>
 8005016:	2908      	cmp	r1, #8
 8005018:	f101 0101 	add.w	r1, r1, #1
 800501c:	dc03      	bgt.n	8005026 <_strtod_l+0x256>
 800501e:	9b07      	ldr	r3, [sp, #28]
 8005020:	437b      	muls	r3, r7
 8005022:	9307      	str	r3, [sp, #28]
 8005024:	e7e1      	b.n	8004fea <_strtod_l+0x21a>
 8005026:	2910      	cmp	r1, #16
 8005028:	bfd8      	it	le
 800502a:	437d      	mulle	r5, r7
 800502c:	e7dd      	b.n	8004fea <_strtod_l+0x21a>
 800502e:	2c10      	cmp	r4, #16
 8005030:	bfdc      	itt	le
 8005032:	210a      	movle	r1, #10
 8005034:	fb01 e505 	mlale	r5, r1, r5, lr
 8005038:	e7e4      	b.n	8005004 <_strtod_l+0x234>
 800503a:	2301      	movs	r3, #1
 800503c:	9304      	str	r3, [sp, #16]
 800503e:	e781      	b.n	8004f44 <_strtod_l+0x174>
 8005040:	f04f 0c01 	mov.w	ip, #1
 8005044:	1cb3      	adds	r3, r6, #2
 8005046:	931b      	str	r3, [sp, #108]	; 0x6c
 8005048:	78b3      	ldrb	r3, [r6, #2]
 800504a:	e78a      	b.n	8004f62 <_strtod_l+0x192>
 800504c:	f04f 0c00 	mov.w	ip, #0
 8005050:	e7f8      	b.n	8005044 <_strtod_l+0x274>
 8005052:	bf00      	nop
 8005054:	0800833c 	.word	0x0800833c
 8005058:	7ff00000 	.word	0x7ff00000
 800505c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800505e:	1c5f      	adds	r7, r3, #1
 8005060:	971b      	str	r7, [sp, #108]	; 0x6c
 8005062:	785b      	ldrb	r3, [r3, #1]
 8005064:	2b30      	cmp	r3, #48	; 0x30
 8005066:	d0f9      	beq.n	800505c <_strtod_l+0x28c>
 8005068:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800506c:	2f08      	cmp	r7, #8
 800506e:	f63f af7d 	bhi.w	8004f6c <_strtod_l+0x19c>
 8005072:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8005076:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005078:	930a      	str	r3, [sp, #40]	; 0x28
 800507a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800507c:	1c5f      	adds	r7, r3, #1
 800507e:	971b      	str	r7, [sp, #108]	; 0x6c
 8005080:	785b      	ldrb	r3, [r3, #1]
 8005082:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8005086:	f1b8 0f09 	cmp.w	r8, #9
 800508a:	d937      	bls.n	80050fc <_strtod_l+0x32c>
 800508c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800508e:	1a7f      	subs	r7, r7, r1
 8005090:	2f08      	cmp	r7, #8
 8005092:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8005096:	dc37      	bgt.n	8005108 <_strtod_l+0x338>
 8005098:	45be      	cmp	lr, r7
 800509a:	bfa8      	it	ge
 800509c:	46be      	movge	lr, r7
 800509e:	f1bc 0f00 	cmp.w	ip, #0
 80050a2:	d001      	beq.n	80050a8 <_strtod_l+0x2d8>
 80050a4:	f1ce 0e00 	rsb	lr, lr, #0
 80050a8:	2c00      	cmp	r4, #0
 80050aa:	d151      	bne.n	8005150 <_strtod_l+0x380>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	f47f aece 	bne.w	8004e4e <_strtod_l+0x7e>
 80050b2:	9a06      	ldr	r2, [sp, #24]
 80050b4:	2a00      	cmp	r2, #0
 80050b6:	f47f aeca 	bne.w	8004e4e <_strtod_l+0x7e>
 80050ba:	9a04      	ldr	r2, [sp, #16]
 80050bc:	2a00      	cmp	r2, #0
 80050be:	f47f aee4 	bne.w	8004e8a <_strtod_l+0xba>
 80050c2:	2b4e      	cmp	r3, #78	; 0x4e
 80050c4:	d027      	beq.n	8005116 <_strtod_l+0x346>
 80050c6:	dc21      	bgt.n	800510c <_strtod_l+0x33c>
 80050c8:	2b49      	cmp	r3, #73	; 0x49
 80050ca:	f47f aede 	bne.w	8004e8a <_strtod_l+0xba>
 80050ce:	49a0      	ldr	r1, [pc, #640]	; (8005350 <_strtod_l+0x580>)
 80050d0:	a81b      	add	r0, sp, #108	; 0x6c
 80050d2:	f002 f811 	bl	80070f8 <__match>
 80050d6:	2800      	cmp	r0, #0
 80050d8:	f43f aed7 	beq.w	8004e8a <_strtod_l+0xba>
 80050dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80050de:	499d      	ldr	r1, [pc, #628]	; (8005354 <_strtod_l+0x584>)
 80050e0:	3b01      	subs	r3, #1
 80050e2:	a81b      	add	r0, sp, #108	; 0x6c
 80050e4:	931b      	str	r3, [sp, #108]	; 0x6c
 80050e6:	f002 f807 	bl	80070f8 <__match>
 80050ea:	b910      	cbnz	r0, 80050f2 <_strtod_l+0x322>
 80050ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80050ee:	3301      	adds	r3, #1
 80050f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80050f2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8005368 <_strtod_l+0x598>
 80050f6:	f04f 0a00 	mov.w	sl, #0
 80050fa:	e6a8      	b.n	8004e4e <_strtod_l+0x7e>
 80050fc:	210a      	movs	r1, #10
 80050fe:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005102:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005106:	e7b8      	b.n	800507a <_strtod_l+0x2aa>
 8005108:	46be      	mov	lr, r7
 800510a:	e7c8      	b.n	800509e <_strtod_l+0x2ce>
 800510c:	2b69      	cmp	r3, #105	; 0x69
 800510e:	d0de      	beq.n	80050ce <_strtod_l+0x2fe>
 8005110:	2b6e      	cmp	r3, #110	; 0x6e
 8005112:	f47f aeba 	bne.w	8004e8a <_strtod_l+0xba>
 8005116:	4990      	ldr	r1, [pc, #576]	; (8005358 <_strtod_l+0x588>)
 8005118:	a81b      	add	r0, sp, #108	; 0x6c
 800511a:	f001 ffed 	bl	80070f8 <__match>
 800511e:	2800      	cmp	r0, #0
 8005120:	f43f aeb3 	beq.w	8004e8a <_strtod_l+0xba>
 8005124:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	2b28      	cmp	r3, #40	; 0x28
 800512a:	d10e      	bne.n	800514a <_strtod_l+0x37a>
 800512c:	aa1e      	add	r2, sp, #120	; 0x78
 800512e:	498b      	ldr	r1, [pc, #556]	; (800535c <_strtod_l+0x58c>)
 8005130:	a81b      	add	r0, sp, #108	; 0x6c
 8005132:	f001 fff5 	bl	8007120 <__hexnan>
 8005136:	2805      	cmp	r0, #5
 8005138:	d107      	bne.n	800514a <_strtod_l+0x37a>
 800513a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800513c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8005140:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005144:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005148:	e681      	b.n	8004e4e <_strtod_l+0x7e>
 800514a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8005370 <_strtod_l+0x5a0>
 800514e:	e7d2      	b.n	80050f6 <_strtod_l+0x326>
 8005150:	ebae 0302 	sub.w	r3, lr, r2
 8005154:	9306      	str	r3, [sp, #24]
 8005156:	9b05      	ldr	r3, [sp, #20]
 8005158:	9807      	ldr	r0, [sp, #28]
 800515a:	2b00      	cmp	r3, #0
 800515c:	bf08      	it	eq
 800515e:	4623      	moveq	r3, r4
 8005160:	2c10      	cmp	r4, #16
 8005162:	9305      	str	r3, [sp, #20]
 8005164:	46a0      	mov	r8, r4
 8005166:	bfa8      	it	ge
 8005168:	f04f 0810 	movge.w	r8, #16
 800516c:	f7fb fb52 	bl	8000814 <__aeabi_ui2d>
 8005170:	2c09      	cmp	r4, #9
 8005172:	4682      	mov	sl, r0
 8005174:	468b      	mov	fp, r1
 8005176:	dc13      	bgt.n	80051a0 <_strtod_l+0x3d0>
 8005178:	9b06      	ldr	r3, [sp, #24]
 800517a:	2b00      	cmp	r3, #0
 800517c:	f43f ae67 	beq.w	8004e4e <_strtod_l+0x7e>
 8005180:	9b06      	ldr	r3, [sp, #24]
 8005182:	dd7a      	ble.n	800527a <_strtod_l+0x4aa>
 8005184:	2b16      	cmp	r3, #22
 8005186:	dc61      	bgt.n	800524c <_strtod_l+0x47c>
 8005188:	4a75      	ldr	r2, [pc, #468]	; (8005360 <_strtod_l+0x590>)
 800518a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800518e:	e9de 0100 	ldrd	r0, r1, [lr]
 8005192:	4652      	mov	r2, sl
 8005194:	465b      	mov	r3, fp
 8005196:	f7fb fbb7 	bl	8000908 <__aeabi_dmul>
 800519a:	4682      	mov	sl, r0
 800519c:	468b      	mov	fp, r1
 800519e:	e656      	b.n	8004e4e <_strtod_l+0x7e>
 80051a0:	4b6f      	ldr	r3, [pc, #444]	; (8005360 <_strtod_l+0x590>)
 80051a2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80051a6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80051aa:	f7fb fbad 	bl	8000908 <__aeabi_dmul>
 80051ae:	4606      	mov	r6, r0
 80051b0:	4628      	mov	r0, r5
 80051b2:	460f      	mov	r7, r1
 80051b4:	f7fb fb2e 	bl	8000814 <__aeabi_ui2d>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4630      	mov	r0, r6
 80051be:	4639      	mov	r1, r7
 80051c0:	f7fb f9ec 	bl	800059c <__adddf3>
 80051c4:	2c0f      	cmp	r4, #15
 80051c6:	4682      	mov	sl, r0
 80051c8:	468b      	mov	fp, r1
 80051ca:	ddd5      	ble.n	8005178 <_strtod_l+0x3a8>
 80051cc:	9b06      	ldr	r3, [sp, #24]
 80051ce:	eba4 0808 	sub.w	r8, r4, r8
 80051d2:	4498      	add	r8, r3
 80051d4:	f1b8 0f00 	cmp.w	r8, #0
 80051d8:	f340 8096 	ble.w	8005308 <_strtod_l+0x538>
 80051dc:	f018 030f 	ands.w	r3, r8, #15
 80051e0:	d00a      	beq.n	80051f8 <_strtod_l+0x428>
 80051e2:	495f      	ldr	r1, [pc, #380]	; (8005360 <_strtod_l+0x590>)
 80051e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80051e8:	4652      	mov	r2, sl
 80051ea:	465b      	mov	r3, fp
 80051ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051f0:	f7fb fb8a 	bl	8000908 <__aeabi_dmul>
 80051f4:	4682      	mov	sl, r0
 80051f6:	468b      	mov	fp, r1
 80051f8:	f038 080f 	bics.w	r8, r8, #15
 80051fc:	d073      	beq.n	80052e6 <_strtod_l+0x516>
 80051fe:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005202:	dd47      	ble.n	8005294 <_strtod_l+0x4c4>
 8005204:	2400      	movs	r4, #0
 8005206:	46a0      	mov	r8, r4
 8005208:	9407      	str	r4, [sp, #28]
 800520a:	9405      	str	r4, [sp, #20]
 800520c:	2322      	movs	r3, #34	; 0x22
 800520e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8005368 <_strtod_l+0x598>
 8005212:	f8c9 3000 	str.w	r3, [r9]
 8005216:	f04f 0a00 	mov.w	sl, #0
 800521a:	9b07      	ldr	r3, [sp, #28]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f43f ae16 	beq.w	8004e4e <_strtod_l+0x7e>
 8005222:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005224:	4648      	mov	r0, r9
 8005226:	f002 f8d1 	bl	80073cc <_Bfree>
 800522a:	9905      	ldr	r1, [sp, #20]
 800522c:	4648      	mov	r0, r9
 800522e:	f002 f8cd 	bl	80073cc <_Bfree>
 8005232:	4641      	mov	r1, r8
 8005234:	4648      	mov	r0, r9
 8005236:	f002 f8c9 	bl	80073cc <_Bfree>
 800523a:	9907      	ldr	r1, [sp, #28]
 800523c:	4648      	mov	r0, r9
 800523e:	f002 f8c5 	bl	80073cc <_Bfree>
 8005242:	4621      	mov	r1, r4
 8005244:	4648      	mov	r0, r9
 8005246:	f002 f8c1 	bl	80073cc <_Bfree>
 800524a:	e600      	b.n	8004e4e <_strtod_l+0x7e>
 800524c:	9a06      	ldr	r2, [sp, #24]
 800524e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005252:	4293      	cmp	r3, r2
 8005254:	dbba      	blt.n	80051cc <_strtod_l+0x3fc>
 8005256:	4d42      	ldr	r5, [pc, #264]	; (8005360 <_strtod_l+0x590>)
 8005258:	f1c4 040f 	rsb	r4, r4, #15
 800525c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005260:	4652      	mov	r2, sl
 8005262:	465b      	mov	r3, fp
 8005264:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005268:	f7fb fb4e 	bl	8000908 <__aeabi_dmul>
 800526c:	9b06      	ldr	r3, [sp, #24]
 800526e:	1b1c      	subs	r4, r3, r4
 8005270:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005274:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005278:	e78d      	b.n	8005196 <_strtod_l+0x3c6>
 800527a:	f113 0f16 	cmn.w	r3, #22
 800527e:	dba5      	blt.n	80051cc <_strtod_l+0x3fc>
 8005280:	4a37      	ldr	r2, [pc, #220]	; (8005360 <_strtod_l+0x590>)
 8005282:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8005286:	e9d2 2300 	ldrd	r2, r3, [r2]
 800528a:	4650      	mov	r0, sl
 800528c:	4659      	mov	r1, fp
 800528e:	f7fb fc65 	bl	8000b5c <__aeabi_ddiv>
 8005292:	e782      	b.n	800519a <_strtod_l+0x3ca>
 8005294:	2300      	movs	r3, #0
 8005296:	4e33      	ldr	r6, [pc, #204]	; (8005364 <_strtod_l+0x594>)
 8005298:	ea4f 1828 	mov.w	r8, r8, asr #4
 800529c:	4650      	mov	r0, sl
 800529e:	4659      	mov	r1, fp
 80052a0:	461d      	mov	r5, r3
 80052a2:	f1b8 0f01 	cmp.w	r8, #1
 80052a6:	dc21      	bgt.n	80052ec <_strtod_l+0x51c>
 80052a8:	b10b      	cbz	r3, 80052ae <_strtod_l+0x4de>
 80052aa:	4682      	mov	sl, r0
 80052ac:	468b      	mov	fp, r1
 80052ae:	4b2d      	ldr	r3, [pc, #180]	; (8005364 <_strtod_l+0x594>)
 80052b0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80052b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80052b8:	4652      	mov	r2, sl
 80052ba:	465b      	mov	r3, fp
 80052bc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80052c0:	f7fb fb22 	bl	8000908 <__aeabi_dmul>
 80052c4:	4b28      	ldr	r3, [pc, #160]	; (8005368 <_strtod_l+0x598>)
 80052c6:	460a      	mov	r2, r1
 80052c8:	400b      	ands	r3, r1
 80052ca:	4928      	ldr	r1, [pc, #160]	; (800536c <_strtod_l+0x59c>)
 80052cc:	428b      	cmp	r3, r1
 80052ce:	4682      	mov	sl, r0
 80052d0:	d898      	bhi.n	8005204 <_strtod_l+0x434>
 80052d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80052d6:	428b      	cmp	r3, r1
 80052d8:	bf86      	itte	hi
 80052da:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8005374 <_strtod_l+0x5a4>
 80052de:	f04f 3aff 	movhi.w	sl, #4294967295
 80052e2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80052e6:	2300      	movs	r3, #0
 80052e8:	9304      	str	r3, [sp, #16]
 80052ea:	e077      	b.n	80053dc <_strtod_l+0x60c>
 80052ec:	f018 0f01 	tst.w	r8, #1
 80052f0:	d006      	beq.n	8005300 <_strtod_l+0x530>
 80052f2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80052f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fa:	f7fb fb05 	bl	8000908 <__aeabi_dmul>
 80052fe:	2301      	movs	r3, #1
 8005300:	3501      	adds	r5, #1
 8005302:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005306:	e7cc      	b.n	80052a2 <_strtod_l+0x4d2>
 8005308:	d0ed      	beq.n	80052e6 <_strtod_l+0x516>
 800530a:	f1c8 0800 	rsb	r8, r8, #0
 800530e:	f018 020f 	ands.w	r2, r8, #15
 8005312:	d00a      	beq.n	800532a <_strtod_l+0x55a>
 8005314:	4b12      	ldr	r3, [pc, #72]	; (8005360 <_strtod_l+0x590>)
 8005316:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800531a:	4650      	mov	r0, sl
 800531c:	4659      	mov	r1, fp
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	f7fb fc1b 	bl	8000b5c <__aeabi_ddiv>
 8005326:	4682      	mov	sl, r0
 8005328:	468b      	mov	fp, r1
 800532a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800532e:	d0da      	beq.n	80052e6 <_strtod_l+0x516>
 8005330:	f1b8 0f1f 	cmp.w	r8, #31
 8005334:	dd20      	ble.n	8005378 <_strtod_l+0x5a8>
 8005336:	2400      	movs	r4, #0
 8005338:	46a0      	mov	r8, r4
 800533a:	9407      	str	r4, [sp, #28]
 800533c:	9405      	str	r4, [sp, #20]
 800533e:	2322      	movs	r3, #34	; 0x22
 8005340:	f04f 0a00 	mov.w	sl, #0
 8005344:	f04f 0b00 	mov.w	fp, #0
 8005348:	f8c9 3000 	str.w	r3, [r9]
 800534c:	e765      	b.n	800521a <_strtod_l+0x44a>
 800534e:	bf00      	nop
 8005350:	08008305 	.word	0x08008305
 8005354:	08008393 	.word	0x08008393
 8005358:	0800830d 	.word	0x0800830d
 800535c:	08008350 	.word	0x08008350
 8005360:	08008438 	.word	0x08008438
 8005364:	08008410 	.word	0x08008410
 8005368:	7ff00000 	.word	0x7ff00000
 800536c:	7ca00000 	.word	0x7ca00000
 8005370:	fff80000 	.word	0xfff80000
 8005374:	7fefffff 	.word	0x7fefffff
 8005378:	f018 0310 	ands.w	r3, r8, #16
 800537c:	bf18      	it	ne
 800537e:	236a      	movne	r3, #106	; 0x6a
 8005380:	4da0      	ldr	r5, [pc, #640]	; (8005604 <_strtod_l+0x834>)
 8005382:	9304      	str	r3, [sp, #16]
 8005384:	4650      	mov	r0, sl
 8005386:	4659      	mov	r1, fp
 8005388:	2300      	movs	r3, #0
 800538a:	f1b8 0f00 	cmp.w	r8, #0
 800538e:	f300 810a 	bgt.w	80055a6 <_strtod_l+0x7d6>
 8005392:	b10b      	cbz	r3, 8005398 <_strtod_l+0x5c8>
 8005394:	4682      	mov	sl, r0
 8005396:	468b      	mov	fp, r1
 8005398:	9b04      	ldr	r3, [sp, #16]
 800539a:	b1bb      	cbz	r3, 80053cc <_strtod_l+0x5fc>
 800539c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80053a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	4659      	mov	r1, fp
 80053a8:	dd10      	ble.n	80053cc <_strtod_l+0x5fc>
 80053aa:	2b1f      	cmp	r3, #31
 80053ac:	f340 8107 	ble.w	80055be <_strtod_l+0x7ee>
 80053b0:	2b34      	cmp	r3, #52	; 0x34
 80053b2:	bfde      	ittt	le
 80053b4:	3b20      	suble	r3, #32
 80053b6:	f04f 32ff 	movle.w	r2, #4294967295
 80053ba:	fa02 f303 	lslle.w	r3, r2, r3
 80053be:	f04f 0a00 	mov.w	sl, #0
 80053c2:	bfcc      	ite	gt
 80053c4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80053c8:	ea03 0b01 	andle.w	fp, r3, r1
 80053cc:	2200      	movs	r2, #0
 80053ce:	2300      	movs	r3, #0
 80053d0:	4650      	mov	r0, sl
 80053d2:	4659      	mov	r1, fp
 80053d4:	f7fb fd00 	bl	8000dd8 <__aeabi_dcmpeq>
 80053d8:	2800      	cmp	r0, #0
 80053da:	d1ac      	bne.n	8005336 <_strtod_l+0x566>
 80053dc:	9b07      	ldr	r3, [sp, #28]
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	9a05      	ldr	r2, [sp, #20]
 80053e2:	9908      	ldr	r1, [sp, #32]
 80053e4:	4623      	mov	r3, r4
 80053e6:	4648      	mov	r0, r9
 80053e8:	f002 f842 	bl	8007470 <__s2b>
 80053ec:	9007      	str	r0, [sp, #28]
 80053ee:	2800      	cmp	r0, #0
 80053f0:	f43f af08 	beq.w	8005204 <_strtod_l+0x434>
 80053f4:	9a06      	ldr	r2, [sp, #24]
 80053f6:	9b06      	ldr	r3, [sp, #24]
 80053f8:	2a00      	cmp	r2, #0
 80053fa:	f1c3 0300 	rsb	r3, r3, #0
 80053fe:	bfa8      	it	ge
 8005400:	2300      	movge	r3, #0
 8005402:	930e      	str	r3, [sp, #56]	; 0x38
 8005404:	2400      	movs	r4, #0
 8005406:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800540a:	9316      	str	r3, [sp, #88]	; 0x58
 800540c:	46a0      	mov	r8, r4
 800540e:	9b07      	ldr	r3, [sp, #28]
 8005410:	4648      	mov	r0, r9
 8005412:	6859      	ldr	r1, [r3, #4]
 8005414:	f001 ffa6 	bl	8007364 <_Balloc>
 8005418:	9005      	str	r0, [sp, #20]
 800541a:	2800      	cmp	r0, #0
 800541c:	f43f aef6 	beq.w	800520c <_strtod_l+0x43c>
 8005420:	9b07      	ldr	r3, [sp, #28]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	3202      	adds	r2, #2
 8005426:	f103 010c 	add.w	r1, r3, #12
 800542a:	0092      	lsls	r2, r2, #2
 800542c:	300c      	adds	r0, #12
 800542e:	f7fe fd27 	bl	8003e80 <memcpy>
 8005432:	aa1e      	add	r2, sp, #120	; 0x78
 8005434:	a91d      	add	r1, sp, #116	; 0x74
 8005436:	ec4b ab10 	vmov	d0, sl, fp
 800543a:	4648      	mov	r0, r9
 800543c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005440:	f002 fad2 	bl	80079e8 <__d2b>
 8005444:	901c      	str	r0, [sp, #112]	; 0x70
 8005446:	2800      	cmp	r0, #0
 8005448:	f43f aee0 	beq.w	800520c <_strtod_l+0x43c>
 800544c:	2101      	movs	r1, #1
 800544e:	4648      	mov	r0, r9
 8005450:	f002 f89a 	bl	8007588 <__i2b>
 8005454:	4680      	mov	r8, r0
 8005456:	2800      	cmp	r0, #0
 8005458:	f43f aed8 	beq.w	800520c <_strtod_l+0x43c>
 800545c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800545e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005460:	2e00      	cmp	r6, #0
 8005462:	bfab      	itete	ge
 8005464:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005466:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005468:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800546a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800546c:	bfac      	ite	ge
 800546e:	18f7      	addge	r7, r6, r3
 8005470:	1b9d      	sublt	r5, r3, r6
 8005472:	9b04      	ldr	r3, [sp, #16]
 8005474:	1af6      	subs	r6, r6, r3
 8005476:	4416      	add	r6, r2
 8005478:	4b63      	ldr	r3, [pc, #396]	; (8005608 <_strtod_l+0x838>)
 800547a:	3e01      	subs	r6, #1
 800547c:	429e      	cmp	r6, r3
 800547e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005482:	f280 80af 	bge.w	80055e4 <_strtod_l+0x814>
 8005486:	1b9b      	subs	r3, r3, r6
 8005488:	2b1f      	cmp	r3, #31
 800548a:	eba2 0203 	sub.w	r2, r2, r3
 800548e:	f04f 0101 	mov.w	r1, #1
 8005492:	f300 809b 	bgt.w	80055cc <_strtod_l+0x7fc>
 8005496:	fa01 f303 	lsl.w	r3, r1, r3
 800549a:	930f      	str	r3, [sp, #60]	; 0x3c
 800549c:	2300      	movs	r3, #0
 800549e:	930a      	str	r3, [sp, #40]	; 0x28
 80054a0:	18be      	adds	r6, r7, r2
 80054a2:	9b04      	ldr	r3, [sp, #16]
 80054a4:	42b7      	cmp	r7, r6
 80054a6:	4415      	add	r5, r2
 80054a8:	441d      	add	r5, r3
 80054aa:	463b      	mov	r3, r7
 80054ac:	bfa8      	it	ge
 80054ae:	4633      	movge	r3, r6
 80054b0:	42ab      	cmp	r3, r5
 80054b2:	bfa8      	it	ge
 80054b4:	462b      	movge	r3, r5
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	bfc2      	ittt	gt
 80054ba:	1af6      	subgt	r6, r6, r3
 80054bc:	1aed      	subgt	r5, r5, r3
 80054be:	1aff      	subgt	r7, r7, r3
 80054c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054c2:	b1bb      	cbz	r3, 80054f4 <_strtod_l+0x724>
 80054c4:	4641      	mov	r1, r8
 80054c6:	461a      	mov	r2, r3
 80054c8:	4648      	mov	r0, r9
 80054ca:	f002 f8fd 	bl	80076c8 <__pow5mult>
 80054ce:	4680      	mov	r8, r0
 80054d0:	2800      	cmp	r0, #0
 80054d2:	f43f ae9b 	beq.w	800520c <_strtod_l+0x43c>
 80054d6:	4601      	mov	r1, r0
 80054d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80054da:	4648      	mov	r0, r9
 80054dc:	f002 f85d 	bl	800759a <__multiply>
 80054e0:	900c      	str	r0, [sp, #48]	; 0x30
 80054e2:	2800      	cmp	r0, #0
 80054e4:	f43f ae92 	beq.w	800520c <_strtod_l+0x43c>
 80054e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80054ea:	4648      	mov	r0, r9
 80054ec:	f001 ff6e 	bl	80073cc <_Bfree>
 80054f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054f2:	931c      	str	r3, [sp, #112]	; 0x70
 80054f4:	2e00      	cmp	r6, #0
 80054f6:	dc7a      	bgt.n	80055ee <_strtod_l+0x81e>
 80054f8:	9b06      	ldr	r3, [sp, #24]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	dd08      	ble.n	8005510 <_strtod_l+0x740>
 80054fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005500:	9905      	ldr	r1, [sp, #20]
 8005502:	4648      	mov	r0, r9
 8005504:	f002 f8e0 	bl	80076c8 <__pow5mult>
 8005508:	9005      	str	r0, [sp, #20]
 800550a:	2800      	cmp	r0, #0
 800550c:	f43f ae7e 	beq.w	800520c <_strtod_l+0x43c>
 8005510:	2d00      	cmp	r5, #0
 8005512:	dd08      	ble.n	8005526 <_strtod_l+0x756>
 8005514:	462a      	mov	r2, r5
 8005516:	9905      	ldr	r1, [sp, #20]
 8005518:	4648      	mov	r0, r9
 800551a:	f002 f923 	bl	8007764 <__lshift>
 800551e:	9005      	str	r0, [sp, #20]
 8005520:	2800      	cmp	r0, #0
 8005522:	f43f ae73 	beq.w	800520c <_strtod_l+0x43c>
 8005526:	2f00      	cmp	r7, #0
 8005528:	dd08      	ble.n	800553c <_strtod_l+0x76c>
 800552a:	4641      	mov	r1, r8
 800552c:	463a      	mov	r2, r7
 800552e:	4648      	mov	r0, r9
 8005530:	f002 f918 	bl	8007764 <__lshift>
 8005534:	4680      	mov	r8, r0
 8005536:	2800      	cmp	r0, #0
 8005538:	f43f ae68 	beq.w	800520c <_strtod_l+0x43c>
 800553c:	9a05      	ldr	r2, [sp, #20]
 800553e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005540:	4648      	mov	r0, r9
 8005542:	f002 f97d 	bl	8007840 <__mdiff>
 8005546:	4604      	mov	r4, r0
 8005548:	2800      	cmp	r0, #0
 800554a:	f43f ae5f 	beq.w	800520c <_strtod_l+0x43c>
 800554e:	68c3      	ldr	r3, [r0, #12]
 8005550:	930c      	str	r3, [sp, #48]	; 0x30
 8005552:	2300      	movs	r3, #0
 8005554:	60c3      	str	r3, [r0, #12]
 8005556:	4641      	mov	r1, r8
 8005558:	f002 f958 	bl	800780c <__mcmp>
 800555c:	2800      	cmp	r0, #0
 800555e:	da55      	bge.n	800560c <_strtod_l+0x83c>
 8005560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005562:	b9e3      	cbnz	r3, 800559e <_strtod_l+0x7ce>
 8005564:	f1ba 0f00 	cmp.w	sl, #0
 8005568:	d119      	bne.n	800559e <_strtod_l+0x7ce>
 800556a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800556e:	b9b3      	cbnz	r3, 800559e <_strtod_l+0x7ce>
 8005570:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005574:	0d1b      	lsrs	r3, r3, #20
 8005576:	051b      	lsls	r3, r3, #20
 8005578:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800557c:	d90f      	bls.n	800559e <_strtod_l+0x7ce>
 800557e:	6963      	ldr	r3, [r4, #20]
 8005580:	b913      	cbnz	r3, 8005588 <_strtod_l+0x7b8>
 8005582:	6923      	ldr	r3, [r4, #16]
 8005584:	2b01      	cmp	r3, #1
 8005586:	dd0a      	ble.n	800559e <_strtod_l+0x7ce>
 8005588:	4621      	mov	r1, r4
 800558a:	2201      	movs	r2, #1
 800558c:	4648      	mov	r0, r9
 800558e:	f002 f8e9 	bl	8007764 <__lshift>
 8005592:	4641      	mov	r1, r8
 8005594:	4604      	mov	r4, r0
 8005596:	f002 f939 	bl	800780c <__mcmp>
 800559a:	2800      	cmp	r0, #0
 800559c:	dc67      	bgt.n	800566e <_strtod_l+0x89e>
 800559e:	9b04      	ldr	r3, [sp, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d171      	bne.n	8005688 <_strtod_l+0x8b8>
 80055a4:	e63d      	b.n	8005222 <_strtod_l+0x452>
 80055a6:	f018 0f01 	tst.w	r8, #1
 80055aa:	d004      	beq.n	80055b6 <_strtod_l+0x7e6>
 80055ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80055b0:	f7fb f9aa 	bl	8000908 <__aeabi_dmul>
 80055b4:	2301      	movs	r3, #1
 80055b6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80055ba:	3508      	adds	r5, #8
 80055bc:	e6e5      	b.n	800538a <_strtod_l+0x5ba>
 80055be:	f04f 32ff 	mov.w	r2, #4294967295
 80055c2:	fa02 f303 	lsl.w	r3, r2, r3
 80055c6:	ea03 0a0a 	and.w	sl, r3, sl
 80055ca:	e6ff      	b.n	80053cc <_strtod_l+0x5fc>
 80055cc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80055d0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80055d4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80055d8:	36e2      	adds	r6, #226	; 0xe2
 80055da:	fa01 f306 	lsl.w	r3, r1, r6
 80055de:	930a      	str	r3, [sp, #40]	; 0x28
 80055e0:	910f      	str	r1, [sp, #60]	; 0x3c
 80055e2:	e75d      	b.n	80054a0 <_strtod_l+0x6d0>
 80055e4:	2300      	movs	r3, #0
 80055e6:	930a      	str	r3, [sp, #40]	; 0x28
 80055e8:	2301      	movs	r3, #1
 80055ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80055ec:	e758      	b.n	80054a0 <_strtod_l+0x6d0>
 80055ee:	4632      	mov	r2, r6
 80055f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80055f2:	4648      	mov	r0, r9
 80055f4:	f002 f8b6 	bl	8007764 <__lshift>
 80055f8:	901c      	str	r0, [sp, #112]	; 0x70
 80055fa:	2800      	cmp	r0, #0
 80055fc:	f47f af7c 	bne.w	80054f8 <_strtod_l+0x728>
 8005600:	e604      	b.n	800520c <_strtod_l+0x43c>
 8005602:	bf00      	nop
 8005604:	08008368 	.word	0x08008368
 8005608:	fffffc02 	.word	0xfffffc02
 800560c:	465d      	mov	r5, fp
 800560e:	f040 8086 	bne.w	800571e <_strtod_l+0x94e>
 8005612:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005614:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005618:	b32a      	cbz	r2, 8005666 <_strtod_l+0x896>
 800561a:	4aaf      	ldr	r2, [pc, #700]	; (80058d8 <_strtod_l+0xb08>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d153      	bne.n	80056c8 <_strtod_l+0x8f8>
 8005620:	9b04      	ldr	r3, [sp, #16]
 8005622:	4650      	mov	r0, sl
 8005624:	b1d3      	cbz	r3, 800565c <_strtod_l+0x88c>
 8005626:	4aad      	ldr	r2, [pc, #692]	; (80058dc <_strtod_l+0xb0c>)
 8005628:	402a      	ands	r2, r5
 800562a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800562e:	f04f 31ff 	mov.w	r1, #4294967295
 8005632:	d816      	bhi.n	8005662 <_strtod_l+0x892>
 8005634:	0d12      	lsrs	r2, r2, #20
 8005636:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800563a:	fa01 f303 	lsl.w	r3, r1, r3
 800563e:	4298      	cmp	r0, r3
 8005640:	d142      	bne.n	80056c8 <_strtod_l+0x8f8>
 8005642:	4ba7      	ldr	r3, [pc, #668]	; (80058e0 <_strtod_l+0xb10>)
 8005644:	429d      	cmp	r5, r3
 8005646:	d102      	bne.n	800564e <_strtod_l+0x87e>
 8005648:	3001      	adds	r0, #1
 800564a:	f43f addf 	beq.w	800520c <_strtod_l+0x43c>
 800564e:	4ba3      	ldr	r3, [pc, #652]	; (80058dc <_strtod_l+0xb0c>)
 8005650:	402b      	ands	r3, r5
 8005652:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005656:	f04f 0a00 	mov.w	sl, #0
 800565a:	e7a0      	b.n	800559e <_strtod_l+0x7ce>
 800565c:	f04f 33ff 	mov.w	r3, #4294967295
 8005660:	e7ed      	b.n	800563e <_strtod_l+0x86e>
 8005662:	460b      	mov	r3, r1
 8005664:	e7eb      	b.n	800563e <_strtod_l+0x86e>
 8005666:	bb7b      	cbnz	r3, 80056c8 <_strtod_l+0x8f8>
 8005668:	f1ba 0f00 	cmp.w	sl, #0
 800566c:	d12c      	bne.n	80056c8 <_strtod_l+0x8f8>
 800566e:	9904      	ldr	r1, [sp, #16]
 8005670:	4a9a      	ldr	r2, [pc, #616]	; (80058dc <_strtod_l+0xb0c>)
 8005672:	465b      	mov	r3, fp
 8005674:	b1f1      	cbz	r1, 80056b4 <_strtod_l+0x8e4>
 8005676:	ea02 010b 	and.w	r1, r2, fp
 800567a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800567e:	dc19      	bgt.n	80056b4 <_strtod_l+0x8e4>
 8005680:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005684:	f77f ae5b 	ble.w	800533e <_strtod_l+0x56e>
 8005688:	4a96      	ldr	r2, [pc, #600]	; (80058e4 <_strtod_l+0xb14>)
 800568a:	2300      	movs	r3, #0
 800568c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005690:	4650      	mov	r0, sl
 8005692:	4659      	mov	r1, fp
 8005694:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005698:	f7fb f936 	bl	8000908 <__aeabi_dmul>
 800569c:	4682      	mov	sl, r0
 800569e:	468b      	mov	fp, r1
 80056a0:	2900      	cmp	r1, #0
 80056a2:	f47f adbe 	bne.w	8005222 <_strtod_l+0x452>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	f47f adbb 	bne.w	8005222 <_strtod_l+0x452>
 80056ac:	2322      	movs	r3, #34	; 0x22
 80056ae:	f8c9 3000 	str.w	r3, [r9]
 80056b2:	e5b6      	b.n	8005222 <_strtod_l+0x452>
 80056b4:	4013      	ands	r3, r2
 80056b6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80056ba:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80056be:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80056c2:	f04f 3aff 	mov.w	sl, #4294967295
 80056c6:	e76a      	b.n	800559e <_strtod_l+0x7ce>
 80056c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056ca:	b193      	cbz	r3, 80056f2 <_strtod_l+0x922>
 80056cc:	422b      	tst	r3, r5
 80056ce:	f43f af66 	beq.w	800559e <_strtod_l+0x7ce>
 80056d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056d4:	9a04      	ldr	r2, [sp, #16]
 80056d6:	4650      	mov	r0, sl
 80056d8:	4659      	mov	r1, fp
 80056da:	b173      	cbz	r3, 80056fa <_strtod_l+0x92a>
 80056dc:	f7ff fb5a 	bl	8004d94 <sulp>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80056e8:	f7fa ff58 	bl	800059c <__adddf3>
 80056ec:	4682      	mov	sl, r0
 80056ee:	468b      	mov	fp, r1
 80056f0:	e755      	b.n	800559e <_strtod_l+0x7ce>
 80056f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056f4:	ea13 0f0a 	tst.w	r3, sl
 80056f8:	e7e9      	b.n	80056ce <_strtod_l+0x8fe>
 80056fa:	f7ff fb4b 	bl	8004d94 <sulp>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005706:	f7fa ff47 	bl	8000598 <__aeabi_dsub>
 800570a:	2200      	movs	r2, #0
 800570c:	2300      	movs	r3, #0
 800570e:	4682      	mov	sl, r0
 8005710:	468b      	mov	fp, r1
 8005712:	f7fb fb61 	bl	8000dd8 <__aeabi_dcmpeq>
 8005716:	2800      	cmp	r0, #0
 8005718:	f47f ae11 	bne.w	800533e <_strtod_l+0x56e>
 800571c:	e73f      	b.n	800559e <_strtod_l+0x7ce>
 800571e:	4641      	mov	r1, r8
 8005720:	4620      	mov	r0, r4
 8005722:	f002 f9b0 	bl	8007a86 <__ratio>
 8005726:	ec57 6b10 	vmov	r6, r7, d0
 800572a:	2200      	movs	r2, #0
 800572c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005730:	ee10 0a10 	vmov	r0, s0
 8005734:	4639      	mov	r1, r7
 8005736:	f7fb fb63 	bl	8000e00 <__aeabi_dcmple>
 800573a:	2800      	cmp	r0, #0
 800573c:	d077      	beq.n	800582e <_strtod_l+0xa5e>
 800573e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005740:	2b00      	cmp	r3, #0
 8005742:	d04a      	beq.n	80057da <_strtod_l+0xa0a>
 8005744:	4b68      	ldr	r3, [pc, #416]	; (80058e8 <_strtod_l+0xb18>)
 8005746:	2200      	movs	r2, #0
 8005748:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800574c:	4f66      	ldr	r7, [pc, #408]	; (80058e8 <_strtod_l+0xb18>)
 800574e:	2600      	movs	r6, #0
 8005750:	4b62      	ldr	r3, [pc, #392]	; (80058dc <_strtod_l+0xb0c>)
 8005752:	402b      	ands	r3, r5
 8005754:	930f      	str	r3, [sp, #60]	; 0x3c
 8005756:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005758:	4b64      	ldr	r3, [pc, #400]	; (80058ec <_strtod_l+0xb1c>)
 800575a:	429a      	cmp	r2, r3
 800575c:	f040 80ce 	bne.w	80058fc <_strtod_l+0xb2c>
 8005760:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005764:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005768:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800576c:	ec4b ab10 	vmov	d0, sl, fp
 8005770:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005774:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005778:	f002 f8c0 	bl	80078fc <__ulp>
 800577c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005780:	ec53 2b10 	vmov	r2, r3, d0
 8005784:	f7fb f8c0 	bl	8000908 <__aeabi_dmul>
 8005788:	4652      	mov	r2, sl
 800578a:	465b      	mov	r3, fp
 800578c:	f7fa ff06 	bl	800059c <__adddf3>
 8005790:	460b      	mov	r3, r1
 8005792:	4952      	ldr	r1, [pc, #328]	; (80058dc <_strtod_l+0xb0c>)
 8005794:	4a56      	ldr	r2, [pc, #344]	; (80058f0 <_strtod_l+0xb20>)
 8005796:	4019      	ands	r1, r3
 8005798:	4291      	cmp	r1, r2
 800579a:	4682      	mov	sl, r0
 800579c:	d95b      	bls.n	8005856 <_strtod_l+0xa86>
 800579e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057a0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d103      	bne.n	80057b0 <_strtod_l+0x9e0>
 80057a8:	9b08      	ldr	r3, [sp, #32]
 80057aa:	3301      	adds	r3, #1
 80057ac:	f43f ad2e 	beq.w	800520c <_strtod_l+0x43c>
 80057b0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80058e0 <_strtod_l+0xb10>
 80057b4:	f04f 3aff 	mov.w	sl, #4294967295
 80057b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80057ba:	4648      	mov	r0, r9
 80057bc:	f001 fe06 	bl	80073cc <_Bfree>
 80057c0:	9905      	ldr	r1, [sp, #20]
 80057c2:	4648      	mov	r0, r9
 80057c4:	f001 fe02 	bl	80073cc <_Bfree>
 80057c8:	4641      	mov	r1, r8
 80057ca:	4648      	mov	r0, r9
 80057cc:	f001 fdfe 	bl	80073cc <_Bfree>
 80057d0:	4621      	mov	r1, r4
 80057d2:	4648      	mov	r0, r9
 80057d4:	f001 fdfa 	bl	80073cc <_Bfree>
 80057d8:	e619      	b.n	800540e <_strtod_l+0x63e>
 80057da:	f1ba 0f00 	cmp.w	sl, #0
 80057de:	d11a      	bne.n	8005816 <_strtod_l+0xa46>
 80057e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80057e4:	b9eb      	cbnz	r3, 8005822 <_strtod_l+0xa52>
 80057e6:	2200      	movs	r2, #0
 80057e8:	4b3f      	ldr	r3, [pc, #252]	; (80058e8 <_strtod_l+0xb18>)
 80057ea:	4630      	mov	r0, r6
 80057ec:	4639      	mov	r1, r7
 80057ee:	f7fb fafd 	bl	8000dec <__aeabi_dcmplt>
 80057f2:	b9c8      	cbnz	r0, 8005828 <_strtod_l+0xa58>
 80057f4:	4630      	mov	r0, r6
 80057f6:	4639      	mov	r1, r7
 80057f8:	2200      	movs	r2, #0
 80057fa:	4b3e      	ldr	r3, [pc, #248]	; (80058f4 <_strtod_l+0xb24>)
 80057fc:	f7fb f884 	bl	8000908 <__aeabi_dmul>
 8005800:	4606      	mov	r6, r0
 8005802:	460f      	mov	r7, r1
 8005804:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005808:	9618      	str	r6, [sp, #96]	; 0x60
 800580a:	9319      	str	r3, [sp, #100]	; 0x64
 800580c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005810:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005814:	e79c      	b.n	8005750 <_strtod_l+0x980>
 8005816:	f1ba 0f01 	cmp.w	sl, #1
 800581a:	d102      	bne.n	8005822 <_strtod_l+0xa52>
 800581c:	2d00      	cmp	r5, #0
 800581e:	f43f ad8e 	beq.w	800533e <_strtod_l+0x56e>
 8005822:	2200      	movs	r2, #0
 8005824:	4b34      	ldr	r3, [pc, #208]	; (80058f8 <_strtod_l+0xb28>)
 8005826:	e78f      	b.n	8005748 <_strtod_l+0x978>
 8005828:	2600      	movs	r6, #0
 800582a:	4f32      	ldr	r7, [pc, #200]	; (80058f4 <_strtod_l+0xb24>)
 800582c:	e7ea      	b.n	8005804 <_strtod_l+0xa34>
 800582e:	4b31      	ldr	r3, [pc, #196]	; (80058f4 <_strtod_l+0xb24>)
 8005830:	4630      	mov	r0, r6
 8005832:	4639      	mov	r1, r7
 8005834:	2200      	movs	r2, #0
 8005836:	f7fb f867 	bl	8000908 <__aeabi_dmul>
 800583a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800583c:	4606      	mov	r6, r0
 800583e:	460f      	mov	r7, r1
 8005840:	b933      	cbnz	r3, 8005850 <_strtod_l+0xa80>
 8005842:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005846:	9010      	str	r0, [sp, #64]	; 0x40
 8005848:	9311      	str	r3, [sp, #68]	; 0x44
 800584a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800584e:	e7df      	b.n	8005810 <_strtod_l+0xa40>
 8005850:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8005854:	e7f9      	b.n	800584a <_strtod_l+0xa7a>
 8005856:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800585a:	9b04      	ldr	r3, [sp, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1ab      	bne.n	80057b8 <_strtod_l+0x9e8>
 8005860:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005864:	0d1b      	lsrs	r3, r3, #20
 8005866:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005868:	051b      	lsls	r3, r3, #20
 800586a:	429a      	cmp	r2, r3
 800586c:	465d      	mov	r5, fp
 800586e:	d1a3      	bne.n	80057b8 <_strtod_l+0x9e8>
 8005870:	4639      	mov	r1, r7
 8005872:	4630      	mov	r0, r6
 8005874:	f7fb faf8 	bl	8000e68 <__aeabi_d2iz>
 8005878:	f7fa ffdc 	bl	8000834 <__aeabi_i2d>
 800587c:	460b      	mov	r3, r1
 800587e:	4602      	mov	r2, r0
 8005880:	4639      	mov	r1, r7
 8005882:	4630      	mov	r0, r6
 8005884:	f7fa fe88 	bl	8000598 <__aeabi_dsub>
 8005888:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800588a:	4606      	mov	r6, r0
 800588c:	460f      	mov	r7, r1
 800588e:	b933      	cbnz	r3, 800589e <_strtod_l+0xace>
 8005890:	f1ba 0f00 	cmp.w	sl, #0
 8005894:	d103      	bne.n	800589e <_strtod_l+0xace>
 8005896:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800589a:	2d00      	cmp	r5, #0
 800589c:	d06d      	beq.n	800597a <_strtod_l+0xbaa>
 800589e:	a30a      	add	r3, pc, #40	; (adr r3, 80058c8 <_strtod_l+0xaf8>)
 80058a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a4:	4630      	mov	r0, r6
 80058a6:	4639      	mov	r1, r7
 80058a8:	f7fb faa0 	bl	8000dec <__aeabi_dcmplt>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	f47f acb8 	bne.w	8005222 <_strtod_l+0x452>
 80058b2:	a307      	add	r3, pc, #28	; (adr r3, 80058d0 <_strtod_l+0xb00>)
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	4630      	mov	r0, r6
 80058ba:	4639      	mov	r1, r7
 80058bc:	f7fb fab4 	bl	8000e28 <__aeabi_dcmpgt>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	f43f af79 	beq.w	80057b8 <_strtod_l+0x9e8>
 80058c6:	e4ac      	b.n	8005222 <_strtod_l+0x452>
 80058c8:	94a03595 	.word	0x94a03595
 80058cc:	3fdfffff 	.word	0x3fdfffff
 80058d0:	35afe535 	.word	0x35afe535
 80058d4:	3fe00000 	.word	0x3fe00000
 80058d8:	000fffff 	.word	0x000fffff
 80058dc:	7ff00000 	.word	0x7ff00000
 80058e0:	7fefffff 	.word	0x7fefffff
 80058e4:	39500000 	.word	0x39500000
 80058e8:	3ff00000 	.word	0x3ff00000
 80058ec:	7fe00000 	.word	0x7fe00000
 80058f0:	7c9fffff 	.word	0x7c9fffff
 80058f4:	3fe00000 	.word	0x3fe00000
 80058f8:	bff00000 	.word	0xbff00000
 80058fc:	9b04      	ldr	r3, [sp, #16]
 80058fe:	b333      	cbz	r3, 800594e <_strtod_l+0xb7e>
 8005900:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005902:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005906:	d822      	bhi.n	800594e <_strtod_l+0xb7e>
 8005908:	a327      	add	r3, pc, #156	; (adr r3, 80059a8 <_strtod_l+0xbd8>)
 800590a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590e:	4630      	mov	r0, r6
 8005910:	4639      	mov	r1, r7
 8005912:	f7fb fa75 	bl	8000e00 <__aeabi_dcmple>
 8005916:	b1a0      	cbz	r0, 8005942 <_strtod_l+0xb72>
 8005918:	4639      	mov	r1, r7
 800591a:	4630      	mov	r0, r6
 800591c:	f7fb facc 	bl	8000eb8 <__aeabi_d2uiz>
 8005920:	2800      	cmp	r0, #0
 8005922:	bf08      	it	eq
 8005924:	2001      	moveq	r0, #1
 8005926:	f7fa ff75 	bl	8000814 <__aeabi_ui2d>
 800592a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800592c:	4606      	mov	r6, r0
 800592e:	460f      	mov	r7, r1
 8005930:	bb03      	cbnz	r3, 8005974 <_strtod_l+0xba4>
 8005932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005936:	9012      	str	r0, [sp, #72]	; 0x48
 8005938:	9313      	str	r3, [sp, #76]	; 0x4c
 800593a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800593e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005944:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005946:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	930b      	str	r3, [sp, #44]	; 0x2c
 800594e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8005952:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8005956:	f001 ffd1 	bl	80078fc <__ulp>
 800595a:	4650      	mov	r0, sl
 800595c:	ec53 2b10 	vmov	r2, r3, d0
 8005960:	4659      	mov	r1, fp
 8005962:	f7fa ffd1 	bl	8000908 <__aeabi_dmul>
 8005966:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800596a:	f7fa fe17 	bl	800059c <__adddf3>
 800596e:	4682      	mov	sl, r0
 8005970:	468b      	mov	fp, r1
 8005972:	e772      	b.n	800585a <_strtod_l+0xa8a>
 8005974:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8005978:	e7df      	b.n	800593a <_strtod_l+0xb6a>
 800597a:	a30d      	add	r3, pc, #52	; (adr r3, 80059b0 <_strtod_l+0xbe0>)
 800597c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005980:	f7fb fa34 	bl	8000dec <__aeabi_dcmplt>
 8005984:	e79c      	b.n	80058c0 <_strtod_l+0xaf0>
 8005986:	2300      	movs	r3, #0
 8005988:	930d      	str	r3, [sp, #52]	; 0x34
 800598a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800598c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	f7ff ba61 	b.w	8004e56 <_strtod_l+0x86>
 8005994:	2b65      	cmp	r3, #101	; 0x65
 8005996:	f04f 0200 	mov.w	r2, #0
 800599a:	f43f ab4e 	beq.w	800503a <_strtod_l+0x26a>
 800599e:	2101      	movs	r1, #1
 80059a0:	4614      	mov	r4, r2
 80059a2:	9104      	str	r1, [sp, #16]
 80059a4:	f7ff bacb 	b.w	8004f3e <_strtod_l+0x16e>
 80059a8:	ffc00000 	.word	0xffc00000
 80059ac:	41dfffff 	.word	0x41dfffff
 80059b0:	94a03595 	.word	0x94a03595
 80059b4:	3fcfffff 	.word	0x3fcfffff

080059b8 <_strtod_r>:
 80059b8:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <_strtod_r+0x18>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	b410      	push	{r4}
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	4c04      	ldr	r4, [pc, #16]	; (80059d4 <_strtod_r+0x1c>)
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	bf08      	it	eq
 80059c6:	4623      	moveq	r3, r4
 80059c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059cc:	f7ff ba00 	b.w	8004dd0 <_strtod_l>
 80059d0:	2000000c 	.word	0x2000000c
 80059d4:	20000070 	.word	0x20000070

080059d8 <_strtol_l.isra.0>:
 80059d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059dc:	4680      	mov	r8, r0
 80059de:	4689      	mov	r9, r1
 80059e0:	4692      	mov	sl, r2
 80059e2:	461e      	mov	r6, r3
 80059e4:	460f      	mov	r7, r1
 80059e6:	463d      	mov	r5, r7
 80059e8:	9808      	ldr	r0, [sp, #32]
 80059ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80059ee:	f001 fc27 	bl	8007240 <__locale_ctype_ptr_l>
 80059f2:	4420      	add	r0, r4
 80059f4:	7843      	ldrb	r3, [r0, #1]
 80059f6:	f013 0308 	ands.w	r3, r3, #8
 80059fa:	d132      	bne.n	8005a62 <_strtol_l.isra.0+0x8a>
 80059fc:	2c2d      	cmp	r4, #45	; 0x2d
 80059fe:	d132      	bne.n	8005a66 <_strtol_l.isra.0+0x8e>
 8005a00:	787c      	ldrb	r4, [r7, #1]
 8005a02:	1cbd      	adds	r5, r7, #2
 8005a04:	2201      	movs	r2, #1
 8005a06:	2e00      	cmp	r6, #0
 8005a08:	d05d      	beq.n	8005ac6 <_strtol_l.isra.0+0xee>
 8005a0a:	2e10      	cmp	r6, #16
 8005a0c:	d109      	bne.n	8005a22 <_strtol_l.isra.0+0x4a>
 8005a0e:	2c30      	cmp	r4, #48	; 0x30
 8005a10:	d107      	bne.n	8005a22 <_strtol_l.isra.0+0x4a>
 8005a12:	782b      	ldrb	r3, [r5, #0]
 8005a14:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005a18:	2b58      	cmp	r3, #88	; 0x58
 8005a1a:	d14f      	bne.n	8005abc <_strtol_l.isra.0+0xe4>
 8005a1c:	786c      	ldrb	r4, [r5, #1]
 8005a1e:	2610      	movs	r6, #16
 8005a20:	3502      	adds	r5, #2
 8005a22:	2a00      	cmp	r2, #0
 8005a24:	bf14      	ite	ne
 8005a26:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005a2a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005a2e:	2700      	movs	r7, #0
 8005a30:	fbb1 fcf6 	udiv	ip, r1, r6
 8005a34:	4638      	mov	r0, r7
 8005a36:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005a3a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005a3e:	2b09      	cmp	r3, #9
 8005a40:	d817      	bhi.n	8005a72 <_strtol_l.isra.0+0x9a>
 8005a42:	461c      	mov	r4, r3
 8005a44:	42a6      	cmp	r6, r4
 8005a46:	dd23      	ble.n	8005a90 <_strtol_l.isra.0+0xb8>
 8005a48:	1c7b      	adds	r3, r7, #1
 8005a4a:	d007      	beq.n	8005a5c <_strtol_l.isra.0+0x84>
 8005a4c:	4584      	cmp	ip, r0
 8005a4e:	d31c      	bcc.n	8005a8a <_strtol_l.isra.0+0xb2>
 8005a50:	d101      	bne.n	8005a56 <_strtol_l.isra.0+0x7e>
 8005a52:	45a6      	cmp	lr, r4
 8005a54:	db19      	blt.n	8005a8a <_strtol_l.isra.0+0xb2>
 8005a56:	fb00 4006 	mla	r0, r0, r6, r4
 8005a5a:	2701      	movs	r7, #1
 8005a5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a60:	e7eb      	b.n	8005a3a <_strtol_l.isra.0+0x62>
 8005a62:	462f      	mov	r7, r5
 8005a64:	e7bf      	b.n	80059e6 <_strtol_l.isra.0+0xe>
 8005a66:	2c2b      	cmp	r4, #43	; 0x2b
 8005a68:	bf04      	itt	eq
 8005a6a:	1cbd      	addeq	r5, r7, #2
 8005a6c:	787c      	ldrbeq	r4, [r7, #1]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	e7c9      	b.n	8005a06 <_strtol_l.isra.0+0x2e>
 8005a72:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005a76:	2b19      	cmp	r3, #25
 8005a78:	d801      	bhi.n	8005a7e <_strtol_l.isra.0+0xa6>
 8005a7a:	3c37      	subs	r4, #55	; 0x37
 8005a7c:	e7e2      	b.n	8005a44 <_strtol_l.isra.0+0x6c>
 8005a7e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005a82:	2b19      	cmp	r3, #25
 8005a84:	d804      	bhi.n	8005a90 <_strtol_l.isra.0+0xb8>
 8005a86:	3c57      	subs	r4, #87	; 0x57
 8005a88:	e7dc      	b.n	8005a44 <_strtol_l.isra.0+0x6c>
 8005a8a:	f04f 37ff 	mov.w	r7, #4294967295
 8005a8e:	e7e5      	b.n	8005a5c <_strtol_l.isra.0+0x84>
 8005a90:	1c7b      	adds	r3, r7, #1
 8005a92:	d108      	bne.n	8005aa6 <_strtol_l.isra.0+0xce>
 8005a94:	2322      	movs	r3, #34	; 0x22
 8005a96:	f8c8 3000 	str.w	r3, [r8]
 8005a9a:	4608      	mov	r0, r1
 8005a9c:	f1ba 0f00 	cmp.w	sl, #0
 8005aa0:	d107      	bne.n	8005ab2 <_strtol_l.isra.0+0xda>
 8005aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa6:	b102      	cbz	r2, 8005aaa <_strtol_l.isra.0+0xd2>
 8005aa8:	4240      	negs	r0, r0
 8005aaa:	f1ba 0f00 	cmp.w	sl, #0
 8005aae:	d0f8      	beq.n	8005aa2 <_strtol_l.isra.0+0xca>
 8005ab0:	b10f      	cbz	r7, 8005ab6 <_strtol_l.isra.0+0xde>
 8005ab2:	f105 39ff 	add.w	r9, r5, #4294967295
 8005ab6:	f8ca 9000 	str.w	r9, [sl]
 8005aba:	e7f2      	b.n	8005aa2 <_strtol_l.isra.0+0xca>
 8005abc:	2430      	movs	r4, #48	; 0x30
 8005abe:	2e00      	cmp	r6, #0
 8005ac0:	d1af      	bne.n	8005a22 <_strtol_l.isra.0+0x4a>
 8005ac2:	2608      	movs	r6, #8
 8005ac4:	e7ad      	b.n	8005a22 <_strtol_l.isra.0+0x4a>
 8005ac6:	2c30      	cmp	r4, #48	; 0x30
 8005ac8:	d0a3      	beq.n	8005a12 <_strtol_l.isra.0+0x3a>
 8005aca:	260a      	movs	r6, #10
 8005acc:	e7a9      	b.n	8005a22 <_strtol_l.isra.0+0x4a>
	...

08005ad0 <_strtol_r>:
 8005ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ad2:	4c06      	ldr	r4, [pc, #24]	; (8005aec <_strtol_r+0x1c>)
 8005ad4:	4d06      	ldr	r5, [pc, #24]	; (8005af0 <_strtol_r+0x20>)
 8005ad6:	6824      	ldr	r4, [r4, #0]
 8005ad8:	6a24      	ldr	r4, [r4, #32]
 8005ada:	2c00      	cmp	r4, #0
 8005adc:	bf08      	it	eq
 8005ade:	462c      	moveq	r4, r5
 8005ae0:	9400      	str	r4, [sp, #0]
 8005ae2:	f7ff ff79 	bl	80059d8 <_strtol_l.isra.0>
 8005ae6:	b003      	add	sp, #12
 8005ae8:	bd30      	pop	{r4, r5, pc}
 8005aea:	bf00      	nop
 8005aec:	2000000c 	.word	0x2000000c
 8005af0:	20000070 	.word	0x20000070

08005af4 <__swbuf_r>:
 8005af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af6:	460e      	mov	r6, r1
 8005af8:	4614      	mov	r4, r2
 8005afa:	4605      	mov	r5, r0
 8005afc:	b118      	cbz	r0, 8005b06 <__swbuf_r+0x12>
 8005afe:	6983      	ldr	r3, [r0, #24]
 8005b00:	b90b      	cbnz	r3, 8005b06 <__swbuf_r+0x12>
 8005b02:	f000 ffed 	bl	8006ae0 <__sinit>
 8005b06:	4b21      	ldr	r3, [pc, #132]	; (8005b8c <__swbuf_r+0x98>)
 8005b08:	429c      	cmp	r4, r3
 8005b0a:	d12a      	bne.n	8005b62 <__swbuf_r+0x6e>
 8005b0c:	686c      	ldr	r4, [r5, #4]
 8005b0e:	69a3      	ldr	r3, [r4, #24]
 8005b10:	60a3      	str	r3, [r4, #8]
 8005b12:	89a3      	ldrh	r3, [r4, #12]
 8005b14:	071a      	lsls	r2, r3, #28
 8005b16:	d52e      	bpl.n	8005b76 <__swbuf_r+0x82>
 8005b18:	6923      	ldr	r3, [r4, #16]
 8005b1a:	b363      	cbz	r3, 8005b76 <__swbuf_r+0x82>
 8005b1c:	6923      	ldr	r3, [r4, #16]
 8005b1e:	6820      	ldr	r0, [r4, #0]
 8005b20:	1ac0      	subs	r0, r0, r3
 8005b22:	6963      	ldr	r3, [r4, #20]
 8005b24:	b2f6      	uxtb	r6, r6
 8005b26:	4283      	cmp	r3, r0
 8005b28:	4637      	mov	r7, r6
 8005b2a:	dc04      	bgt.n	8005b36 <__swbuf_r+0x42>
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	4628      	mov	r0, r5
 8005b30:	f000 ff6c 	bl	8006a0c <_fflush_r>
 8005b34:	bb28      	cbnz	r0, 8005b82 <__swbuf_r+0x8e>
 8005b36:	68a3      	ldr	r3, [r4, #8]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	60a3      	str	r3, [r4, #8]
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	6022      	str	r2, [r4, #0]
 8005b42:	701e      	strb	r6, [r3, #0]
 8005b44:	6963      	ldr	r3, [r4, #20]
 8005b46:	3001      	adds	r0, #1
 8005b48:	4283      	cmp	r3, r0
 8005b4a:	d004      	beq.n	8005b56 <__swbuf_r+0x62>
 8005b4c:	89a3      	ldrh	r3, [r4, #12]
 8005b4e:	07db      	lsls	r3, r3, #31
 8005b50:	d519      	bpl.n	8005b86 <__swbuf_r+0x92>
 8005b52:	2e0a      	cmp	r6, #10
 8005b54:	d117      	bne.n	8005b86 <__swbuf_r+0x92>
 8005b56:	4621      	mov	r1, r4
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f000 ff57 	bl	8006a0c <_fflush_r>
 8005b5e:	b190      	cbz	r0, 8005b86 <__swbuf_r+0x92>
 8005b60:	e00f      	b.n	8005b82 <__swbuf_r+0x8e>
 8005b62:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <__swbuf_r+0x9c>)
 8005b64:	429c      	cmp	r4, r3
 8005b66:	d101      	bne.n	8005b6c <__swbuf_r+0x78>
 8005b68:	68ac      	ldr	r4, [r5, #8]
 8005b6a:	e7d0      	b.n	8005b0e <__swbuf_r+0x1a>
 8005b6c:	4b09      	ldr	r3, [pc, #36]	; (8005b94 <__swbuf_r+0xa0>)
 8005b6e:	429c      	cmp	r4, r3
 8005b70:	bf08      	it	eq
 8005b72:	68ec      	ldreq	r4, [r5, #12]
 8005b74:	e7cb      	b.n	8005b0e <__swbuf_r+0x1a>
 8005b76:	4621      	mov	r1, r4
 8005b78:	4628      	mov	r0, r5
 8005b7a:	f000 f80d 	bl	8005b98 <__swsetup_r>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d0cc      	beq.n	8005b1c <__swbuf_r+0x28>
 8005b82:	f04f 37ff 	mov.w	r7, #4294967295
 8005b86:	4638      	mov	r0, r7
 8005b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	080083c0 	.word	0x080083c0
 8005b90:	080083e0 	.word	0x080083e0
 8005b94:	080083a0 	.word	0x080083a0

08005b98 <__swsetup_r>:
 8005b98:	4b32      	ldr	r3, [pc, #200]	; (8005c64 <__swsetup_r+0xcc>)
 8005b9a:	b570      	push	{r4, r5, r6, lr}
 8005b9c:	681d      	ldr	r5, [r3, #0]
 8005b9e:	4606      	mov	r6, r0
 8005ba0:	460c      	mov	r4, r1
 8005ba2:	b125      	cbz	r5, 8005bae <__swsetup_r+0x16>
 8005ba4:	69ab      	ldr	r3, [r5, #24]
 8005ba6:	b913      	cbnz	r3, 8005bae <__swsetup_r+0x16>
 8005ba8:	4628      	mov	r0, r5
 8005baa:	f000 ff99 	bl	8006ae0 <__sinit>
 8005bae:	4b2e      	ldr	r3, [pc, #184]	; (8005c68 <__swsetup_r+0xd0>)
 8005bb0:	429c      	cmp	r4, r3
 8005bb2:	d10f      	bne.n	8005bd4 <__swsetup_r+0x3c>
 8005bb4:	686c      	ldr	r4, [r5, #4]
 8005bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	0715      	lsls	r5, r2, #28
 8005bbe:	d42c      	bmi.n	8005c1a <__swsetup_r+0x82>
 8005bc0:	06d0      	lsls	r0, r2, #27
 8005bc2:	d411      	bmi.n	8005be8 <__swsetup_r+0x50>
 8005bc4:	2209      	movs	r2, #9
 8005bc6:	6032      	str	r2, [r6, #0]
 8005bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bcc:	81a3      	strh	r3, [r4, #12]
 8005bce:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd2:	e03e      	b.n	8005c52 <__swsetup_r+0xba>
 8005bd4:	4b25      	ldr	r3, [pc, #148]	; (8005c6c <__swsetup_r+0xd4>)
 8005bd6:	429c      	cmp	r4, r3
 8005bd8:	d101      	bne.n	8005bde <__swsetup_r+0x46>
 8005bda:	68ac      	ldr	r4, [r5, #8]
 8005bdc:	e7eb      	b.n	8005bb6 <__swsetup_r+0x1e>
 8005bde:	4b24      	ldr	r3, [pc, #144]	; (8005c70 <__swsetup_r+0xd8>)
 8005be0:	429c      	cmp	r4, r3
 8005be2:	bf08      	it	eq
 8005be4:	68ec      	ldreq	r4, [r5, #12]
 8005be6:	e7e6      	b.n	8005bb6 <__swsetup_r+0x1e>
 8005be8:	0751      	lsls	r1, r2, #29
 8005bea:	d512      	bpl.n	8005c12 <__swsetup_r+0x7a>
 8005bec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bee:	b141      	cbz	r1, 8005c02 <__swsetup_r+0x6a>
 8005bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bf4:	4299      	cmp	r1, r3
 8005bf6:	d002      	beq.n	8005bfe <__swsetup_r+0x66>
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	f001 ffc1 	bl	8007b80 <_free_r>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	6363      	str	r3, [r4, #52]	; 0x34
 8005c02:	89a3      	ldrh	r3, [r4, #12]
 8005c04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c08:	81a3      	strh	r3, [r4, #12]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	6063      	str	r3, [r4, #4]
 8005c0e:	6923      	ldr	r3, [r4, #16]
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	89a3      	ldrh	r3, [r4, #12]
 8005c14:	f043 0308 	orr.w	r3, r3, #8
 8005c18:	81a3      	strh	r3, [r4, #12]
 8005c1a:	6923      	ldr	r3, [r4, #16]
 8005c1c:	b94b      	cbnz	r3, 8005c32 <__swsetup_r+0x9a>
 8005c1e:	89a3      	ldrh	r3, [r4, #12]
 8005c20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c28:	d003      	beq.n	8005c32 <__swsetup_r+0x9a>
 8005c2a:	4621      	mov	r1, r4
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	f001 fb3f 	bl	80072b0 <__smakebuf_r>
 8005c32:	89a2      	ldrh	r2, [r4, #12]
 8005c34:	f012 0301 	ands.w	r3, r2, #1
 8005c38:	d00c      	beq.n	8005c54 <__swsetup_r+0xbc>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60a3      	str	r3, [r4, #8]
 8005c3e:	6963      	ldr	r3, [r4, #20]
 8005c40:	425b      	negs	r3, r3
 8005c42:	61a3      	str	r3, [r4, #24]
 8005c44:	6923      	ldr	r3, [r4, #16]
 8005c46:	b953      	cbnz	r3, 8005c5e <__swsetup_r+0xc6>
 8005c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c4c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005c50:	d1ba      	bne.n	8005bc8 <__swsetup_r+0x30>
 8005c52:	bd70      	pop	{r4, r5, r6, pc}
 8005c54:	0792      	lsls	r2, r2, #30
 8005c56:	bf58      	it	pl
 8005c58:	6963      	ldrpl	r3, [r4, #20]
 8005c5a:	60a3      	str	r3, [r4, #8]
 8005c5c:	e7f2      	b.n	8005c44 <__swsetup_r+0xac>
 8005c5e:	2000      	movs	r0, #0
 8005c60:	e7f7      	b.n	8005c52 <__swsetup_r+0xba>
 8005c62:	bf00      	nop
 8005c64:	2000000c 	.word	0x2000000c
 8005c68:	080083c0 	.word	0x080083c0
 8005c6c:	080083e0 	.word	0x080083e0
 8005c70:	080083a0 	.word	0x080083a0

08005c74 <quorem>:
 8005c74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c78:	6903      	ldr	r3, [r0, #16]
 8005c7a:	690c      	ldr	r4, [r1, #16]
 8005c7c:	42a3      	cmp	r3, r4
 8005c7e:	4680      	mov	r8, r0
 8005c80:	f2c0 8082 	blt.w	8005d88 <quorem+0x114>
 8005c84:	3c01      	subs	r4, #1
 8005c86:	f101 0714 	add.w	r7, r1, #20
 8005c8a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005c8e:	f100 0614 	add.w	r6, r0, #20
 8005c92:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005c96:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005c9a:	eb06 030c 	add.w	r3, r6, ip
 8005c9e:	3501      	adds	r5, #1
 8005ca0:	eb07 090c 	add.w	r9, r7, ip
 8005ca4:	9301      	str	r3, [sp, #4]
 8005ca6:	fbb0 f5f5 	udiv	r5, r0, r5
 8005caa:	b395      	cbz	r5, 8005d12 <quorem+0x9e>
 8005cac:	f04f 0a00 	mov.w	sl, #0
 8005cb0:	4638      	mov	r0, r7
 8005cb2:	46b6      	mov	lr, r6
 8005cb4:	46d3      	mov	fp, sl
 8005cb6:	f850 2b04 	ldr.w	r2, [r0], #4
 8005cba:	b293      	uxth	r3, r2
 8005cbc:	fb05 a303 	mla	r3, r5, r3, sl
 8005cc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	ebab 0303 	sub.w	r3, fp, r3
 8005cca:	0c12      	lsrs	r2, r2, #16
 8005ccc:	f8de b000 	ldr.w	fp, [lr]
 8005cd0:	fb05 a202 	mla	r2, r5, r2, sl
 8005cd4:	fa13 f38b 	uxtah	r3, r3, fp
 8005cd8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005cdc:	fa1f fb82 	uxth.w	fp, r2
 8005ce0:	f8de 2000 	ldr.w	r2, [lr]
 8005ce4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005ce8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cf2:	4581      	cmp	r9, r0
 8005cf4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005cf8:	f84e 3b04 	str.w	r3, [lr], #4
 8005cfc:	d2db      	bcs.n	8005cb6 <quorem+0x42>
 8005cfe:	f856 300c 	ldr.w	r3, [r6, ip]
 8005d02:	b933      	cbnz	r3, 8005d12 <quorem+0x9e>
 8005d04:	9b01      	ldr	r3, [sp, #4]
 8005d06:	3b04      	subs	r3, #4
 8005d08:	429e      	cmp	r6, r3
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	d330      	bcc.n	8005d70 <quorem+0xfc>
 8005d0e:	f8c8 4010 	str.w	r4, [r8, #16]
 8005d12:	4640      	mov	r0, r8
 8005d14:	f001 fd7a 	bl	800780c <__mcmp>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	db25      	blt.n	8005d68 <quorem+0xf4>
 8005d1c:	3501      	adds	r5, #1
 8005d1e:	4630      	mov	r0, r6
 8005d20:	f04f 0c00 	mov.w	ip, #0
 8005d24:	f857 2b04 	ldr.w	r2, [r7], #4
 8005d28:	f8d0 e000 	ldr.w	lr, [r0]
 8005d2c:	b293      	uxth	r3, r2
 8005d2e:	ebac 0303 	sub.w	r3, ip, r3
 8005d32:	0c12      	lsrs	r2, r2, #16
 8005d34:	fa13 f38e 	uxtah	r3, r3, lr
 8005d38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d46:	45b9      	cmp	r9, r7
 8005d48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d4c:	f840 3b04 	str.w	r3, [r0], #4
 8005d50:	d2e8      	bcs.n	8005d24 <quorem+0xb0>
 8005d52:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005d56:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005d5a:	b92a      	cbnz	r2, 8005d68 <quorem+0xf4>
 8005d5c:	3b04      	subs	r3, #4
 8005d5e:	429e      	cmp	r6, r3
 8005d60:	461a      	mov	r2, r3
 8005d62:	d30b      	bcc.n	8005d7c <quorem+0x108>
 8005d64:	f8c8 4010 	str.w	r4, [r8, #16]
 8005d68:	4628      	mov	r0, r5
 8005d6a:	b003      	add	sp, #12
 8005d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d70:	6812      	ldr	r2, [r2, #0]
 8005d72:	3b04      	subs	r3, #4
 8005d74:	2a00      	cmp	r2, #0
 8005d76:	d1ca      	bne.n	8005d0e <quorem+0x9a>
 8005d78:	3c01      	subs	r4, #1
 8005d7a:	e7c5      	b.n	8005d08 <quorem+0x94>
 8005d7c:	6812      	ldr	r2, [r2, #0]
 8005d7e:	3b04      	subs	r3, #4
 8005d80:	2a00      	cmp	r2, #0
 8005d82:	d1ef      	bne.n	8005d64 <quorem+0xf0>
 8005d84:	3c01      	subs	r4, #1
 8005d86:	e7ea      	b.n	8005d5e <quorem+0xea>
 8005d88:	2000      	movs	r0, #0
 8005d8a:	e7ee      	b.n	8005d6a <quorem+0xf6>
 8005d8c:	0000      	movs	r0, r0
	...

08005d90 <_dtoa_r>:
 8005d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d94:	ec57 6b10 	vmov	r6, r7, d0
 8005d98:	b097      	sub	sp, #92	; 0x5c
 8005d9a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d9c:	9106      	str	r1, [sp, #24]
 8005d9e:	4604      	mov	r4, r0
 8005da0:	920b      	str	r2, [sp, #44]	; 0x2c
 8005da2:	9312      	str	r3, [sp, #72]	; 0x48
 8005da4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005da8:	e9cd 6700 	strd	r6, r7, [sp]
 8005dac:	b93d      	cbnz	r5, 8005dbe <_dtoa_r+0x2e>
 8005dae:	2010      	movs	r0, #16
 8005db0:	f001 fabe 	bl	8007330 <malloc>
 8005db4:	6260      	str	r0, [r4, #36]	; 0x24
 8005db6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005dba:	6005      	str	r5, [r0, #0]
 8005dbc:	60c5      	str	r5, [r0, #12]
 8005dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dc0:	6819      	ldr	r1, [r3, #0]
 8005dc2:	b151      	cbz	r1, 8005dda <_dtoa_r+0x4a>
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	604a      	str	r2, [r1, #4]
 8005dc8:	2301      	movs	r3, #1
 8005dca:	4093      	lsls	r3, r2
 8005dcc:	608b      	str	r3, [r1, #8]
 8005dce:	4620      	mov	r0, r4
 8005dd0:	f001 fafc 	bl	80073cc <_Bfree>
 8005dd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	1e3b      	subs	r3, r7, #0
 8005ddc:	bfbb      	ittet	lt
 8005dde:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005de2:	9301      	strlt	r3, [sp, #4]
 8005de4:	2300      	movge	r3, #0
 8005de6:	2201      	movlt	r2, #1
 8005de8:	bfac      	ite	ge
 8005dea:	f8c8 3000 	strge.w	r3, [r8]
 8005dee:	f8c8 2000 	strlt.w	r2, [r8]
 8005df2:	4baf      	ldr	r3, [pc, #700]	; (80060b0 <_dtoa_r+0x320>)
 8005df4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005df8:	ea33 0308 	bics.w	r3, r3, r8
 8005dfc:	d114      	bne.n	8005e28 <_dtoa_r+0x98>
 8005dfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e00:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	9b00      	ldr	r3, [sp, #0]
 8005e08:	b923      	cbnz	r3, 8005e14 <_dtoa_r+0x84>
 8005e0a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	f000 8542 	beq.w	8006898 <_dtoa_r+0xb08>
 8005e14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e16:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80060c4 <_dtoa_r+0x334>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 8544 	beq.w	80068a8 <_dtoa_r+0xb18>
 8005e20:	f10b 0303 	add.w	r3, fp, #3
 8005e24:	f000 bd3e 	b.w	80068a4 <_dtoa_r+0xb14>
 8005e28:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	2300      	movs	r3, #0
 8005e30:	4630      	mov	r0, r6
 8005e32:	4639      	mov	r1, r7
 8005e34:	f7fa ffd0 	bl	8000dd8 <__aeabi_dcmpeq>
 8005e38:	4681      	mov	r9, r0
 8005e3a:	b168      	cbz	r0, 8005e58 <_dtoa_r+0xc8>
 8005e3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e3e:	2301      	movs	r3, #1
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 8524 	beq.w	8006892 <_dtoa_r+0xb02>
 8005e4a:	4b9a      	ldr	r3, [pc, #616]	; (80060b4 <_dtoa_r+0x324>)
 8005e4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e4e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005e52:	6013      	str	r3, [r2, #0]
 8005e54:	f000 bd28 	b.w	80068a8 <_dtoa_r+0xb18>
 8005e58:	aa14      	add	r2, sp, #80	; 0x50
 8005e5a:	a915      	add	r1, sp, #84	; 0x54
 8005e5c:	ec47 6b10 	vmov	d0, r6, r7
 8005e60:	4620      	mov	r0, r4
 8005e62:	f001 fdc1 	bl	80079e8 <__d2b>
 8005e66:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005e6a:	9004      	str	r0, [sp, #16]
 8005e6c:	2d00      	cmp	r5, #0
 8005e6e:	d07c      	beq.n	8005f6a <_dtoa_r+0x1da>
 8005e70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005e74:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005e78:	46b2      	mov	sl, r6
 8005e7a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005e7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e82:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005e86:	2200      	movs	r2, #0
 8005e88:	4b8b      	ldr	r3, [pc, #556]	; (80060b8 <_dtoa_r+0x328>)
 8005e8a:	4650      	mov	r0, sl
 8005e8c:	4659      	mov	r1, fp
 8005e8e:	f7fa fb83 	bl	8000598 <__aeabi_dsub>
 8005e92:	a381      	add	r3, pc, #516	; (adr r3, 8006098 <_dtoa_r+0x308>)
 8005e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e98:	f7fa fd36 	bl	8000908 <__aeabi_dmul>
 8005e9c:	a380      	add	r3, pc, #512	; (adr r3, 80060a0 <_dtoa_r+0x310>)
 8005e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea2:	f7fa fb7b 	bl	800059c <__adddf3>
 8005ea6:	4606      	mov	r6, r0
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	460f      	mov	r7, r1
 8005eac:	f7fa fcc2 	bl	8000834 <__aeabi_i2d>
 8005eb0:	a37d      	add	r3, pc, #500	; (adr r3, 80060a8 <_dtoa_r+0x318>)
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	f7fa fd27 	bl	8000908 <__aeabi_dmul>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	4630      	mov	r0, r6
 8005ec0:	4639      	mov	r1, r7
 8005ec2:	f7fa fb6b 	bl	800059c <__adddf3>
 8005ec6:	4606      	mov	r6, r0
 8005ec8:	460f      	mov	r7, r1
 8005eca:	f7fa ffcd 	bl	8000e68 <__aeabi_d2iz>
 8005ece:	2200      	movs	r2, #0
 8005ed0:	4682      	mov	sl, r0
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	4630      	mov	r0, r6
 8005ed6:	4639      	mov	r1, r7
 8005ed8:	f7fa ff88 	bl	8000dec <__aeabi_dcmplt>
 8005edc:	b148      	cbz	r0, 8005ef2 <_dtoa_r+0x162>
 8005ede:	4650      	mov	r0, sl
 8005ee0:	f7fa fca8 	bl	8000834 <__aeabi_i2d>
 8005ee4:	4632      	mov	r2, r6
 8005ee6:	463b      	mov	r3, r7
 8005ee8:	f7fa ff76 	bl	8000dd8 <__aeabi_dcmpeq>
 8005eec:	b908      	cbnz	r0, 8005ef2 <_dtoa_r+0x162>
 8005eee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ef2:	f1ba 0f16 	cmp.w	sl, #22
 8005ef6:	d859      	bhi.n	8005fac <_dtoa_r+0x21c>
 8005ef8:	4970      	ldr	r1, [pc, #448]	; (80060bc <_dtoa_r+0x32c>)
 8005efa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005efe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f06:	f7fa ff8f 	bl	8000e28 <__aeabi_dcmpgt>
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d050      	beq.n	8005fb0 <_dtoa_r+0x220>
 8005f0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f12:	2300      	movs	r3, #0
 8005f14:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f18:	1b5d      	subs	r5, r3, r5
 8005f1a:	f1b5 0801 	subs.w	r8, r5, #1
 8005f1e:	bf49      	itett	mi
 8005f20:	f1c5 0301 	rsbmi	r3, r5, #1
 8005f24:	2300      	movpl	r3, #0
 8005f26:	9305      	strmi	r3, [sp, #20]
 8005f28:	f04f 0800 	movmi.w	r8, #0
 8005f2c:	bf58      	it	pl
 8005f2e:	9305      	strpl	r3, [sp, #20]
 8005f30:	f1ba 0f00 	cmp.w	sl, #0
 8005f34:	db3e      	blt.n	8005fb4 <_dtoa_r+0x224>
 8005f36:	2300      	movs	r3, #0
 8005f38:	44d0      	add	r8, sl
 8005f3a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005f3e:	9307      	str	r3, [sp, #28]
 8005f40:	9b06      	ldr	r3, [sp, #24]
 8005f42:	2b09      	cmp	r3, #9
 8005f44:	f200 8090 	bhi.w	8006068 <_dtoa_r+0x2d8>
 8005f48:	2b05      	cmp	r3, #5
 8005f4a:	bfc4      	itt	gt
 8005f4c:	3b04      	subgt	r3, #4
 8005f4e:	9306      	strgt	r3, [sp, #24]
 8005f50:	9b06      	ldr	r3, [sp, #24]
 8005f52:	f1a3 0302 	sub.w	r3, r3, #2
 8005f56:	bfcc      	ite	gt
 8005f58:	2500      	movgt	r5, #0
 8005f5a:	2501      	movle	r5, #1
 8005f5c:	2b03      	cmp	r3, #3
 8005f5e:	f200 808f 	bhi.w	8006080 <_dtoa_r+0x2f0>
 8005f62:	e8df f003 	tbb	[pc, r3]
 8005f66:	7f7d      	.short	0x7f7d
 8005f68:	7131      	.short	0x7131
 8005f6a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005f6e:	441d      	add	r5, r3
 8005f70:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005f74:	2820      	cmp	r0, #32
 8005f76:	dd13      	ble.n	8005fa0 <_dtoa_r+0x210>
 8005f78:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005f7c:	9b00      	ldr	r3, [sp, #0]
 8005f7e:	fa08 f800 	lsl.w	r8, r8, r0
 8005f82:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005f86:	fa23 f000 	lsr.w	r0, r3, r0
 8005f8a:	ea48 0000 	orr.w	r0, r8, r0
 8005f8e:	f7fa fc41 	bl	8000814 <__aeabi_ui2d>
 8005f92:	2301      	movs	r3, #1
 8005f94:	4682      	mov	sl, r0
 8005f96:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005f9a:	3d01      	subs	r5, #1
 8005f9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005f9e:	e772      	b.n	8005e86 <_dtoa_r+0xf6>
 8005fa0:	9b00      	ldr	r3, [sp, #0]
 8005fa2:	f1c0 0020 	rsb	r0, r0, #32
 8005fa6:	fa03 f000 	lsl.w	r0, r3, r0
 8005faa:	e7f0      	b.n	8005f8e <_dtoa_r+0x1fe>
 8005fac:	2301      	movs	r3, #1
 8005fae:	e7b1      	b.n	8005f14 <_dtoa_r+0x184>
 8005fb0:	900f      	str	r0, [sp, #60]	; 0x3c
 8005fb2:	e7b0      	b.n	8005f16 <_dtoa_r+0x186>
 8005fb4:	9b05      	ldr	r3, [sp, #20]
 8005fb6:	eba3 030a 	sub.w	r3, r3, sl
 8005fba:	9305      	str	r3, [sp, #20]
 8005fbc:	f1ca 0300 	rsb	r3, sl, #0
 8005fc0:	9307      	str	r3, [sp, #28]
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	930e      	str	r3, [sp, #56]	; 0x38
 8005fc6:	e7bb      	b.n	8005f40 <_dtoa_r+0x1b0>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	930a      	str	r3, [sp, #40]	; 0x28
 8005fcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	dd59      	ble.n	8006086 <_dtoa_r+0x2f6>
 8005fd2:	9302      	str	r3, [sp, #8]
 8005fd4:	4699      	mov	r9, r3
 8005fd6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005fd8:	2200      	movs	r2, #0
 8005fda:	6072      	str	r2, [r6, #4]
 8005fdc:	2204      	movs	r2, #4
 8005fde:	f102 0014 	add.w	r0, r2, #20
 8005fe2:	4298      	cmp	r0, r3
 8005fe4:	6871      	ldr	r1, [r6, #4]
 8005fe6:	d953      	bls.n	8006090 <_dtoa_r+0x300>
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f001 f9bb 	bl	8007364 <_Balloc>
 8005fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ff0:	6030      	str	r0, [r6, #0]
 8005ff2:	f1b9 0f0e 	cmp.w	r9, #14
 8005ff6:	f8d3 b000 	ldr.w	fp, [r3]
 8005ffa:	f200 80e6 	bhi.w	80061ca <_dtoa_r+0x43a>
 8005ffe:	2d00      	cmp	r5, #0
 8006000:	f000 80e3 	beq.w	80061ca <_dtoa_r+0x43a>
 8006004:	ed9d 7b00 	vldr	d7, [sp]
 8006008:	f1ba 0f00 	cmp.w	sl, #0
 800600c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006010:	dd74      	ble.n	80060fc <_dtoa_r+0x36c>
 8006012:	4a2a      	ldr	r2, [pc, #168]	; (80060bc <_dtoa_r+0x32c>)
 8006014:	f00a 030f 	and.w	r3, sl, #15
 8006018:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800601c:	ed93 7b00 	vldr	d7, [r3]
 8006020:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006024:	06f0      	lsls	r0, r6, #27
 8006026:	ed8d 7b08 	vstr	d7, [sp, #32]
 800602a:	d565      	bpl.n	80060f8 <_dtoa_r+0x368>
 800602c:	4b24      	ldr	r3, [pc, #144]	; (80060c0 <_dtoa_r+0x330>)
 800602e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006032:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006036:	f7fa fd91 	bl	8000b5c <__aeabi_ddiv>
 800603a:	e9cd 0100 	strd	r0, r1, [sp]
 800603e:	f006 060f 	and.w	r6, r6, #15
 8006042:	2503      	movs	r5, #3
 8006044:	4f1e      	ldr	r7, [pc, #120]	; (80060c0 <_dtoa_r+0x330>)
 8006046:	e04c      	b.n	80060e2 <_dtoa_r+0x352>
 8006048:	2301      	movs	r3, #1
 800604a:	930a      	str	r3, [sp, #40]	; 0x28
 800604c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800604e:	4453      	add	r3, sl
 8006050:	f103 0901 	add.w	r9, r3, #1
 8006054:	9302      	str	r3, [sp, #8]
 8006056:	464b      	mov	r3, r9
 8006058:	2b01      	cmp	r3, #1
 800605a:	bfb8      	it	lt
 800605c:	2301      	movlt	r3, #1
 800605e:	e7ba      	b.n	8005fd6 <_dtoa_r+0x246>
 8006060:	2300      	movs	r3, #0
 8006062:	e7b2      	b.n	8005fca <_dtoa_r+0x23a>
 8006064:	2300      	movs	r3, #0
 8006066:	e7f0      	b.n	800604a <_dtoa_r+0x2ba>
 8006068:	2501      	movs	r5, #1
 800606a:	2300      	movs	r3, #0
 800606c:	9306      	str	r3, [sp, #24]
 800606e:	950a      	str	r5, [sp, #40]	; 0x28
 8006070:	f04f 33ff 	mov.w	r3, #4294967295
 8006074:	9302      	str	r3, [sp, #8]
 8006076:	4699      	mov	r9, r3
 8006078:	2200      	movs	r2, #0
 800607a:	2312      	movs	r3, #18
 800607c:	920b      	str	r2, [sp, #44]	; 0x2c
 800607e:	e7aa      	b.n	8005fd6 <_dtoa_r+0x246>
 8006080:	2301      	movs	r3, #1
 8006082:	930a      	str	r3, [sp, #40]	; 0x28
 8006084:	e7f4      	b.n	8006070 <_dtoa_r+0x2e0>
 8006086:	2301      	movs	r3, #1
 8006088:	9302      	str	r3, [sp, #8]
 800608a:	4699      	mov	r9, r3
 800608c:	461a      	mov	r2, r3
 800608e:	e7f5      	b.n	800607c <_dtoa_r+0x2ec>
 8006090:	3101      	adds	r1, #1
 8006092:	6071      	str	r1, [r6, #4]
 8006094:	0052      	lsls	r2, r2, #1
 8006096:	e7a2      	b.n	8005fde <_dtoa_r+0x24e>
 8006098:	636f4361 	.word	0x636f4361
 800609c:	3fd287a7 	.word	0x3fd287a7
 80060a0:	8b60c8b3 	.word	0x8b60c8b3
 80060a4:	3fc68a28 	.word	0x3fc68a28
 80060a8:	509f79fb 	.word	0x509f79fb
 80060ac:	3fd34413 	.word	0x3fd34413
 80060b0:	7ff00000 	.word	0x7ff00000
 80060b4:	08008311 	.word	0x08008311
 80060b8:	3ff80000 	.word	0x3ff80000
 80060bc:	08008438 	.word	0x08008438
 80060c0:	08008410 	.word	0x08008410
 80060c4:	08008399 	.word	0x08008399
 80060c8:	07f1      	lsls	r1, r6, #31
 80060ca:	d508      	bpl.n	80060de <_dtoa_r+0x34e>
 80060cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060d4:	f7fa fc18 	bl	8000908 <__aeabi_dmul>
 80060d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80060dc:	3501      	adds	r5, #1
 80060de:	1076      	asrs	r6, r6, #1
 80060e0:	3708      	adds	r7, #8
 80060e2:	2e00      	cmp	r6, #0
 80060e4:	d1f0      	bne.n	80060c8 <_dtoa_r+0x338>
 80060e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80060ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060ee:	f7fa fd35 	bl	8000b5c <__aeabi_ddiv>
 80060f2:	e9cd 0100 	strd	r0, r1, [sp]
 80060f6:	e01a      	b.n	800612e <_dtoa_r+0x39e>
 80060f8:	2502      	movs	r5, #2
 80060fa:	e7a3      	b.n	8006044 <_dtoa_r+0x2b4>
 80060fc:	f000 80a0 	beq.w	8006240 <_dtoa_r+0x4b0>
 8006100:	f1ca 0600 	rsb	r6, sl, #0
 8006104:	4b9f      	ldr	r3, [pc, #636]	; (8006384 <_dtoa_r+0x5f4>)
 8006106:	4fa0      	ldr	r7, [pc, #640]	; (8006388 <_dtoa_r+0x5f8>)
 8006108:	f006 020f 	and.w	r2, r6, #15
 800610c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006114:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006118:	f7fa fbf6 	bl	8000908 <__aeabi_dmul>
 800611c:	e9cd 0100 	strd	r0, r1, [sp]
 8006120:	1136      	asrs	r6, r6, #4
 8006122:	2300      	movs	r3, #0
 8006124:	2502      	movs	r5, #2
 8006126:	2e00      	cmp	r6, #0
 8006128:	d17f      	bne.n	800622a <_dtoa_r+0x49a>
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1e1      	bne.n	80060f2 <_dtoa_r+0x362>
 800612e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 8087 	beq.w	8006244 <_dtoa_r+0x4b4>
 8006136:	e9dd 6700 	ldrd	r6, r7, [sp]
 800613a:	2200      	movs	r2, #0
 800613c:	4b93      	ldr	r3, [pc, #588]	; (800638c <_dtoa_r+0x5fc>)
 800613e:	4630      	mov	r0, r6
 8006140:	4639      	mov	r1, r7
 8006142:	f7fa fe53 	bl	8000dec <__aeabi_dcmplt>
 8006146:	2800      	cmp	r0, #0
 8006148:	d07c      	beq.n	8006244 <_dtoa_r+0x4b4>
 800614a:	f1b9 0f00 	cmp.w	r9, #0
 800614e:	d079      	beq.n	8006244 <_dtoa_r+0x4b4>
 8006150:	9b02      	ldr	r3, [sp, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	dd35      	ble.n	80061c2 <_dtoa_r+0x432>
 8006156:	f10a 33ff 	add.w	r3, sl, #4294967295
 800615a:	9308      	str	r3, [sp, #32]
 800615c:	4639      	mov	r1, r7
 800615e:	2200      	movs	r2, #0
 8006160:	4b8b      	ldr	r3, [pc, #556]	; (8006390 <_dtoa_r+0x600>)
 8006162:	4630      	mov	r0, r6
 8006164:	f7fa fbd0 	bl	8000908 <__aeabi_dmul>
 8006168:	e9cd 0100 	strd	r0, r1, [sp]
 800616c:	9f02      	ldr	r7, [sp, #8]
 800616e:	3501      	adds	r5, #1
 8006170:	4628      	mov	r0, r5
 8006172:	f7fa fb5f 	bl	8000834 <__aeabi_i2d>
 8006176:	e9dd 2300 	ldrd	r2, r3, [sp]
 800617a:	f7fa fbc5 	bl	8000908 <__aeabi_dmul>
 800617e:	2200      	movs	r2, #0
 8006180:	4b84      	ldr	r3, [pc, #528]	; (8006394 <_dtoa_r+0x604>)
 8006182:	f7fa fa0b 	bl	800059c <__adddf3>
 8006186:	4605      	mov	r5, r0
 8006188:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800618c:	2f00      	cmp	r7, #0
 800618e:	d15d      	bne.n	800624c <_dtoa_r+0x4bc>
 8006190:	2200      	movs	r2, #0
 8006192:	4b81      	ldr	r3, [pc, #516]	; (8006398 <_dtoa_r+0x608>)
 8006194:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006198:	f7fa f9fe 	bl	8000598 <__aeabi_dsub>
 800619c:	462a      	mov	r2, r5
 800619e:	4633      	mov	r3, r6
 80061a0:	e9cd 0100 	strd	r0, r1, [sp]
 80061a4:	f7fa fe40 	bl	8000e28 <__aeabi_dcmpgt>
 80061a8:	2800      	cmp	r0, #0
 80061aa:	f040 8288 	bne.w	80066be <_dtoa_r+0x92e>
 80061ae:	462a      	mov	r2, r5
 80061b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80061b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061b8:	f7fa fe18 	bl	8000dec <__aeabi_dcmplt>
 80061bc:	2800      	cmp	r0, #0
 80061be:	f040 827c 	bne.w	80066ba <_dtoa_r+0x92a>
 80061c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80061c6:	e9cd 2300 	strd	r2, r3, [sp]
 80061ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f2c0 8150 	blt.w	8006472 <_dtoa_r+0x6e2>
 80061d2:	f1ba 0f0e 	cmp.w	sl, #14
 80061d6:	f300 814c 	bgt.w	8006472 <_dtoa_r+0x6e2>
 80061da:	4b6a      	ldr	r3, [pc, #424]	; (8006384 <_dtoa_r+0x5f4>)
 80061dc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80061e0:	ed93 7b00 	vldr	d7, [r3]
 80061e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80061ec:	f280 80d8 	bge.w	80063a0 <_dtoa_r+0x610>
 80061f0:	f1b9 0f00 	cmp.w	r9, #0
 80061f4:	f300 80d4 	bgt.w	80063a0 <_dtoa_r+0x610>
 80061f8:	f040 825e 	bne.w	80066b8 <_dtoa_r+0x928>
 80061fc:	2200      	movs	r2, #0
 80061fe:	4b66      	ldr	r3, [pc, #408]	; (8006398 <_dtoa_r+0x608>)
 8006200:	ec51 0b17 	vmov	r0, r1, d7
 8006204:	f7fa fb80 	bl	8000908 <__aeabi_dmul>
 8006208:	e9dd 2300 	ldrd	r2, r3, [sp]
 800620c:	f7fa fe02 	bl	8000e14 <__aeabi_dcmpge>
 8006210:	464f      	mov	r7, r9
 8006212:	464e      	mov	r6, r9
 8006214:	2800      	cmp	r0, #0
 8006216:	f040 8234 	bne.w	8006682 <_dtoa_r+0x8f2>
 800621a:	2331      	movs	r3, #49	; 0x31
 800621c:	f10b 0501 	add.w	r5, fp, #1
 8006220:	f88b 3000 	strb.w	r3, [fp]
 8006224:	f10a 0a01 	add.w	sl, sl, #1
 8006228:	e22f      	b.n	800668a <_dtoa_r+0x8fa>
 800622a:	07f2      	lsls	r2, r6, #31
 800622c:	d505      	bpl.n	800623a <_dtoa_r+0x4aa>
 800622e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006232:	f7fa fb69 	bl	8000908 <__aeabi_dmul>
 8006236:	3501      	adds	r5, #1
 8006238:	2301      	movs	r3, #1
 800623a:	1076      	asrs	r6, r6, #1
 800623c:	3708      	adds	r7, #8
 800623e:	e772      	b.n	8006126 <_dtoa_r+0x396>
 8006240:	2502      	movs	r5, #2
 8006242:	e774      	b.n	800612e <_dtoa_r+0x39e>
 8006244:	f8cd a020 	str.w	sl, [sp, #32]
 8006248:	464f      	mov	r7, r9
 800624a:	e791      	b.n	8006170 <_dtoa_r+0x3e0>
 800624c:	4b4d      	ldr	r3, [pc, #308]	; (8006384 <_dtoa_r+0x5f4>)
 800624e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006252:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006258:	2b00      	cmp	r3, #0
 800625a:	d047      	beq.n	80062ec <_dtoa_r+0x55c>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	2000      	movs	r0, #0
 8006262:	494e      	ldr	r1, [pc, #312]	; (800639c <_dtoa_r+0x60c>)
 8006264:	f7fa fc7a 	bl	8000b5c <__aeabi_ddiv>
 8006268:	462a      	mov	r2, r5
 800626a:	4633      	mov	r3, r6
 800626c:	f7fa f994 	bl	8000598 <__aeabi_dsub>
 8006270:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006274:	465d      	mov	r5, fp
 8006276:	e9dd 0100 	ldrd	r0, r1, [sp]
 800627a:	f7fa fdf5 	bl	8000e68 <__aeabi_d2iz>
 800627e:	4606      	mov	r6, r0
 8006280:	f7fa fad8 	bl	8000834 <__aeabi_i2d>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	e9dd 0100 	ldrd	r0, r1, [sp]
 800628c:	f7fa f984 	bl	8000598 <__aeabi_dsub>
 8006290:	3630      	adds	r6, #48	; 0x30
 8006292:	f805 6b01 	strb.w	r6, [r5], #1
 8006296:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800629a:	e9cd 0100 	strd	r0, r1, [sp]
 800629e:	f7fa fda5 	bl	8000dec <__aeabi_dcmplt>
 80062a2:	2800      	cmp	r0, #0
 80062a4:	d163      	bne.n	800636e <_dtoa_r+0x5de>
 80062a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062aa:	2000      	movs	r0, #0
 80062ac:	4937      	ldr	r1, [pc, #220]	; (800638c <_dtoa_r+0x5fc>)
 80062ae:	f7fa f973 	bl	8000598 <__aeabi_dsub>
 80062b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80062b6:	f7fa fd99 	bl	8000dec <__aeabi_dcmplt>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	f040 80b7 	bne.w	800642e <_dtoa_r+0x69e>
 80062c0:	eba5 030b 	sub.w	r3, r5, fp
 80062c4:	429f      	cmp	r7, r3
 80062c6:	f77f af7c 	ble.w	80061c2 <_dtoa_r+0x432>
 80062ca:	2200      	movs	r2, #0
 80062cc:	4b30      	ldr	r3, [pc, #192]	; (8006390 <_dtoa_r+0x600>)
 80062ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062d2:	f7fa fb19 	bl	8000908 <__aeabi_dmul>
 80062d6:	2200      	movs	r2, #0
 80062d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80062dc:	4b2c      	ldr	r3, [pc, #176]	; (8006390 <_dtoa_r+0x600>)
 80062de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062e2:	f7fa fb11 	bl	8000908 <__aeabi_dmul>
 80062e6:	e9cd 0100 	strd	r0, r1, [sp]
 80062ea:	e7c4      	b.n	8006276 <_dtoa_r+0x4e6>
 80062ec:	462a      	mov	r2, r5
 80062ee:	4633      	mov	r3, r6
 80062f0:	f7fa fb0a 	bl	8000908 <__aeabi_dmul>
 80062f4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80062f8:	eb0b 0507 	add.w	r5, fp, r7
 80062fc:	465e      	mov	r6, fp
 80062fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006302:	f7fa fdb1 	bl	8000e68 <__aeabi_d2iz>
 8006306:	4607      	mov	r7, r0
 8006308:	f7fa fa94 	bl	8000834 <__aeabi_i2d>
 800630c:	3730      	adds	r7, #48	; 0x30
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006316:	f7fa f93f 	bl	8000598 <__aeabi_dsub>
 800631a:	f806 7b01 	strb.w	r7, [r6], #1
 800631e:	42ae      	cmp	r6, r5
 8006320:	e9cd 0100 	strd	r0, r1, [sp]
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	d126      	bne.n	8006378 <_dtoa_r+0x5e8>
 800632a:	4b1c      	ldr	r3, [pc, #112]	; (800639c <_dtoa_r+0x60c>)
 800632c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006330:	f7fa f934 	bl	800059c <__adddf3>
 8006334:	4602      	mov	r2, r0
 8006336:	460b      	mov	r3, r1
 8006338:	e9dd 0100 	ldrd	r0, r1, [sp]
 800633c:	f7fa fd74 	bl	8000e28 <__aeabi_dcmpgt>
 8006340:	2800      	cmp	r0, #0
 8006342:	d174      	bne.n	800642e <_dtoa_r+0x69e>
 8006344:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006348:	2000      	movs	r0, #0
 800634a:	4914      	ldr	r1, [pc, #80]	; (800639c <_dtoa_r+0x60c>)
 800634c:	f7fa f924 	bl	8000598 <__aeabi_dsub>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006358:	f7fa fd48 	bl	8000dec <__aeabi_dcmplt>
 800635c:	2800      	cmp	r0, #0
 800635e:	f43f af30 	beq.w	80061c2 <_dtoa_r+0x432>
 8006362:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006366:	2b30      	cmp	r3, #48	; 0x30
 8006368:	f105 32ff 	add.w	r2, r5, #4294967295
 800636c:	d002      	beq.n	8006374 <_dtoa_r+0x5e4>
 800636e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006372:	e04a      	b.n	800640a <_dtoa_r+0x67a>
 8006374:	4615      	mov	r5, r2
 8006376:	e7f4      	b.n	8006362 <_dtoa_r+0x5d2>
 8006378:	4b05      	ldr	r3, [pc, #20]	; (8006390 <_dtoa_r+0x600>)
 800637a:	f7fa fac5 	bl	8000908 <__aeabi_dmul>
 800637e:	e9cd 0100 	strd	r0, r1, [sp]
 8006382:	e7bc      	b.n	80062fe <_dtoa_r+0x56e>
 8006384:	08008438 	.word	0x08008438
 8006388:	08008410 	.word	0x08008410
 800638c:	3ff00000 	.word	0x3ff00000
 8006390:	40240000 	.word	0x40240000
 8006394:	401c0000 	.word	0x401c0000
 8006398:	40140000 	.word	0x40140000
 800639c:	3fe00000 	.word	0x3fe00000
 80063a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80063a4:	465d      	mov	r5, fp
 80063a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063aa:	4630      	mov	r0, r6
 80063ac:	4639      	mov	r1, r7
 80063ae:	f7fa fbd5 	bl	8000b5c <__aeabi_ddiv>
 80063b2:	f7fa fd59 	bl	8000e68 <__aeabi_d2iz>
 80063b6:	4680      	mov	r8, r0
 80063b8:	f7fa fa3c 	bl	8000834 <__aeabi_i2d>
 80063bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063c0:	f7fa faa2 	bl	8000908 <__aeabi_dmul>
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	4630      	mov	r0, r6
 80063ca:	4639      	mov	r1, r7
 80063cc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80063d0:	f7fa f8e2 	bl	8000598 <__aeabi_dsub>
 80063d4:	f805 6b01 	strb.w	r6, [r5], #1
 80063d8:	eba5 060b 	sub.w	r6, r5, fp
 80063dc:	45b1      	cmp	r9, r6
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	d139      	bne.n	8006458 <_dtoa_r+0x6c8>
 80063e4:	f7fa f8da 	bl	800059c <__adddf3>
 80063e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063ec:	4606      	mov	r6, r0
 80063ee:	460f      	mov	r7, r1
 80063f0:	f7fa fd1a 	bl	8000e28 <__aeabi_dcmpgt>
 80063f4:	b9c8      	cbnz	r0, 800642a <_dtoa_r+0x69a>
 80063f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063fa:	4630      	mov	r0, r6
 80063fc:	4639      	mov	r1, r7
 80063fe:	f7fa fceb 	bl	8000dd8 <__aeabi_dcmpeq>
 8006402:	b110      	cbz	r0, 800640a <_dtoa_r+0x67a>
 8006404:	f018 0f01 	tst.w	r8, #1
 8006408:	d10f      	bne.n	800642a <_dtoa_r+0x69a>
 800640a:	9904      	ldr	r1, [sp, #16]
 800640c:	4620      	mov	r0, r4
 800640e:	f000 ffdd 	bl	80073cc <_Bfree>
 8006412:	2300      	movs	r3, #0
 8006414:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006416:	702b      	strb	r3, [r5, #0]
 8006418:	f10a 0301 	add.w	r3, sl, #1
 800641c:	6013      	str	r3, [r2, #0]
 800641e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 8241 	beq.w	80068a8 <_dtoa_r+0xb18>
 8006426:	601d      	str	r5, [r3, #0]
 8006428:	e23e      	b.n	80068a8 <_dtoa_r+0xb18>
 800642a:	f8cd a020 	str.w	sl, [sp, #32]
 800642e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006432:	2a39      	cmp	r2, #57	; 0x39
 8006434:	f105 33ff 	add.w	r3, r5, #4294967295
 8006438:	d108      	bne.n	800644c <_dtoa_r+0x6bc>
 800643a:	459b      	cmp	fp, r3
 800643c:	d10a      	bne.n	8006454 <_dtoa_r+0x6c4>
 800643e:	9b08      	ldr	r3, [sp, #32]
 8006440:	3301      	adds	r3, #1
 8006442:	9308      	str	r3, [sp, #32]
 8006444:	2330      	movs	r3, #48	; 0x30
 8006446:	f88b 3000 	strb.w	r3, [fp]
 800644a:	465b      	mov	r3, fp
 800644c:	781a      	ldrb	r2, [r3, #0]
 800644e:	3201      	adds	r2, #1
 8006450:	701a      	strb	r2, [r3, #0]
 8006452:	e78c      	b.n	800636e <_dtoa_r+0x5de>
 8006454:	461d      	mov	r5, r3
 8006456:	e7ea      	b.n	800642e <_dtoa_r+0x69e>
 8006458:	2200      	movs	r2, #0
 800645a:	4b9b      	ldr	r3, [pc, #620]	; (80066c8 <_dtoa_r+0x938>)
 800645c:	f7fa fa54 	bl	8000908 <__aeabi_dmul>
 8006460:	2200      	movs	r2, #0
 8006462:	2300      	movs	r3, #0
 8006464:	4606      	mov	r6, r0
 8006466:	460f      	mov	r7, r1
 8006468:	f7fa fcb6 	bl	8000dd8 <__aeabi_dcmpeq>
 800646c:	2800      	cmp	r0, #0
 800646e:	d09a      	beq.n	80063a6 <_dtoa_r+0x616>
 8006470:	e7cb      	b.n	800640a <_dtoa_r+0x67a>
 8006472:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006474:	2a00      	cmp	r2, #0
 8006476:	f000 808b 	beq.w	8006590 <_dtoa_r+0x800>
 800647a:	9a06      	ldr	r2, [sp, #24]
 800647c:	2a01      	cmp	r2, #1
 800647e:	dc6e      	bgt.n	800655e <_dtoa_r+0x7ce>
 8006480:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006482:	2a00      	cmp	r2, #0
 8006484:	d067      	beq.n	8006556 <_dtoa_r+0x7c6>
 8006486:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800648a:	9f07      	ldr	r7, [sp, #28]
 800648c:	9d05      	ldr	r5, [sp, #20]
 800648e:	9a05      	ldr	r2, [sp, #20]
 8006490:	2101      	movs	r1, #1
 8006492:	441a      	add	r2, r3
 8006494:	4620      	mov	r0, r4
 8006496:	9205      	str	r2, [sp, #20]
 8006498:	4498      	add	r8, r3
 800649a:	f001 f875 	bl	8007588 <__i2b>
 800649e:	4606      	mov	r6, r0
 80064a0:	2d00      	cmp	r5, #0
 80064a2:	dd0c      	ble.n	80064be <_dtoa_r+0x72e>
 80064a4:	f1b8 0f00 	cmp.w	r8, #0
 80064a8:	dd09      	ble.n	80064be <_dtoa_r+0x72e>
 80064aa:	4545      	cmp	r5, r8
 80064ac:	9a05      	ldr	r2, [sp, #20]
 80064ae:	462b      	mov	r3, r5
 80064b0:	bfa8      	it	ge
 80064b2:	4643      	movge	r3, r8
 80064b4:	1ad2      	subs	r2, r2, r3
 80064b6:	9205      	str	r2, [sp, #20]
 80064b8:	1aed      	subs	r5, r5, r3
 80064ba:	eba8 0803 	sub.w	r8, r8, r3
 80064be:	9b07      	ldr	r3, [sp, #28]
 80064c0:	b1eb      	cbz	r3, 80064fe <_dtoa_r+0x76e>
 80064c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d067      	beq.n	8006598 <_dtoa_r+0x808>
 80064c8:	b18f      	cbz	r7, 80064ee <_dtoa_r+0x75e>
 80064ca:	4631      	mov	r1, r6
 80064cc:	463a      	mov	r2, r7
 80064ce:	4620      	mov	r0, r4
 80064d0:	f001 f8fa 	bl	80076c8 <__pow5mult>
 80064d4:	9a04      	ldr	r2, [sp, #16]
 80064d6:	4601      	mov	r1, r0
 80064d8:	4606      	mov	r6, r0
 80064da:	4620      	mov	r0, r4
 80064dc:	f001 f85d 	bl	800759a <__multiply>
 80064e0:	9904      	ldr	r1, [sp, #16]
 80064e2:	9008      	str	r0, [sp, #32]
 80064e4:	4620      	mov	r0, r4
 80064e6:	f000 ff71 	bl	80073cc <_Bfree>
 80064ea:	9b08      	ldr	r3, [sp, #32]
 80064ec:	9304      	str	r3, [sp, #16]
 80064ee:	9b07      	ldr	r3, [sp, #28]
 80064f0:	1bda      	subs	r2, r3, r7
 80064f2:	d004      	beq.n	80064fe <_dtoa_r+0x76e>
 80064f4:	9904      	ldr	r1, [sp, #16]
 80064f6:	4620      	mov	r0, r4
 80064f8:	f001 f8e6 	bl	80076c8 <__pow5mult>
 80064fc:	9004      	str	r0, [sp, #16]
 80064fe:	2101      	movs	r1, #1
 8006500:	4620      	mov	r0, r4
 8006502:	f001 f841 	bl	8007588 <__i2b>
 8006506:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006508:	4607      	mov	r7, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 81d0 	beq.w	80068b0 <_dtoa_r+0xb20>
 8006510:	461a      	mov	r2, r3
 8006512:	4601      	mov	r1, r0
 8006514:	4620      	mov	r0, r4
 8006516:	f001 f8d7 	bl	80076c8 <__pow5mult>
 800651a:	9b06      	ldr	r3, [sp, #24]
 800651c:	2b01      	cmp	r3, #1
 800651e:	4607      	mov	r7, r0
 8006520:	dc40      	bgt.n	80065a4 <_dtoa_r+0x814>
 8006522:	9b00      	ldr	r3, [sp, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d139      	bne.n	800659c <_dtoa_r+0x80c>
 8006528:	9b01      	ldr	r3, [sp, #4]
 800652a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800652e:	2b00      	cmp	r3, #0
 8006530:	d136      	bne.n	80065a0 <_dtoa_r+0x810>
 8006532:	9b01      	ldr	r3, [sp, #4]
 8006534:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006538:	0d1b      	lsrs	r3, r3, #20
 800653a:	051b      	lsls	r3, r3, #20
 800653c:	b12b      	cbz	r3, 800654a <_dtoa_r+0x7ba>
 800653e:	9b05      	ldr	r3, [sp, #20]
 8006540:	3301      	adds	r3, #1
 8006542:	9305      	str	r3, [sp, #20]
 8006544:	f108 0801 	add.w	r8, r8, #1
 8006548:	2301      	movs	r3, #1
 800654a:	9307      	str	r3, [sp, #28]
 800654c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800654e:	2b00      	cmp	r3, #0
 8006550:	d12a      	bne.n	80065a8 <_dtoa_r+0x818>
 8006552:	2001      	movs	r0, #1
 8006554:	e030      	b.n	80065b8 <_dtoa_r+0x828>
 8006556:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006558:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800655c:	e795      	b.n	800648a <_dtoa_r+0x6fa>
 800655e:	9b07      	ldr	r3, [sp, #28]
 8006560:	f109 37ff 	add.w	r7, r9, #4294967295
 8006564:	42bb      	cmp	r3, r7
 8006566:	bfbf      	itttt	lt
 8006568:	9b07      	ldrlt	r3, [sp, #28]
 800656a:	9707      	strlt	r7, [sp, #28]
 800656c:	1afa      	sublt	r2, r7, r3
 800656e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006570:	bfbb      	ittet	lt
 8006572:	189b      	addlt	r3, r3, r2
 8006574:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006576:	1bdf      	subge	r7, r3, r7
 8006578:	2700      	movlt	r7, #0
 800657a:	f1b9 0f00 	cmp.w	r9, #0
 800657e:	bfb5      	itete	lt
 8006580:	9b05      	ldrlt	r3, [sp, #20]
 8006582:	9d05      	ldrge	r5, [sp, #20]
 8006584:	eba3 0509 	sublt.w	r5, r3, r9
 8006588:	464b      	movge	r3, r9
 800658a:	bfb8      	it	lt
 800658c:	2300      	movlt	r3, #0
 800658e:	e77e      	b.n	800648e <_dtoa_r+0x6fe>
 8006590:	9f07      	ldr	r7, [sp, #28]
 8006592:	9d05      	ldr	r5, [sp, #20]
 8006594:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006596:	e783      	b.n	80064a0 <_dtoa_r+0x710>
 8006598:	9a07      	ldr	r2, [sp, #28]
 800659a:	e7ab      	b.n	80064f4 <_dtoa_r+0x764>
 800659c:	2300      	movs	r3, #0
 800659e:	e7d4      	b.n	800654a <_dtoa_r+0x7ba>
 80065a0:	9b00      	ldr	r3, [sp, #0]
 80065a2:	e7d2      	b.n	800654a <_dtoa_r+0x7ba>
 80065a4:	2300      	movs	r3, #0
 80065a6:	9307      	str	r3, [sp, #28]
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80065ae:	6918      	ldr	r0, [r3, #16]
 80065b0:	f000 ff9c 	bl	80074ec <__hi0bits>
 80065b4:	f1c0 0020 	rsb	r0, r0, #32
 80065b8:	4440      	add	r0, r8
 80065ba:	f010 001f 	ands.w	r0, r0, #31
 80065be:	d047      	beq.n	8006650 <_dtoa_r+0x8c0>
 80065c0:	f1c0 0320 	rsb	r3, r0, #32
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	dd3b      	ble.n	8006640 <_dtoa_r+0x8b0>
 80065c8:	9b05      	ldr	r3, [sp, #20]
 80065ca:	f1c0 001c 	rsb	r0, r0, #28
 80065ce:	4403      	add	r3, r0
 80065d0:	9305      	str	r3, [sp, #20]
 80065d2:	4405      	add	r5, r0
 80065d4:	4480      	add	r8, r0
 80065d6:	9b05      	ldr	r3, [sp, #20]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	dd05      	ble.n	80065e8 <_dtoa_r+0x858>
 80065dc:	461a      	mov	r2, r3
 80065de:	9904      	ldr	r1, [sp, #16]
 80065e0:	4620      	mov	r0, r4
 80065e2:	f001 f8bf 	bl	8007764 <__lshift>
 80065e6:	9004      	str	r0, [sp, #16]
 80065e8:	f1b8 0f00 	cmp.w	r8, #0
 80065ec:	dd05      	ble.n	80065fa <_dtoa_r+0x86a>
 80065ee:	4639      	mov	r1, r7
 80065f0:	4642      	mov	r2, r8
 80065f2:	4620      	mov	r0, r4
 80065f4:	f001 f8b6 	bl	8007764 <__lshift>
 80065f8:	4607      	mov	r7, r0
 80065fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065fc:	b353      	cbz	r3, 8006654 <_dtoa_r+0x8c4>
 80065fe:	4639      	mov	r1, r7
 8006600:	9804      	ldr	r0, [sp, #16]
 8006602:	f001 f903 	bl	800780c <__mcmp>
 8006606:	2800      	cmp	r0, #0
 8006608:	da24      	bge.n	8006654 <_dtoa_r+0x8c4>
 800660a:	2300      	movs	r3, #0
 800660c:	220a      	movs	r2, #10
 800660e:	9904      	ldr	r1, [sp, #16]
 8006610:	4620      	mov	r0, r4
 8006612:	f000 fef2 	bl	80073fa <__multadd>
 8006616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006618:	9004      	str	r0, [sp, #16]
 800661a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 814d 	beq.w	80068be <_dtoa_r+0xb2e>
 8006624:	2300      	movs	r3, #0
 8006626:	4631      	mov	r1, r6
 8006628:	220a      	movs	r2, #10
 800662a:	4620      	mov	r0, r4
 800662c:	f000 fee5 	bl	80073fa <__multadd>
 8006630:	9b02      	ldr	r3, [sp, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	4606      	mov	r6, r0
 8006636:	dc4f      	bgt.n	80066d8 <_dtoa_r+0x948>
 8006638:	9b06      	ldr	r3, [sp, #24]
 800663a:	2b02      	cmp	r3, #2
 800663c:	dd4c      	ble.n	80066d8 <_dtoa_r+0x948>
 800663e:	e011      	b.n	8006664 <_dtoa_r+0x8d4>
 8006640:	d0c9      	beq.n	80065d6 <_dtoa_r+0x846>
 8006642:	9a05      	ldr	r2, [sp, #20]
 8006644:	331c      	adds	r3, #28
 8006646:	441a      	add	r2, r3
 8006648:	9205      	str	r2, [sp, #20]
 800664a:	441d      	add	r5, r3
 800664c:	4498      	add	r8, r3
 800664e:	e7c2      	b.n	80065d6 <_dtoa_r+0x846>
 8006650:	4603      	mov	r3, r0
 8006652:	e7f6      	b.n	8006642 <_dtoa_r+0x8b2>
 8006654:	f1b9 0f00 	cmp.w	r9, #0
 8006658:	dc38      	bgt.n	80066cc <_dtoa_r+0x93c>
 800665a:	9b06      	ldr	r3, [sp, #24]
 800665c:	2b02      	cmp	r3, #2
 800665e:	dd35      	ble.n	80066cc <_dtoa_r+0x93c>
 8006660:	f8cd 9008 	str.w	r9, [sp, #8]
 8006664:	9b02      	ldr	r3, [sp, #8]
 8006666:	b963      	cbnz	r3, 8006682 <_dtoa_r+0x8f2>
 8006668:	4639      	mov	r1, r7
 800666a:	2205      	movs	r2, #5
 800666c:	4620      	mov	r0, r4
 800666e:	f000 fec4 	bl	80073fa <__multadd>
 8006672:	4601      	mov	r1, r0
 8006674:	4607      	mov	r7, r0
 8006676:	9804      	ldr	r0, [sp, #16]
 8006678:	f001 f8c8 	bl	800780c <__mcmp>
 800667c:	2800      	cmp	r0, #0
 800667e:	f73f adcc 	bgt.w	800621a <_dtoa_r+0x48a>
 8006682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006684:	465d      	mov	r5, fp
 8006686:	ea6f 0a03 	mvn.w	sl, r3
 800668a:	f04f 0900 	mov.w	r9, #0
 800668e:	4639      	mov	r1, r7
 8006690:	4620      	mov	r0, r4
 8006692:	f000 fe9b 	bl	80073cc <_Bfree>
 8006696:	2e00      	cmp	r6, #0
 8006698:	f43f aeb7 	beq.w	800640a <_dtoa_r+0x67a>
 800669c:	f1b9 0f00 	cmp.w	r9, #0
 80066a0:	d005      	beq.n	80066ae <_dtoa_r+0x91e>
 80066a2:	45b1      	cmp	r9, r6
 80066a4:	d003      	beq.n	80066ae <_dtoa_r+0x91e>
 80066a6:	4649      	mov	r1, r9
 80066a8:	4620      	mov	r0, r4
 80066aa:	f000 fe8f 	bl	80073cc <_Bfree>
 80066ae:	4631      	mov	r1, r6
 80066b0:	4620      	mov	r0, r4
 80066b2:	f000 fe8b 	bl	80073cc <_Bfree>
 80066b6:	e6a8      	b.n	800640a <_dtoa_r+0x67a>
 80066b8:	2700      	movs	r7, #0
 80066ba:	463e      	mov	r6, r7
 80066bc:	e7e1      	b.n	8006682 <_dtoa_r+0x8f2>
 80066be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80066c2:	463e      	mov	r6, r7
 80066c4:	e5a9      	b.n	800621a <_dtoa_r+0x48a>
 80066c6:	bf00      	nop
 80066c8:	40240000 	.word	0x40240000
 80066cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 80fa 	beq.w	80068cc <_dtoa_r+0xb3c>
 80066d8:	2d00      	cmp	r5, #0
 80066da:	dd05      	ble.n	80066e8 <_dtoa_r+0x958>
 80066dc:	4631      	mov	r1, r6
 80066de:	462a      	mov	r2, r5
 80066e0:	4620      	mov	r0, r4
 80066e2:	f001 f83f 	bl	8007764 <__lshift>
 80066e6:	4606      	mov	r6, r0
 80066e8:	9b07      	ldr	r3, [sp, #28]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d04c      	beq.n	8006788 <_dtoa_r+0x9f8>
 80066ee:	6871      	ldr	r1, [r6, #4]
 80066f0:	4620      	mov	r0, r4
 80066f2:	f000 fe37 	bl	8007364 <_Balloc>
 80066f6:	6932      	ldr	r2, [r6, #16]
 80066f8:	3202      	adds	r2, #2
 80066fa:	4605      	mov	r5, r0
 80066fc:	0092      	lsls	r2, r2, #2
 80066fe:	f106 010c 	add.w	r1, r6, #12
 8006702:	300c      	adds	r0, #12
 8006704:	f7fd fbbc 	bl	8003e80 <memcpy>
 8006708:	2201      	movs	r2, #1
 800670a:	4629      	mov	r1, r5
 800670c:	4620      	mov	r0, r4
 800670e:	f001 f829 	bl	8007764 <__lshift>
 8006712:	9b00      	ldr	r3, [sp, #0]
 8006714:	f8cd b014 	str.w	fp, [sp, #20]
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	46b1      	mov	r9, r6
 800671e:	9307      	str	r3, [sp, #28]
 8006720:	4606      	mov	r6, r0
 8006722:	4639      	mov	r1, r7
 8006724:	9804      	ldr	r0, [sp, #16]
 8006726:	f7ff faa5 	bl	8005c74 <quorem>
 800672a:	4649      	mov	r1, r9
 800672c:	4605      	mov	r5, r0
 800672e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006732:	9804      	ldr	r0, [sp, #16]
 8006734:	f001 f86a 	bl	800780c <__mcmp>
 8006738:	4632      	mov	r2, r6
 800673a:	9000      	str	r0, [sp, #0]
 800673c:	4639      	mov	r1, r7
 800673e:	4620      	mov	r0, r4
 8006740:	f001 f87e 	bl	8007840 <__mdiff>
 8006744:	68c3      	ldr	r3, [r0, #12]
 8006746:	4602      	mov	r2, r0
 8006748:	bb03      	cbnz	r3, 800678c <_dtoa_r+0x9fc>
 800674a:	4601      	mov	r1, r0
 800674c:	9008      	str	r0, [sp, #32]
 800674e:	9804      	ldr	r0, [sp, #16]
 8006750:	f001 f85c 	bl	800780c <__mcmp>
 8006754:	9a08      	ldr	r2, [sp, #32]
 8006756:	4603      	mov	r3, r0
 8006758:	4611      	mov	r1, r2
 800675a:	4620      	mov	r0, r4
 800675c:	9308      	str	r3, [sp, #32]
 800675e:	f000 fe35 	bl	80073cc <_Bfree>
 8006762:	9b08      	ldr	r3, [sp, #32]
 8006764:	b9a3      	cbnz	r3, 8006790 <_dtoa_r+0xa00>
 8006766:	9a06      	ldr	r2, [sp, #24]
 8006768:	b992      	cbnz	r2, 8006790 <_dtoa_r+0xa00>
 800676a:	9a07      	ldr	r2, [sp, #28]
 800676c:	b982      	cbnz	r2, 8006790 <_dtoa_r+0xa00>
 800676e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006772:	d029      	beq.n	80067c8 <_dtoa_r+0xa38>
 8006774:	9b00      	ldr	r3, [sp, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	dd01      	ble.n	800677e <_dtoa_r+0x9ee>
 800677a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800677e:	9b05      	ldr	r3, [sp, #20]
 8006780:	1c5d      	adds	r5, r3, #1
 8006782:	f883 8000 	strb.w	r8, [r3]
 8006786:	e782      	b.n	800668e <_dtoa_r+0x8fe>
 8006788:	4630      	mov	r0, r6
 800678a:	e7c2      	b.n	8006712 <_dtoa_r+0x982>
 800678c:	2301      	movs	r3, #1
 800678e:	e7e3      	b.n	8006758 <_dtoa_r+0x9c8>
 8006790:	9a00      	ldr	r2, [sp, #0]
 8006792:	2a00      	cmp	r2, #0
 8006794:	db04      	blt.n	80067a0 <_dtoa_r+0xa10>
 8006796:	d125      	bne.n	80067e4 <_dtoa_r+0xa54>
 8006798:	9a06      	ldr	r2, [sp, #24]
 800679a:	bb1a      	cbnz	r2, 80067e4 <_dtoa_r+0xa54>
 800679c:	9a07      	ldr	r2, [sp, #28]
 800679e:	bb0a      	cbnz	r2, 80067e4 <_dtoa_r+0xa54>
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	ddec      	ble.n	800677e <_dtoa_r+0x9ee>
 80067a4:	2201      	movs	r2, #1
 80067a6:	9904      	ldr	r1, [sp, #16]
 80067a8:	4620      	mov	r0, r4
 80067aa:	f000 ffdb 	bl	8007764 <__lshift>
 80067ae:	4639      	mov	r1, r7
 80067b0:	9004      	str	r0, [sp, #16]
 80067b2:	f001 f82b 	bl	800780c <__mcmp>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	dc03      	bgt.n	80067c2 <_dtoa_r+0xa32>
 80067ba:	d1e0      	bne.n	800677e <_dtoa_r+0x9ee>
 80067bc:	f018 0f01 	tst.w	r8, #1
 80067c0:	d0dd      	beq.n	800677e <_dtoa_r+0x9ee>
 80067c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80067c6:	d1d8      	bne.n	800677a <_dtoa_r+0x9ea>
 80067c8:	9b05      	ldr	r3, [sp, #20]
 80067ca:	9a05      	ldr	r2, [sp, #20]
 80067cc:	1c5d      	adds	r5, r3, #1
 80067ce:	2339      	movs	r3, #57	; 0x39
 80067d0:	7013      	strb	r3, [r2, #0]
 80067d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067d6:	2b39      	cmp	r3, #57	; 0x39
 80067d8:	f105 32ff 	add.w	r2, r5, #4294967295
 80067dc:	d04f      	beq.n	800687e <_dtoa_r+0xaee>
 80067de:	3301      	adds	r3, #1
 80067e0:	7013      	strb	r3, [r2, #0]
 80067e2:	e754      	b.n	800668e <_dtoa_r+0x8fe>
 80067e4:	9a05      	ldr	r2, [sp, #20]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f102 0501 	add.w	r5, r2, #1
 80067ec:	dd06      	ble.n	80067fc <_dtoa_r+0xa6c>
 80067ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80067f2:	d0e9      	beq.n	80067c8 <_dtoa_r+0xa38>
 80067f4:	f108 0801 	add.w	r8, r8, #1
 80067f8:	9b05      	ldr	r3, [sp, #20]
 80067fa:	e7c2      	b.n	8006782 <_dtoa_r+0x9f2>
 80067fc:	9a02      	ldr	r2, [sp, #8]
 80067fe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006802:	eba5 030b 	sub.w	r3, r5, fp
 8006806:	4293      	cmp	r3, r2
 8006808:	d021      	beq.n	800684e <_dtoa_r+0xabe>
 800680a:	2300      	movs	r3, #0
 800680c:	220a      	movs	r2, #10
 800680e:	9904      	ldr	r1, [sp, #16]
 8006810:	4620      	mov	r0, r4
 8006812:	f000 fdf2 	bl	80073fa <__multadd>
 8006816:	45b1      	cmp	r9, r6
 8006818:	9004      	str	r0, [sp, #16]
 800681a:	f04f 0300 	mov.w	r3, #0
 800681e:	f04f 020a 	mov.w	r2, #10
 8006822:	4649      	mov	r1, r9
 8006824:	4620      	mov	r0, r4
 8006826:	d105      	bne.n	8006834 <_dtoa_r+0xaa4>
 8006828:	f000 fde7 	bl	80073fa <__multadd>
 800682c:	4681      	mov	r9, r0
 800682e:	4606      	mov	r6, r0
 8006830:	9505      	str	r5, [sp, #20]
 8006832:	e776      	b.n	8006722 <_dtoa_r+0x992>
 8006834:	f000 fde1 	bl	80073fa <__multadd>
 8006838:	4631      	mov	r1, r6
 800683a:	4681      	mov	r9, r0
 800683c:	2300      	movs	r3, #0
 800683e:	220a      	movs	r2, #10
 8006840:	4620      	mov	r0, r4
 8006842:	f000 fdda 	bl	80073fa <__multadd>
 8006846:	4606      	mov	r6, r0
 8006848:	e7f2      	b.n	8006830 <_dtoa_r+0xaa0>
 800684a:	f04f 0900 	mov.w	r9, #0
 800684e:	2201      	movs	r2, #1
 8006850:	9904      	ldr	r1, [sp, #16]
 8006852:	4620      	mov	r0, r4
 8006854:	f000 ff86 	bl	8007764 <__lshift>
 8006858:	4639      	mov	r1, r7
 800685a:	9004      	str	r0, [sp, #16]
 800685c:	f000 ffd6 	bl	800780c <__mcmp>
 8006860:	2800      	cmp	r0, #0
 8006862:	dcb6      	bgt.n	80067d2 <_dtoa_r+0xa42>
 8006864:	d102      	bne.n	800686c <_dtoa_r+0xadc>
 8006866:	f018 0f01 	tst.w	r8, #1
 800686a:	d1b2      	bne.n	80067d2 <_dtoa_r+0xa42>
 800686c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006870:	2b30      	cmp	r3, #48	; 0x30
 8006872:	f105 32ff 	add.w	r2, r5, #4294967295
 8006876:	f47f af0a 	bne.w	800668e <_dtoa_r+0x8fe>
 800687a:	4615      	mov	r5, r2
 800687c:	e7f6      	b.n	800686c <_dtoa_r+0xadc>
 800687e:	4593      	cmp	fp, r2
 8006880:	d105      	bne.n	800688e <_dtoa_r+0xafe>
 8006882:	2331      	movs	r3, #49	; 0x31
 8006884:	f10a 0a01 	add.w	sl, sl, #1
 8006888:	f88b 3000 	strb.w	r3, [fp]
 800688c:	e6ff      	b.n	800668e <_dtoa_r+0x8fe>
 800688e:	4615      	mov	r5, r2
 8006890:	e79f      	b.n	80067d2 <_dtoa_r+0xa42>
 8006892:	f8df b064 	ldr.w	fp, [pc, #100]	; 80068f8 <_dtoa_r+0xb68>
 8006896:	e007      	b.n	80068a8 <_dtoa_r+0xb18>
 8006898:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800689a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80068fc <_dtoa_r+0xb6c>
 800689e:	b11b      	cbz	r3, 80068a8 <_dtoa_r+0xb18>
 80068a0:	f10b 0308 	add.w	r3, fp, #8
 80068a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80068a6:	6013      	str	r3, [r2, #0]
 80068a8:	4658      	mov	r0, fp
 80068aa:	b017      	add	sp, #92	; 0x5c
 80068ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b0:	9b06      	ldr	r3, [sp, #24]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	f77f ae35 	ble.w	8006522 <_dtoa_r+0x792>
 80068b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068ba:	9307      	str	r3, [sp, #28]
 80068bc:	e649      	b.n	8006552 <_dtoa_r+0x7c2>
 80068be:	9b02      	ldr	r3, [sp, #8]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	dc03      	bgt.n	80068cc <_dtoa_r+0xb3c>
 80068c4:	9b06      	ldr	r3, [sp, #24]
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	f73f aecc 	bgt.w	8006664 <_dtoa_r+0x8d4>
 80068cc:	465d      	mov	r5, fp
 80068ce:	4639      	mov	r1, r7
 80068d0:	9804      	ldr	r0, [sp, #16]
 80068d2:	f7ff f9cf 	bl	8005c74 <quorem>
 80068d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80068da:	f805 8b01 	strb.w	r8, [r5], #1
 80068de:	9a02      	ldr	r2, [sp, #8]
 80068e0:	eba5 030b 	sub.w	r3, r5, fp
 80068e4:	429a      	cmp	r2, r3
 80068e6:	ddb0      	ble.n	800684a <_dtoa_r+0xaba>
 80068e8:	2300      	movs	r3, #0
 80068ea:	220a      	movs	r2, #10
 80068ec:	9904      	ldr	r1, [sp, #16]
 80068ee:	4620      	mov	r0, r4
 80068f0:	f000 fd83 	bl	80073fa <__multadd>
 80068f4:	9004      	str	r0, [sp, #16]
 80068f6:	e7ea      	b.n	80068ce <_dtoa_r+0xb3e>
 80068f8:	08008310 	.word	0x08008310
 80068fc:	08008390 	.word	0x08008390

08006900 <__sflush_r>:
 8006900:	898a      	ldrh	r2, [r1, #12]
 8006902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006906:	4605      	mov	r5, r0
 8006908:	0710      	lsls	r0, r2, #28
 800690a:	460c      	mov	r4, r1
 800690c:	d458      	bmi.n	80069c0 <__sflush_r+0xc0>
 800690e:	684b      	ldr	r3, [r1, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	dc05      	bgt.n	8006920 <__sflush_r+0x20>
 8006914:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006916:	2b00      	cmp	r3, #0
 8006918:	dc02      	bgt.n	8006920 <__sflush_r+0x20>
 800691a:	2000      	movs	r0, #0
 800691c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006922:	2e00      	cmp	r6, #0
 8006924:	d0f9      	beq.n	800691a <__sflush_r+0x1a>
 8006926:	2300      	movs	r3, #0
 8006928:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800692c:	682f      	ldr	r7, [r5, #0]
 800692e:	6a21      	ldr	r1, [r4, #32]
 8006930:	602b      	str	r3, [r5, #0]
 8006932:	d032      	beq.n	800699a <__sflush_r+0x9a>
 8006934:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	075a      	lsls	r2, r3, #29
 800693a:	d505      	bpl.n	8006948 <__sflush_r+0x48>
 800693c:	6863      	ldr	r3, [r4, #4]
 800693e:	1ac0      	subs	r0, r0, r3
 8006940:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006942:	b10b      	cbz	r3, 8006948 <__sflush_r+0x48>
 8006944:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006946:	1ac0      	subs	r0, r0, r3
 8006948:	2300      	movs	r3, #0
 800694a:	4602      	mov	r2, r0
 800694c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800694e:	6a21      	ldr	r1, [r4, #32]
 8006950:	4628      	mov	r0, r5
 8006952:	47b0      	blx	r6
 8006954:	1c43      	adds	r3, r0, #1
 8006956:	89a3      	ldrh	r3, [r4, #12]
 8006958:	d106      	bne.n	8006968 <__sflush_r+0x68>
 800695a:	6829      	ldr	r1, [r5, #0]
 800695c:	291d      	cmp	r1, #29
 800695e:	d848      	bhi.n	80069f2 <__sflush_r+0xf2>
 8006960:	4a29      	ldr	r2, [pc, #164]	; (8006a08 <__sflush_r+0x108>)
 8006962:	40ca      	lsrs	r2, r1
 8006964:	07d6      	lsls	r6, r2, #31
 8006966:	d544      	bpl.n	80069f2 <__sflush_r+0xf2>
 8006968:	2200      	movs	r2, #0
 800696a:	6062      	str	r2, [r4, #4]
 800696c:	04d9      	lsls	r1, r3, #19
 800696e:	6922      	ldr	r2, [r4, #16]
 8006970:	6022      	str	r2, [r4, #0]
 8006972:	d504      	bpl.n	800697e <__sflush_r+0x7e>
 8006974:	1c42      	adds	r2, r0, #1
 8006976:	d101      	bne.n	800697c <__sflush_r+0x7c>
 8006978:	682b      	ldr	r3, [r5, #0]
 800697a:	b903      	cbnz	r3, 800697e <__sflush_r+0x7e>
 800697c:	6560      	str	r0, [r4, #84]	; 0x54
 800697e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006980:	602f      	str	r7, [r5, #0]
 8006982:	2900      	cmp	r1, #0
 8006984:	d0c9      	beq.n	800691a <__sflush_r+0x1a>
 8006986:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800698a:	4299      	cmp	r1, r3
 800698c:	d002      	beq.n	8006994 <__sflush_r+0x94>
 800698e:	4628      	mov	r0, r5
 8006990:	f001 f8f6 	bl	8007b80 <_free_r>
 8006994:	2000      	movs	r0, #0
 8006996:	6360      	str	r0, [r4, #52]	; 0x34
 8006998:	e7c0      	b.n	800691c <__sflush_r+0x1c>
 800699a:	2301      	movs	r3, #1
 800699c:	4628      	mov	r0, r5
 800699e:	47b0      	blx	r6
 80069a0:	1c41      	adds	r1, r0, #1
 80069a2:	d1c8      	bne.n	8006936 <__sflush_r+0x36>
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0c5      	beq.n	8006936 <__sflush_r+0x36>
 80069aa:	2b1d      	cmp	r3, #29
 80069ac:	d001      	beq.n	80069b2 <__sflush_r+0xb2>
 80069ae:	2b16      	cmp	r3, #22
 80069b0:	d101      	bne.n	80069b6 <__sflush_r+0xb6>
 80069b2:	602f      	str	r7, [r5, #0]
 80069b4:	e7b1      	b.n	800691a <__sflush_r+0x1a>
 80069b6:	89a3      	ldrh	r3, [r4, #12]
 80069b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069bc:	81a3      	strh	r3, [r4, #12]
 80069be:	e7ad      	b.n	800691c <__sflush_r+0x1c>
 80069c0:	690f      	ldr	r7, [r1, #16]
 80069c2:	2f00      	cmp	r7, #0
 80069c4:	d0a9      	beq.n	800691a <__sflush_r+0x1a>
 80069c6:	0793      	lsls	r3, r2, #30
 80069c8:	680e      	ldr	r6, [r1, #0]
 80069ca:	bf08      	it	eq
 80069cc:	694b      	ldreq	r3, [r1, #20]
 80069ce:	600f      	str	r7, [r1, #0]
 80069d0:	bf18      	it	ne
 80069d2:	2300      	movne	r3, #0
 80069d4:	eba6 0807 	sub.w	r8, r6, r7
 80069d8:	608b      	str	r3, [r1, #8]
 80069da:	f1b8 0f00 	cmp.w	r8, #0
 80069de:	dd9c      	ble.n	800691a <__sflush_r+0x1a>
 80069e0:	4643      	mov	r3, r8
 80069e2:	463a      	mov	r2, r7
 80069e4:	6a21      	ldr	r1, [r4, #32]
 80069e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069e8:	4628      	mov	r0, r5
 80069ea:	47b0      	blx	r6
 80069ec:	2800      	cmp	r0, #0
 80069ee:	dc06      	bgt.n	80069fe <__sflush_r+0xfe>
 80069f0:	89a3      	ldrh	r3, [r4, #12]
 80069f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069f6:	81a3      	strh	r3, [r4, #12]
 80069f8:	f04f 30ff 	mov.w	r0, #4294967295
 80069fc:	e78e      	b.n	800691c <__sflush_r+0x1c>
 80069fe:	4407      	add	r7, r0
 8006a00:	eba8 0800 	sub.w	r8, r8, r0
 8006a04:	e7e9      	b.n	80069da <__sflush_r+0xda>
 8006a06:	bf00      	nop
 8006a08:	20400001 	.word	0x20400001

08006a0c <_fflush_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	690b      	ldr	r3, [r1, #16]
 8006a10:	4605      	mov	r5, r0
 8006a12:	460c      	mov	r4, r1
 8006a14:	b1db      	cbz	r3, 8006a4e <_fflush_r+0x42>
 8006a16:	b118      	cbz	r0, 8006a20 <_fflush_r+0x14>
 8006a18:	6983      	ldr	r3, [r0, #24]
 8006a1a:	b90b      	cbnz	r3, 8006a20 <_fflush_r+0x14>
 8006a1c:	f000 f860 	bl	8006ae0 <__sinit>
 8006a20:	4b0c      	ldr	r3, [pc, #48]	; (8006a54 <_fflush_r+0x48>)
 8006a22:	429c      	cmp	r4, r3
 8006a24:	d109      	bne.n	8006a3a <_fflush_r+0x2e>
 8006a26:	686c      	ldr	r4, [r5, #4]
 8006a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a2c:	b17b      	cbz	r3, 8006a4e <_fflush_r+0x42>
 8006a2e:	4621      	mov	r1, r4
 8006a30:	4628      	mov	r0, r5
 8006a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a36:	f7ff bf63 	b.w	8006900 <__sflush_r>
 8006a3a:	4b07      	ldr	r3, [pc, #28]	; (8006a58 <_fflush_r+0x4c>)
 8006a3c:	429c      	cmp	r4, r3
 8006a3e:	d101      	bne.n	8006a44 <_fflush_r+0x38>
 8006a40:	68ac      	ldr	r4, [r5, #8]
 8006a42:	e7f1      	b.n	8006a28 <_fflush_r+0x1c>
 8006a44:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <_fflush_r+0x50>)
 8006a46:	429c      	cmp	r4, r3
 8006a48:	bf08      	it	eq
 8006a4a:	68ec      	ldreq	r4, [r5, #12]
 8006a4c:	e7ec      	b.n	8006a28 <_fflush_r+0x1c>
 8006a4e:	2000      	movs	r0, #0
 8006a50:	bd38      	pop	{r3, r4, r5, pc}
 8006a52:	bf00      	nop
 8006a54:	080083c0 	.word	0x080083c0
 8006a58:	080083e0 	.word	0x080083e0
 8006a5c:	080083a0 	.word	0x080083a0

08006a60 <std>:
 8006a60:	2300      	movs	r3, #0
 8006a62:	b510      	push	{r4, lr}
 8006a64:	4604      	mov	r4, r0
 8006a66:	e9c0 3300 	strd	r3, r3, [r0]
 8006a6a:	6083      	str	r3, [r0, #8]
 8006a6c:	8181      	strh	r1, [r0, #12]
 8006a6e:	6643      	str	r3, [r0, #100]	; 0x64
 8006a70:	81c2      	strh	r2, [r0, #14]
 8006a72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a76:	6183      	str	r3, [r0, #24]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	2208      	movs	r2, #8
 8006a7c:	305c      	adds	r0, #92	; 0x5c
 8006a7e:	f7fd fa0a 	bl	8003e96 <memset>
 8006a82:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <std+0x38>)
 8006a84:	6263      	str	r3, [r4, #36]	; 0x24
 8006a86:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <std+0x3c>)
 8006a88:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a8a:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <std+0x40>)
 8006a8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a8e:	4b05      	ldr	r3, [pc, #20]	; (8006aa4 <std+0x44>)
 8006a90:	6224      	str	r4, [r4, #32]
 8006a92:	6323      	str	r3, [r4, #48]	; 0x30
 8006a94:	bd10      	pop	{r4, pc}
 8006a96:	bf00      	nop
 8006a98:	08007f91 	.word	0x08007f91
 8006a9c:	08007fb3 	.word	0x08007fb3
 8006aa0:	08007feb 	.word	0x08007feb
 8006aa4:	0800800f 	.word	0x0800800f

08006aa8 <_cleanup_r>:
 8006aa8:	4901      	ldr	r1, [pc, #4]	; (8006ab0 <_cleanup_r+0x8>)
 8006aaa:	f000 b885 	b.w	8006bb8 <_fwalk_reent>
 8006aae:	bf00      	nop
 8006ab0:	08006a0d 	.word	0x08006a0d

08006ab4 <__sfmoreglue>:
 8006ab4:	b570      	push	{r4, r5, r6, lr}
 8006ab6:	1e4a      	subs	r2, r1, #1
 8006ab8:	2568      	movs	r5, #104	; 0x68
 8006aba:	4355      	muls	r5, r2
 8006abc:	460e      	mov	r6, r1
 8006abe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ac2:	f001 f8ab 	bl	8007c1c <_malloc_r>
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	b140      	cbz	r0, 8006adc <__sfmoreglue+0x28>
 8006aca:	2100      	movs	r1, #0
 8006acc:	e9c0 1600 	strd	r1, r6, [r0]
 8006ad0:	300c      	adds	r0, #12
 8006ad2:	60a0      	str	r0, [r4, #8]
 8006ad4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006ad8:	f7fd f9dd 	bl	8003e96 <memset>
 8006adc:	4620      	mov	r0, r4
 8006ade:	bd70      	pop	{r4, r5, r6, pc}

08006ae0 <__sinit>:
 8006ae0:	6983      	ldr	r3, [r0, #24]
 8006ae2:	b510      	push	{r4, lr}
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	bb33      	cbnz	r3, 8006b36 <__sinit+0x56>
 8006ae8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006aec:	6503      	str	r3, [r0, #80]	; 0x50
 8006aee:	4b12      	ldr	r3, [pc, #72]	; (8006b38 <__sinit+0x58>)
 8006af0:	4a12      	ldr	r2, [pc, #72]	; (8006b3c <__sinit+0x5c>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6282      	str	r2, [r0, #40]	; 0x28
 8006af6:	4298      	cmp	r0, r3
 8006af8:	bf04      	itt	eq
 8006afa:	2301      	moveq	r3, #1
 8006afc:	6183      	streq	r3, [r0, #24]
 8006afe:	f000 f81f 	bl	8006b40 <__sfp>
 8006b02:	6060      	str	r0, [r4, #4]
 8006b04:	4620      	mov	r0, r4
 8006b06:	f000 f81b 	bl	8006b40 <__sfp>
 8006b0a:	60a0      	str	r0, [r4, #8]
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	f000 f817 	bl	8006b40 <__sfp>
 8006b12:	2200      	movs	r2, #0
 8006b14:	60e0      	str	r0, [r4, #12]
 8006b16:	2104      	movs	r1, #4
 8006b18:	6860      	ldr	r0, [r4, #4]
 8006b1a:	f7ff ffa1 	bl	8006a60 <std>
 8006b1e:	2201      	movs	r2, #1
 8006b20:	2109      	movs	r1, #9
 8006b22:	68a0      	ldr	r0, [r4, #8]
 8006b24:	f7ff ff9c 	bl	8006a60 <std>
 8006b28:	2202      	movs	r2, #2
 8006b2a:	2112      	movs	r1, #18
 8006b2c:	68e0      	ldr	r0, [r4, #12]
 8006b2e:	f7ff ff97 	bl	8006a60 <std>
 8006b32:	2301      	movs	r3, #1
 8006b34:	61a3      	str	r3, [r4, #24]
 8006b36:	bd10      	pop	{r4, pc}
 8006b38:	080082fc 	.word	0x080082fc
 8006b3c:	08006aa9 	.word	0x08006aa9

08006b40 <__sfp>:
 8006b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b42:	4b1b      	ldr	r3, [pc, #108]	; (8006bb0 <__sfp+0x70>)
 8006b44:	681e      	ldr	r6, [r3, #0]
 8006b46:	69b3      	ldr	r3, [r6, #24]
 8006b48:	4607      	mov	r7, r0
 8006b4a:	b913      	cbnz	r3, 8006b52 <__sfp+0x12>
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f7ff ffc7 	bl	8006ae0 <__sinit>
 8006b52:	3648      	adds	r6, #72	; 0x48
 8006b54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	d503      	bpl.n	8006b64 <__sfp+0x24>
 8006b5c:	6833      	ldr	r3, [r6, #0]
 8006b5e:	b133      	cbz	r3, 8006b6e <__sfp+0x2e>
 8006b60:	6836      	ldr	r6, [r6, #0]
 8006b62:	e7f7      	b.n	8006b54 <__sfp+0x14>
 8006b64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b68:	b16d      	cbz	r5, 8006b86 <__sfp+0x46>
 8006b6a:	3468      	adds	r4, #104	; 0x68
 8006b6c:	e7f4      	b.n	8006b58 <__sfp+0x18>
 8006b6e:	2104      	movs	r1, #4
 8006b70:	4638      	mov	r0, r7
 8006b72:	f7ff ff9f 	bl	8006ab4 <__sfmoreglue>
 8006b76:	6030      	str	r0, [r6, #0]
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d1f1      	bne.n	8006b60 <__sfp+0x20>
 8006b7c:	230c      	movs	r3, #12
 8006b7e:	603b      	str	r3, [r7, #0]
 8006b80:	4604      	mov	r4, r0
 8006b82:	4620      	mov	r0, r4
 8006b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b86:	4b0b      	ldr	r3, [pc, #44]	; (8006bb4 <__sfp+0x74>)
 8006b88:	6665      	str	r5, [r4, #100]	; 0x64
 8006b8a:	e9c4 5500 	strd	r5, r5, [r4]
 8006b8e:	60a5      	str	r5, [r4, #8]
 8006b90:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006b94:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006b98:	2208      	movs	r2, #8
 8006b9a:	4629      	mov	r1, r5
 8006b9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ba0:	f7fd f979 	bl	8003e96 <memset>
 8006ba4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ba8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006bac:	e7e9      	b.n	8006b82 <__sfp+0x42>
 8006bae:	bf00      	nop
 8006bb0:	080082fc 	.word	0x080082fc
 8006bb4:	ffff0001 	.word	0xffff0001

08006bb8 <_fwalk_reent>:
 8006bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bbc:	4680      	mov	r8, r0
 8006bbe:	4689      	mov	r9, r1
 8006bc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006bc4:	2600      	movs	r6, #0
 8006bc6:	b914      	cbnz	r4, 8006bce <_fwalk_reent+0x16>
 8006bc8:	4630      	mov	r0, r6
 8006bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006bd2:	3f01      	subs	r7, #1
 8006bd4:	d501      	bpl.n	8006bda <_fwalk_reent+0x22>
 8006bd6:	6824      	ldr	r4, [r4, #0]
 8006bd8:	e7f5      	b.n	8006bc6 <_fwalk_reent+0xe>
 8006bda:	89ab      	ldrh	r3, [r5, #12]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d907      	bls.n	8006bf0 <_fwalk_reent+0x38>
 8006be0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006be4:	3301      	adds	r3, #1
 8006be6:	d003      	beq.n	8006bf0 <_fwalk_reent+0x38>
 8006be8:	4629      	mov	r1, r5
 8006bea:	4640      	mov	r0, r8
 8006bec:	47c8      	blx	r9
 8006bee:	4306      	orrs	r6, r0
 8006bf0:	3568      	adds	r5, #104	; 0x68
 8006bf2:	e7ee      	b.n	8006bd2 <_fwalk_reent+0x1a>

08006bf4 <rshift>:
 8006bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bf6:	6906      	ldr	r6, [r0, #16]
 8006bf8:	114b      	asrs	r3, r1, #5
 8006bfa:	429e      	cmp	r6, r3
 8006bfc:	f100 0414 	add.w	r4, r0, #20
 8006c00:	dd30      	ble.n	8006c64 <rshift+0x70>
 8006c02:	f011 011f 	ands.w	r1, r1, #31
 8006c06:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006c0a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006c0e:	d108      	bne.n	8006c22 <rshift+0x2e>
 8006c10:	4621      	mov	r1, r4
 8006c12:	42b2      	cmp	r2, r6
 8006c14:	460b      	mov	r3, r1
 8006c16:	d211      	bcs.n	8006c3c <rshift+0x48>
 8006c18:	f852 3b04 	ldr.w	r3, [r2], #4
 8006c1c:	f841 3b04 	str.w	r3, [r1], #4
 8006c20:	e7f7      	b.n	8006c12 <rshift+0x1e>
 8006c22:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8006c26:	f1c1 0c20 	rsb	ip, r1, #32
 8006c2a:	40cd      	lsrs	r5, r1
 8006c2c:	3204      	adds	r2, #4
 8006c2e:	4623      	mov	r3, r4
 8006c30:	42b2      	cmp	r2, r6
 8006c32:	4617      	mov	r7, r2
 8006c34:	d30c      	bcc.n	8006c50 <rshift+0x5c>
 8006c36:	601d      	str	r5, [r3, #0]
 8006c38:	b105      	cbz	r5, 8006c3c <rshift+0x48>
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	1b1a      	subs	r2, r3, r4
 8006c3e:	42a3      	cmp	r3, r4
 8006c40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006c44:	bf08      	it	eq
 8006c46:	2300      	moveq	r3, #0
 8006c48:	6102      	str	r2, [r0, #16]
 8006c4a:	bf08      	it	eq
 8006c4c:	6143      	streq	r3, [r0, #20]
 8006c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c50:	683f      	ldr	r7, [r7, #0]
 8006c52:	fa07 f70c 	lsl.w	r7, r7, ip
 8006c56:	433d      	orrs	r5, r7
 8006c58:	f843 5b04 	str.w	r5, [r3], #4
 8006c5c:	f852 5b04 	ldr.w	r5, [r2], #4
 8006c60:	40cd      	lsrs	r5, r1
 8006c62:	e7e5      	b.n	8006c30 <rshift+0x3c>
 8006c64:	4623      	mov	r3, r4
 8006c66:	e7e9      	b.n	8006c3c <rshift+0x48>

08006c68 <__hexdig_fun>:
 8006c68:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006c6c:	2b09      	cmp	r3, #9
 8006c6e:	d802      	bhi.n	8006c76 <__hexdig_fun+0xe>
 8006c70:	3820      	subs	r0, #32
 8006c72:	b2c0      	uxtb	r0, r0
 8006c74:	4770      	bx	lr
 8006c76:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006c7a:	2b05      	cmp	r3, #5
 8006c7c:	d801      	bhi.n	8006c82 <__hexdig_fun+0x1a>
 8006c7e:	3847      	subs	r0, #71	; 0x47
 8006c80:	e7f7      	b.n	8006c72 <__hexdig_fun+0xa>
 8006c82:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006c86:	2b05      	cmp	r3, #5
 8006c88:	d801      	bhi.n	8006c8e <__hexdig_fun+0x26>
 8006c8a:	3827      	subs	r0, #39	; 0x27
 8006c8c:	e7f1      	b.n	8006c72 <__hexdig_fun+0xa>
 8006c8e:	2000      	movs	r0, #0
 8006c90:	4770      	bx	lr

08006c92 <__gethex>:
 8006c92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c96:	b08b      	sub	sp, #44	; 0x2c
 8006c98:	468a      	mov	sl, r1
 8006c9a:	9002      	str	r0, [sp, #8]
 8006c9c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006c9e:	9306      	str	r3, [sp, #24]
 8006ca0:	4690      	mov	r8, r2
 8006ca2:	f000 fad0 	bl	8007246 <__localeconv_l>
 8006ca6:	6803      	ldr	r3, [r0, #0]
 8006ca8:	9303      	str	r3, [sp, #12]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7f9 fc18 	bl	80004e0 <strlen>
 8006cb0:	9b03      	ldr	r3, [sp, #12]
 8006cb2:	9001      	str	r0, [sp, #4]
 8006cb4:	4403      	add	r3, r0
 8006cb6:	f04f 0b00 	mov.w	fp, #0
 8006cba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006cbe:	9307      	str	r3, [sp, #28]
 8006cc0:	f8da 3000 	ldr.w	r3, [sl]
 8006cc4:	3302      	adds	r3, #2
 8006cc6:	461f      	mov	r7, r3
 8006cc8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006ccc:	2830      	cmp	r0, #48	; 0x30
 8006cce:	d06c      	beq.n	8006daa <__gethex+0x118>
 8006cd0:	f7ff ffca 	bl	8006c68 <__hexdig_fun>
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	d16a      	bne.n	8006db0 <__gethex+0x11e>
 8006cda:	9a01      	ldr	r2, [sp, #4]
 8006cdc:	9903      	ldr	r1, [sp, #12]
 8006cde:	4638      	mov	r0, r7
 8006ce0:	f001 f999 	bl	8008016 <strncmp>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	d166      	bne.n	8006db6 <__gethex+0x124>
 8006ce8:	9b01      	ldr	r3, [sp, #4]
 8006cea:	5cf8      	ldrb	r0, [r7, r3]
 8006cec:	18fe      	adds	r6, r7, r3
 8006cee:	f7ff ffbb 	bl	8006c68 <__hexdig_fun>
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d062      	beq.n	8006dbc <__gethex+0x12a>
 8006cf6:	4633      	mov	r3, r6
 8006cf8:	7818      	ldrb	r0, [r3, #0]
 8006cfa:	2830      	cmp	r0, #48	; 0x30
 8006cfc:	461f      	mov	r7, r3
 8006cfe:	f103 0301 	add.w	r3, r3, #1
 8006d02:	d0f9      	beq.n	8006cf8 <__gethex+0x66>
 8006d04:	f7ff ffb0 	bl	8006c68 <__hexdig_fun>
 8006d08:	fab0 f580 	clz	r5, r0
 8006d0c:	096d      	lsrs	r5, r5, #5
 8006d0e:	4634      	mov	r4, r6
 8006d10:	f04f 0b01 	mov.w	fp, #1
 8006d14:	463a      	mov	r2, r7
 8006d16:	4616      	mov	r6, r2
 8006d18:	3201      	adds	r2, #1
 8006d1a:	7830      	ldrb	r0, [r6, #0]
 8006d1c:	f7ff ffa4 	bl	8006c68 <__hexdig_fun>
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d1f8      	bne.n	8006d16 <__gethex+0x84>
 8006d24:	9a01      	ldr	r2, [sp, #4]
 8006d26:	9903      	ldr	r1, [sp, #12]
 8006d28:	4630      	mov	r0, r6
 8006d2a:	f001 f974 	bl	8008016 <strncmp>
 8006d2e:	b950      	cbnz	r0, 8006d46 <__gethex+0xb4>
 8006d30:	b954      	cbnz	r4, 8006d48 <__gethex+0xb6>
 8006d32:	9b01      	ldr	r3, [sp, #4]
 8006d34:	18f4      	adds	r4, r6, r3
 8006d36:	4622      	mov	r2, r4
 8006d38:	4616      	mov	r6, r2
 8006d3a:	3201      	adds	r2, #1
 8006d3c:	7830      	ldrb	r0, [r6, #0]
 8006d3e:	f7ff ff93 	bl	8006c68 <__hexdig_fun>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	d1f8      	bne.n	8006d38 <__gethex+0xa6>
 8006d46:	b10c      	cbz	r4, 8006d4c <__gethex+0xba>
 8006d48:	1ba4      	subs	r4, r4, r6
 8006d4a:	00a4      	lsls	r4, r4, #2
 8006d4c:	7833      	ldrb	r3, [r6, #0]
 8006d4e:	2b50      	cmp	r3, #80	; 0x50
 8006d50:	d001      	beq.n	8006d56 <__gethex+0xc4>
 8006d52:	2b70      	cmp	r3, #112	; 0x70
 8006d54:	d140      	bne.n	8006dd8 <__gethex+0x146>
 8006d56:	7873      	ldrb	r3, [r6, #1]
 8006d58:	2b2b      	cmp	r3, #43	; 0x2b
 8006d5a:	d031      	beq.n	8006dc0 <__gethex+0x12e>
 8006d5c:	2b2d      	cmp	r3, #45	; 0x2d
 8006d5e:	d033      	beq.n	8006dc8 <__gethex+0x136>
 8006d60:	1c71      	adds	r1, r6, #1
 8006d62:	f04f 0900 	mov.w	r9, #0
 8006d66:	7808      	ldrb	r0, [r1, #0]
 8006d68:	f7ff ff7e 	bl	8006c68 <__hexdig_fun>
 8006d6c:	1e43      	subs	r3, r0, #1
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b18      	cmp	r3, #24
 8006d72:	d831      	bhi.n	8006dd8 <__gethex+0x146>
 8006d74:	f1a0 0210 	sub.w	r2, r0, #16
 8006d78:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006d7c:	f7ff ff74 	bl	8006c68 <__hexdig_fun>
 8006d80:	1e43      	subs	r3, r0, #1
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b18      	cmp	r3, #24
 8006d86:	d922      	bls.n	8006dce <__gethex+0x13c>
 8006d88:	f1b9 0f00 	cmp.w	r9, #0
 8006d8c:	d000      	beq.n	8006d90 <__gethex+0xfe>
 8006d8e:	4252      	negs	r2, r2
 8006d90:	4414      	add	r4, r2
 8006d92:	f8ca 1000 	str.w	r1, [sl]
 8006d96:	b30d      	cbz	r5, 8006ddc <__gethex+0x14a>
 8006d98:	f1bb 0f00 	cmp.w	fp, #0
 8006d9c:	bf0c      	ite	eq
 8006d9e:	2706      	moveq	r7, #6
 8006da0:	2700      	movne	r7, #0
 8006da2:	4638      	mov	r0, r7
 8006da4:	b00b      	add	sp, #44	; 0x2c
 8006da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006daa:	f10b 0b01 	add.w	fp, fp, #1
 8006dae:	e78a      	b.n	8006cc6 <__gethex+0x34>
 8006db0:	2500      	movs	r5, #0
 8006db2:	462c      	mov	r4, r5
 8006db4:	e7ae      	b.n	8006d14 <__gethex+0x82>
 8006db6:	463e      	mov	r6, r7
 8006db8:	2501      	movs	r5, #1
 8006dba:	e7c7      	b.n	8006d4c <__gethex+0xba>
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	e7fb      	b.n	8006db8 <__gethex+0x126>
 8006dc0:	f04f 0900 	mov.w	r9, #0
 8006dc4:	1cb1      	adds	r1, r6, #2
 8006dc6:	e7ce      	b.n	8006d66 <__gethex+0xd4>
 8006dc8:	f04f 0901 	mov.w	r9, #1
 8006dcc:	e7fa      	b.n	8006dc4 <__gethex+0x132>
 8006dce:	230a      	movs	r3, #10
 8006dd0:	fb03 0202 	mla	r2, r3, r2, r0
 8006dd4:	3a10      	subs	r2, #16
 8006dd6:	e7cf      	b.n	8006d78 <__gethex+0xe6>
 8006dd8:	4631      	mov	r1, r6
 8006dda:	e7da      	b.n	8006d92 <__gethex+0x100>
 8006ddc:	1bf3      	subs	r3, r6, r7
 8006dde:	3b01      	subs	r3, #1
 8006de0:	4629      	mov	r1, r5
 8006de2:	2b07      	cmp	r3, #7
 8006de4:	dc49      	bgt.n	8006e7a <__gethex+0x1e8>
 8006de6:	9802      	ldr	r0, [sp, #8]
 8006de8:	f000 fabc 	bl	8007364 <_Balloc>
 8006dec:	9b01      	ldr	r3, [sp, #4]
 8006dee:	f100 0914 	add.w	r9, r0, #20
 8006df2:	f04f 0b00 	mov.w	fp, #0
 8006df6:	f1c3 0301 	rsb	r3, r3, #1
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	f8cd 9010 	str.w	r9, [sp, #16]
 8006e00:	46da      	mov	sl, fp
 8006e02:	9308      	str	r3, [sp, #32]
 8006e04:	42b7      	cmp	r7, r6
 8006e06:	d33b      	bcc.n	8006e80 <__gethex+0x1ee>
 8006e08:	9804      	ldr	r0, [sp, #16]
 8006e0a:	f840 ab04 	str.w	sl, [r0], #4
 8006e0e:	eba0 0009 	sub.w	r0, r0, r9
 8006e12:	1080      	asrs	r0, r0, #2
 8006e14:	6128      	str	r0, [r5, #16]
 8006e16:	0147      	lsls	r7, r0, #5
 8006e18:	4650      	mov	r0, sl
 8006e1a:	f000 fb67 	bl	80074ec <__hi0bits>
 8006e1e:	f8d8 6000 	ldr.w	r6, [r8]
 8006e22:	1a3f      	subs	r7, r7, r0
 8006e24:	42b7      	cmp	r7, r6
 8006e26:	dd64      	ble.n	8006ef2 <__gethex+0x260>
 8006e28:	1bbf      	subs	r7, r7, r6
 8006e2a:	4639      	mov	r1, r7
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	f000 fe77 	bl	8007b20 <__any_on>
 8006e32:	4682      	mov	sl, r0
 8006e34:	b178      	cbz	r0, 8006e56 <__gethex+0x1c4>
 8006e36:	1e7b      	subs	r3, r7, #1
 8006e38:	1159      	asrs	r1, r3, #5
 8006e3a:	f003 021f 	and.w	r2, r3, #31
 8006e3e:	f04f 0a01 	mov.w	sl, #1
 8006e42:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006e46:	fa0a f202 	lsl.w	r2, sl, r2
 8006e4a:	420a      	tst	r2, r1
 8006e4c:	d003      	beq.n	8006e56 <__gethex+0x1c4>
 8006e4e:	4553      	cmp	r3, sl
 8006e50:	dc46      	bgt.n	8006ee0 <__gethex+0x24e>
 8006e52:	f04f 0a02 	mov.w	sl, #2
 8006e56:	4639      	mov	r1, r7
 8006e58:	4628      	mov	r0, r5
 8006e5a:	f7ff fecb 	bl	8006bf4 <rshift>
 8006e5e:	443c      	add	r4, r7
 8006e60:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e64:	42a3      	cmp	r3, r4
 8006e66:	da52      	bge.n	8006f0e <__gethex+0x27c>
 8006e68:	4629      	mov	r1, r5
 8006e6a:	9802      	ldr	r0, [sp, #8]
 8006e6c:	f000 faae 	bl	80073cc <_Bfree>
 8006e70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006e72:	2300      	movs	r3, #0
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	27a3      	movs	r7, #163	; 0xa3
 8006e78:	e793      	b.n	8006da2 <__gethex+0x110>
 8006e7a:	3101      	adds	r1, #1
 8006e7c:	105b      	asrs	r3, r3, #1
 8006e7e:	e7b0      	b.n	8006de2 <__gethex+0x150>
 8006e80:	1e73      	subs	r3, r6, #1
 8006e82:	9305      	str	r3, [sp, #20]
 8006e84:	9a07      	ldr	r2, [sp, #28]
 8006e86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d018      	beq.n	8006ec0 <__gethex+0x22e>
 8006e8e:	f1bb 0f20 	cmp.w	fp, #32
 8006e92:	d107      	bne.n	8006ea4 <__gethex+0x212>
 8006e94:	9b04      	ldr	r3, [sp, #16]
 8006e96:	f8c3 a000 	str.w	sl, [r3]
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	f04f 0a00 	mov.w	sl, #0
 8006ea0:	9304      	str	r3, [sp, #16]
 8006ea2:	46d3      	mov	fp, sl
 8006ea4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006ea8:	f7ff fede 	bl	8006c68 <__hexdig_fun>
 8006eac:	f000 000f 	and.w	r0, r0, #15
 8006eb0:	fa00 f00b 	lsl.w	r0, r0, fp
 8006eb4:	ea4a 0a00 	orr.w	sl, sl, r0
 8006eb8:	f10b 0b04 	add.w	fp, fp, #4
 8006ebc:	9b05      	ldr	r3, [sp, #20]
 8006ebe:	e00d      	b.n	8006edc <__gethex+0x24a>
 8006ec0:	9b05      	ldr	r3, [sp, #20]
 8006ec2:	9a08      	ldr	r2, [sp, #32]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	42bb      	cmp	r3, r7
 8006ec8:	d3e1      	bcc.n	8006e8e <__gethex+0x1fc>
 8006eca:	4618      	mov	r0, r3
 8006ecc:	9a01      	ldr	r2, [sp, #4]
 8006ece:	9903      	ldr	r1, [sp, #12]
 8006ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ed2:	f001 f8a0 	bl	8008016 <strncmp>
 8006ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d1d8      	bne.n	8006e8e <__gethex+0x1fc>
 8006edc:	461e      	mov	r6, r3
 8006ede:	e791      	b.n	8006e04 <__gethex+0x172>
 8006ee0:	1eb9      	subs	r1, r7, #2
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f000 fe1c 	bl	8007b20 <__any_on>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d0b2      	beq.n	8006e52 <__gethex+0x1c0>
 8006eec:	f04f 0a03 	mov.w	sl, #3
 8006ef0:	e7b1      	b.n	8006e56 <__gethex+0x1c4>
 8006ef2:	da09      	bge.n	8006f08 <__gethex+0x276>
 8006ef4:	1bf7      	subs	r7, r6, r7
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	463a      	mov	r2, r7
 8006efa:	9802      	ldr	r0, [sp, #8]
 8006efc:	f000 fc32 	bl	8007764 <__lshift>
 8006f00:	1be4      	subs	r4, r4, r7
 8006f02:	4605      	mov	r5, r0
 8006f04:	f100 0914 	add.w	r9, r0, #20
 8006f08:	f04f 0a00 	mov.w	sl, #0
 8006f0c:	e7a8      	b.n	8006e60 <__gethex+0x1ce>
 8006f0e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006f12:	42a0      	cmp	r0, r4
 8006f14:	dd6a      	ble.n	8006fec <__gethex+0x35a>
 8006f16:	1b04      	subs	r4, r0, r4
 8006f18:	42a6      	cmp	r6, r4
 8006f1a:	dc2e      	bgt.n	8006f7a <__gethex+0x2e8>
 8006f1c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d022      	beq.n	8006f6a <__gethex+0x2d8>
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d024      	beq.n	8006f72 <__gethex+0x2e0>
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d115      	bne.n	8006f58 <__gethex+0x2c6>
 8006f2c:	42a6      	cmp	r6, r4
 8006f2e:	d113      	bne.n	8006f58 <__gethex+0x2c6>
 8006f30:	2e01      	cmp	r6, #1
 8006f32:	dc0b      	bgt.n	8006f4c <__gethex+0x2ba>
 8006f34:	9a06      	ldr	r2, [sp, #24]
 8006f36:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006f3a:	6013      	str	r3, [r2, #0]
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	612b      	str	r3, [r5, #16]
 8006f40:	f8c9 3000 	str.w	r3, [r9]
 8006f44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f46:	2762      	movs	r7, #98	; 0x62
 8006f48:	601d      	str	r5, [r3, #0]
 8006f4a:	e72a      	b.n	8006da2 <__gethex+0x110>
 8006f4c:	1e71      	subs	r1, r6, #1
 8006f4e:	4628      	mov	r0, r5
 8006f50:	f000 fde6 	bl	8007b20 <__any_on>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d1ed      	bne.n	8006f34 <__gethex+0x2a2>
 8006f58:	4629      	mov	r1, r5
 8006f5a:	9802      	ldr	r0, [sp, #8]
 8006f5c:	f000 fa36 	bl	80073cc <_Bfree>
 8006f60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006f62:	2300      	movs	r3, #0
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	2750      	movs	r7, #80	; 0x50
 8006f68:	e71b      	b.n	8006da2 <__gethex+0x110>
 8006f6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d0e1      	beq.n	8006f34 <__gethex+0x2a2>
 8006f70:	e7f2      	b.n	8006f58 <__gethex+0x2c6>
 8006f72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d1dd      	bne.n	8006f34 <__gethex+0x2a2>
 8006f78:	e7ee      	b.n	8006f58 <__gethex+0x2c6>
 8006f7a:	1e67      	subs	r7, r4, #1
 8006f7c:	f1ba 0f00 	cmp.w	sl, #0
 8006f80:	d131      	bne.n	8006fe6 <__gethex+0x354>
 8006f82:	b127      	cbz	r7, 8006f8e <__gethex+0x2fc>
 8006f84:	4639      	mov	r1, r7
 8006f86:	4628      	mov	r0, r5
 8006f88:	f000 fdca 	bl	8007b20 <__any_on>
 8006f8c:	4682      	mov	sl, r0
 8006f8e:	117a      	asrs	r2, r7, #5
 8006f90:	2301      	movs	r3, #1
 8006f92:	f007 071f 	and.w	r7, r7, #31
 8006f96:	fa03 f707 	lsl.w	r7, r3, r7
 8006f9a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	421f      	tst	r7, r3
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	bf18      	it	ne
 8006fa6:	f04a 0a02 	orrne.w	sl, sl, #2
 8006faa:	1b36      	subs	r6, r6, r4
 8006fac:	f7ff fe22 	bl	8006bf4 <rshift>
 8006fb0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006fb4:	2702      	movs	r7, #2
 8006fb6:	f1ba 0f00 	cmp.w	sl, #0
 8006fba:	d048      	beq.n	800704e <__gethex+0x3bc>
 8006fbc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d015      	beq.n	8006ff0 <__gethex+0x35e>
 8006fc4:	2b03      	cmp	r3, #3
 8006fc6:	d017      	beq.n	8006ff8 <__gethex+0x366>
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d109      	bne.n	8006fe0 <__gethex+0x34e>
 8006fcc:	f01a 0f02 	tst.w	sl, #2
 8006fd0:	d006      	beq.n	8006fe0 <__gethex+0x34e>
 8006fd2:	f8d9 3000 	ldr.w	r3, [r9]
 8006fd6:	ea4a 0a03 	orr.w	sl, sl, r3
 8006fda:	f01a 0f01 	tst.w	sl, #1
 8006fde:	d10e      	bne.n	8006ffe <__gethex+0x36c>
 8006fe0:	f047 0710 	orr.w	r7, r7, #16
 8006fe4:	e033      	b.n	800704e <__gethex+0x3bc>
 8006fe6:	f04f 0a01 	mov.w	sl, #1
 8006fea:	e7d0      	b.n	8006f8e <__gethex+0x2fc>
 8006fec:	2701      	movs	r7, #1
 8006fee:	e7e2      	b.n	8006fb6 <__gethex+0x324>
 8006ff0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ff2:	f1c3 0301 	rsb	r3, r3, #1
 8006ff6:	9315      	str	r3, [sp, #84]	; 0x54
 8006ff8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d0f0      	beq.n	8006fe0 <__gethex+0x34e>
 8006ffe:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007002:	f105 0314 	add.w	r3, r5, #20
 8007006:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800700a:	eb03 010a 	add.w	r1, r3, sl
 800700e:	f04f 0c00 	mov.w	ip, #0
 8007012:	4618      	mov	r0, r3
 8007014:	f853 2b04 	ldr.w	r2, [r3], #4
 8007018:	f1b2 3fff 	cmp.w	r2, #4294967295
 800701c:	d01c      	beq.n	8007058 <__gethex+0x3c6>
 800701e:	3201      	adds	r2, #1
 8007020:	6002      	str	r2, [r0, #0]
 8007022:	2f02      	cmp	r7, #2
 8007024:	f105 0314 	add.w	r3, r5, #20
 8007028:	d138      	bne.n	800709c <__gethex+0x40a>
 800702a:	f8d8 2000 	ldr.w	r2, [r8]
 800702e:	3a01      	subs	r2, #1
 8007030:	42b2      	cmp	r2, r6
 8007032:	d10a      	bne.n	800704a <__gethex+0x3b8>
 8007034:	1171      	asrs	r1, r6, #5
 8007036:	2201      	movs	r2, #1
 8007038:	f006 061f 	and.w	r6, r6, #31
 800703c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007040:	fa02 f606 	lsl.w	r6, r2, r6
 8007044:	421e      	tst	r6, r3
 8007046:	bf18      	it	ne
 8007048:	4617      	movne	r7, r2
 800704a:	f047 0720 	orr.w	r7, r7, #32
 800704e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007050:	601d      	str	r5, [r3, #0]
 8007052:	9b06      	ldr	r3, [sp, #24]
 8007054:	601c      	str	r4, [r3, #0]
 8007056:	e6a4      	b.n	8006da2 <__gethex+0x110>
 8007058:	4299      	cmp	r1, r3
 800705a:	f843 cc04 	str.w	ip, [r3, #-4]
 800705e:	d8d8      	bhi.n	8007012 <__gethex+0x380>
 8007060:	68ab      	ldr	r3, [r5, #8]
 8007062:	4599      	cmp	r9, r3
 8007064:	db12      	blt.n	800708c <__gethex+0x3fa>
 8007066:	6869      	ldr	r1, [r5, #4]
 8007068:	9802      	ldr	r0, [sp, #8]
 800706a:	3101      	adds	r1, #1
 800706c:	f000 f97a 	bl	8007364 <_Balloc>
 8007070:	692a      	ldr	r2, [r5, #16]
 8007072:	3202      	adds	r2, #2
 8007074:	f105 010c 	add.w	r1, r5, #12
 8007078:	4683      	mov	fp, r0
 800707a:	0092      	lsls	r2, r2, #2
 800707c:	300c      	adds	r0, #12
 800707e:	f7fc feff 	bl	8003e80 <memcpy>
 8007082:	4629      	mov	r1, r5
 8007084:	9802      	ldr	r0, [sp, #8]
 8007086:	f000 f9a1 	bl	80073cc <_Bfree>
 800708a:	465d      	mov	r5, fp
 800708c:	692b      	ldr	r3, [r5, #16]
 800708e:	1c5a      	adds	r2, r3, #1
 8007090:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007094:	612a      	str	r2, [r5, #16]
 8007096:	2201      	movs	r2, #1
 8007098:	615a      	str	r2, [r3, #20]
 800709a:	e7c2      	b.n	8007022 <__gethex+0x390>
 800709c:	692a      	ldr	r2, [r5, #16]
 800709e:	454a      	cmp	r2, r9
 80070a0:	dd0b      	ble.n	80070ba <__gethex+0x428>
 80070a2:	2101      	movs	r1, #1
 80070a4:	4628      	mov	r0, r5
 80070a6:	f7ff fda5 	bl	8006bf4 <rshift>
 80070aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80070ae:	3401      	adds	r4, #1
 80070b0:	42a3      	cmp	r3, r4
 80070b2:	f6ff aed9 	blt.w	8006e68 <__gethex+0x1d6>
 80070b6:	2701      	movs	r7, #1
 80070b8:	e7c7      	b.n	800704a <__gethex+0x3b8>
 80070ba:	f016 061f 	ands.w	r6, r6, #31
 80070be:	d0fa      	beq.n	80070b6 <__gethex+0x424>
 80070c0:	449a      	add	sl, r3
 80070c2:	f1c6 0620 	rsb	r6, r6, #32
 80070c6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80070ca:	f000 fa0f 	bl	80074ec <__hi0bits>
 80070ce:	42b0      	cmp	r0, r6
 80070d0:	dbe7      	blt.n	80070a2 <__gethex+0x410>
 80070d2:	e7f0      	b.n	80070b6 <__gethex+0x424>

080070d4 <L_shift>:
 80070d4:	f1c2 0208 	rsb	r2, r2, #8
 80070d8:	0092      	lsls	r2, r2, #2
 80070da:	b570      	push	{r4, r5, r6, lr}
 80070dc:	f1c2 0620 	rsb	r6, r2, #32
 80070e0:	6843      	ldr	r3, [r0, #4]
 80070e2:	6804      	ldr	r4, [r0, #0]
 80070e4:	fa03 f506 	lsl.w	r5, r3, r6
 80070e8:	432c      	orrs	r4, r5
 80070ea:	40d3      	lsrs	r3, r2
 80070ec:	6004      	str	r4, [r0, #0]
 80070ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80070f2:	4288      	cmp	r0, r1
 80070f4:	d3f4      	bcc.n	80070e0 <L_shift+0xc>
 80070f6:	bd70      	pop	{r4, r5, r6, pc}

080070f8 <__match>:
 80070f8:	b530      	push	{r4, r5, lr}
 80070fa:	6803      	ldr	r3, [r0, #0]
 80070fc:	3301      	adds	r3, #1
 80070fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007102:	b914      	cbnz	r4, 800710a <__match+0x12>
 8007104:	6003      	str	r3, [r0, #0]
 8007106:	2001      	movs	r0, #1
 8007108:	bd30      	pop	{r4, r5, pc}
 800710a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800710e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007112:	2d19      	cmp	r5, #25
 8007114:	bf98      	it	ls
 8007116:	3220      	addls	r2, #32
 8007118:	42a2      	cmp	r2, r4
 800711a:	d0f0      	beq.n	80070fe <__match+0x6>
 800711c:	2000      	movs	r0, #0
 800711e:	e7f3      	b.n	8007108 <__match+0x10>

08007120 <__hexnan>:
 8007120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007124:	680b      	ldr	r3, [r1, #0]
 8007126:	6801      	ldr	r1, [r0, #0]
 8007128:	115f      	asrs	r7, r3, #5
 800712a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800712e:	f013 031f 	ands.w	r3, r3, #31
 8007132:	b087      	sub	sp, #28
 8007134:	bf18      	it	ne
 8007136:	3704      	addne	r7, #4
 8007138:	2500      	movs	r5, #0
 800713a:	1f3e      	subs	r6, r7, #4
 800713c:	4682      	mov	sl, r0
 800713e:	4690      	mov	r8, r2
 8007140:	9301      	str	r3, [sp, #4]
 8007142:	f847 5c04 	str.w	r5, [r7, #-4]
 8007146:	46b1      	mov	r9, r6
 8007148:	4634      	mov	r4, r6
 800714a:	9502      	str	r5, [sp, #8]
 800714c:	46ab      	mov	fp, r5
 800714e:	784a      	ldrb	r2, [r1, #1]
 8007150:	1c4b      	adds	r3, r1, #1
 8007152:	9303      	str	r3, [sp, #12]
 8007154:	b342      	cbz	r2, 80071a8 <__hexnan+0x88>
 8007156:	4610      	mov	r0, r2
 8007158:	9105      	str	r1, [sp, #20]
 800715a:	9204      	str	r2, [sp, #16]
 800715c:	f7ff fd84 	bl	8006c68 <__hexdig_fun>
 8007160:	2800      	cmp	r0, #0
 8007162:	d143      	bne.n	80071ec <__hexnan+0xcc>
 8007164:	9a04      	ldr	r2, [sp, #16]
 8007166:	9905      	ldr	r1, [sp, #20]
 8007168:	2a20      	cmp	r2, #32
 800716a:	d818      	bhi.n	800719e <__hexnan+0x7e>
 800716c:	9b02      	ldr	r3, [sp, #8]
 800716e:	459b      	cmp	fp, r3
 8007170:	dd13      	ble.n	800719a <__hexnan+0x7a>
 8007172:	454c      	cmp	r4, r9
 8007174:	d206      	bcs.n	8007184 <__hexnan+0x64>
 8007176:	2d07      	cmp	r5, #7
 8007178:	dc04      	bgt.n	8007184 <__hexnan+0x64>
 800717a:	462a      	mov	r2, r5
 800717c:	4649      	mov	r1, r9
 800717e:	4620      	mov	r0, r4
 8007180:	f7ff ffa8 	bl	80070d4 <L_shift>
 8007184:	4544      	cmp	r4, r8
 8007186:	d944      	bls.n	8007212 <__hexnan+0xf2>
 8007188:	2300      	movs	r3, #0
 800718a:	f1a4 0904 	sub.w	r9, r4, #4
 800718e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007192:	f8cd b008 	str.w	fp, [sp, #8]
 8007196:	464c      	mov	r4, r9
 8007198:	461d      	mov	r5, r3
 800719a:	9903      	ldr	r1, [sp, #12]
 800719c:	e7d7      	b.n	800714e <__hexnan+0x2e>
 800719e:	2a29      	cmp	r2, #41	; 0x29
 80071a0:	d14a      	bne.n	8007238 <__hexnan+0x118>
 80071a2:	3102      	adds	r1, #2
 80071a4:	f8ca 1000 	str.w	r1, [sl]
 80071a8:	f1bb 0f00 	cmp.w	fp, #0
 80071ac:	d044      	beq.n	8007238 <__hexnan+0x118>
 80071ae:	454c      	cmp	r4, r9
 80071b0:	d206      	bcs.n	80071c0 <__hexnan+0xa0>
 80071b2:	2d07      	cmp	r5, #7
 80071b4:	dc04      	bgt.n	80071c0 <__hexnan+0xa0>
 80071b6:	462a      	mov	r2, r5
 80071b8:	4649      	mov	r1, r9
 80071ba:	4620      	mov	r0, r4
 80071bc:	f7ff ff8a 	bl	80070d4 <L_shift>
 80071c0:	4544      	cmp	r4, r8
 80071c2:	d928      	bls.n	8007216 <__hexnan+0xf6>
 80071c4:	4643      	mov	r3, r8
 80071c6:	f854 2b04 	ldr.w	r2, [r4], #4
 80071ca:	f843 2b04 	str.w	r2, [r3], #4
 80071ce:	42a6      	cmp	r6, r4
 80071d0:	d2f9      	bcs.n	80071c6 <__hexnan+0xa6>
 80071d2:	2200      	movs	r2, #0
 80071d4:	f843 2b04 	str.w	r2, [r3], #4
 80071d8:	429e      	cmp	r6, r3
 80071da:	d2fb      	bcs.n	80071d4 <__hexnan+0xb4>
 80071dc:	6833      	ldr	r3, [r6, #0]
 80071de:	b91b      	cbnz	r3, 80071e8 <__hexnan+0xc8>
 80071e0:	4546      	cmp	r6, r8
 80071e2:	d127      	bne.n	8007234 <__hexnan+0x114>
 80071e4:	2301      	movs	r3, #1
 80071e6:	6033      	str	r3, [r6, #0]
 80071e8:	2005      	movs	r0, #5
 80071ea:	e026      	b.n	800723a <__hexnan+0x11a>
 80071ec:	3501      	adds	r5, #1
 80071ee:	2d08      	cmp	r5, #8
 80071f0:	f10b 0b01 	add.w	fp, fp, #1
 80071f4:	dd06      	ble.n	8007204 <__hexnan+0xe4>
 80071f6:	4544      	cmp	r4, r8
 80071f8:	d9cf      	bls.n	800719a <__hexnan+0x7a>
 80071fa:	2300      	movs	r3, #0
 80071fc:	f844 3c04 	str.w	r3, [r4, #-4]
 8007200:	2501      	movs	r5, #1
 8007202:	3c04      	subs	r4, #4
 8007204:	6822      	ldr	r2, [r4, #0]
 8007206:	f000 000f 	and.w	r0, r0, #15
 800720a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800720e:	6020      	str	r0, [r4, #0]
 8007210:	e7c3      	b.n	800719a <__hexnan+0x7a>
 8007212:	2508      	movs	r5, #8
 8007214:	e7c1      	b.n	800719a <__hexnan+0x7a>
 8007216:	9b01      	ldr	r3, [sp, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0df      	beq.n	80071dc <__hexnan+0xbc>
 800721c:	f04f 32ff 	mov.w	r2, #4294967295
 8007220:	f1c3 0320 	rsb	r3, r3, #32
 8007224:	fa22 f303 	lsr.w	r3, r2, r3
 8007228:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800722c:	401a      	ands	r2, r3
 800722e:	f847 2c04 	str.w	r2, [r7, #-4]
 8007232:	e7d3      	b.n	80071dc <__hexnan+0xbc>
 8007234:	3e04      	subs	r6, #4
 8007236:	e7d1      	b.n	80071dc <__hexnan+0xbc>
 8007238:	2004      	movs	r0, #4
 800723a:	b007      	add	sp, #28
 800723c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007240 <__locale_ctype_ptr_l>:
 8007240:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007244:	4770      	bx	lr

08007246 <__localeconv_l>:
 8007246:	30f0      	adds	r0, #240	; 0xf0
 8007248:	4770      	bx	lr
	...

0800724c <_localeconv_r>:
 800724c:	4b04      	ldr	r3, [pc, #16]	; (8007260 <_localeconv_r+0x14>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6a18      	ldr	r0, [r3, #32]
 8007252:	4b04      	ldr	r3, [pc, #16]	; (8007264 <_localeconv_r+0x18>)
 8007254:	2800      	cmp	r0, #0
 8007256:	bf08      	it	eq
 8007258:	4618      	moveq	r0, r3
 800725a:	30f0      	adds	r0, #240	; 0xf0
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	2000000c 	.word	0x2000000c
 8007264:	20000070 	.word	0x20000070

08007268 <__swhatbuf_r>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	460e      	mov	r6, r1
 800726c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007270:	2900      	cmp	r1, #0
 8007272:	b096      	sub	sp, #88	; 0x58
 8007274:	4614      	mov	r4, r2
 8007276:	461d      	mov	r5, r3
 8007278:	da07      	bge.n	800728a <__swhatbuf_r+0x22>
 800727a:	2300      	movs	r3, #0
 800727c:	602b      	str	r3, [r5, #0]
 800727e:	89b3      	ldrh	r3, [r6, #12]
 8007280:	061a      	lsls	r2, r3, #24
 8007282:	d410      	bmi.n	80072a6 <__swhatbuf_r+0x3e>
 8007284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007288:	e00e      	b.n	80072a8 <__swhatbuf_r+0x40>
 800728a:	466a      	mov	r2, sp
 800728c:	f000 ff04 	bl	8008098 <_fstat_r>
 8007290:	2800      	cmp	r0, #0
 8007292:	dbf2      	blt.n	800727a <__swhatbuf_r+0x12>
 8007294:	9a01      	ldr	r2, [sp, #4]
 8007296:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800729a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800729e:	425a      	negs	r2, r3
 80072a0:	415a      	adcs	r2, r3
 80072a2:	602a      	str	r2, [r5, #0]
 80072a4:	e7ee      	b.n	8007284 <__swhatbuf_r+0x1c>
 80072a6:	2340      	movs	r3, #64	; 0x40
 80072a8:	2000      	movs	r0, #0
 80072aa:	6023      	str	r3, [r4, #0]
 80072ac:	b016      	add	sp, #88	; 0x58
 80072ae:	bd70      	pop	{r4, r5, r6, pc}

080072b0 <__smakebuf_r>:
 80072b0:	898b      	ldrh	r3, [r1, #12]
 80072b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072b4:	079d      	lsls	r5, r3, #30
 80072b6:	4606      	mov	r6, r0
 80072b8:	460c      	mov	r4, r1
 80072ba:	d507      	bpl.n	80072cc <__smakebuf_r+0x1c>
 80072bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	6123      	str	r3, [r4, #16]
 80072c4:	2301      	movs	r3, #1
 80072c6:	6163      	str	r3, [r4, #20]
 80072c8:	b002      	add	sp, #8
 80072ca:	bd70      	pop	{r4, r5, r6, pc}
 80072cc:	ab01      	add	r3, sp, #4
 80072ce:	466a      	mov	r2, sp
 80072d0:	f7ff ffca 	bl	8007268 <__swhatbuf_r>
 80072d4:	9900      	ldr	r1, [sp, #0]
 80072d6:	4605      	mov	r5, r0
 80072d8:	4630      	mov	r0, r6
 80072da:	f000 fc9f 	bl	8007c1c <_malloc_r>
 80072de:	b948      	cbnz	r0, 80072f4 <__smakebuf_r+0x44>
 80072e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072e4:	059a      	lsls	r2, r3, #22
 80072e6:	d4ef      	bmi.n	80072c8 <__smakebuf_r+0x18>
 80072e8:	f023 0303 	bic.w	r3, r3, #3
 80072ec:	f043 0302 	orr.w	r3, r3, #2
 80072f0:	81a3      	strh	r3, [r4, #12]
 80072f2:	e7e3      	b.n	80072bc <__smakebuf_r+0xc>
 80072f4:	4b0d      	ldr	r3, [pc, #52]	; (800732c <__smakebuf_r+0x7c>)
 80072f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80072f8:	89a3      	ldrh	r3, [r4, #12]
 80072fa:	6020      	str	r0, [r4, #0]
 80072fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007300:	81a3      	strh	r3, [r4, #12]
 8007302:	9b00      	ldr	r3, [sp, #0]
 8007304:	6163      	str	r3, [r4, #20]
 8007306:	9b01      	ldr	r3, [sp, #4]
 8007308:	6120      	str	r0, [r4, #16]
 800730a:	b15b      	cbz	r3, 8007324 <__smakebuf_r+0x74>
 800730c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007310:	4630      	mov	r0, r6
 8007312:	f000 fed3 	bl	80080bc <_isatty_r>
 8007316:	b128      	cbz	r0, 8007324 <__smakebuf_r+0x74>
 8007318:	89a3      	ldrh	r3, [r4, #12]
 800731a:	f023 0303 	bic.w	r3, r3, #3
 800731e:	f043 0301 	orr.w	r3, r3, #1
 8007322:	81a3      	strh	r3, [r4, #12]
 8007324:	89a3      	ldrh	r3, [r4, #12]
 8007326:	431d      	orrs	r5, r3
 8007328:	81a5      	strh	r5, [r4, #12]
 800732a:	e7cd      	b.n	80072c8 <__smakebuf_r+0x18>
 800732c:	08006aa9 	.word	0x08006aa9

08007330 <malloc>:
 8007330:	4b02      	ldr	r3, [pc, #8]	; (800733c <malloc+0xc>)
 8007332:	4601      	mov	r1, r0
 8007334:	6818      	ldr	r0, [r3, #0]
 8007336:	f000 bc71 	b.w	8007c1c <_malloc_r>
 800733a:	bf00      	nop
 800733c:	2000000c 	.word	0x2000000c

08007340 <__ascii_mbtowc>:
 8007340:	b082      	sub	sp, #8
 8007342:	b901      	cbnz	r1, 8007346 <__ascii_mbtowc+0x6>
 8007344:	a901      	add	r1, sp, #4
 8007346:	b142      	cbz	r2, 800735a <__ascii_mbtowc+0x1a>
 8007348:	b14b      	cbz	r3, 800735e <__ascii_mbtowc+0x1e>
 800734a:	7813      	ldrb	r3, [r2, #0]
 800734c:	600b      	str	r3, [r1, #0]
 800734e:	7812      	ldrb	r2, [r2, #0]
 8007350:	1c10      	adds	r0, r2, #0
 8007352:	bf18      	it	ne
 8007354:	2001      	movne	r0, #1
 8007356:	b002      	add	sp, #8
 8007358:	4770      	bx	lr
 800735a:	4610      	mov	r0, r2
 800735c:	e7fb      	b.n	8007356 <__ascii_mbtowc+0x16>
 800735e:	f06f 0001 	mvn.w	r0, #1
 8007362:	e7f8      	b.n	8007356 <__ascii_mbtowc+0x16>

08007364 <_Balloc>:
 8007364:	b570      	push	{r4, r5, r6, lr}
 8007366:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007368:	4604      	mov	r4, r0
 800736a:	460e      	mov	r6, r1
 800736c:	b93d      	cbnz	r5, 800737e <_Balloc+0x1a>
 800736e:	2010      	movs	r0, #16
 8007370:	f7ff ffde 	bl	8007330 <malloc>
 8007374:	6260      	str	r0, [r4, #36]	; 0x24
 8007376:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800737a:	6005      	str	r5, [r0, #0]
 800737c:	60c5      	str	r5, [r0, #12]
 800737e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007380:	68eb      	ldr	r3, [r5, #12]
 8007382:	b183      	cbz	r3, 80073a6 <_Balloc+0x42>
 8007384:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800738c:	b9b8      	cbnz	r0, 80073be <_Balloc+0x5a>
 800738e:	2101      	movs	r1, #1
 8007390:	fa01 f506 	lsl.w	r5, r1, r6
 8007394:	1d6a      	adds	r2, r5, #5
 8007396:	0092      	lsls	r2, r2, #2
 8007398:	4620      	mov	r0, r4
 800739a:	f000 fbe2 	bl	8007b62 <_calloc_r>
 800739e:	b160      	cbz	r0, 80073ba <_Balloc+0x56>
 80073a0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80073a4:	e00e      	b.n	80073c4 <_Balloc+0x60>
 80073a6:	2221      	movs	r2, #33	; 0x21
 80073a8:	2104      	movs	r1, #4
 80073aa:	4620      	mov	r0, r4
 80073ac:	f000 fbd9 	bl	8007b62 <_calloc_r>
 80073b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073b2:	60e8      	str	r0, [r5, #12]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1e4      	bne.n	8007384 <_Balloc+0x20>
 80073ba:	2000      	movs	r0, #0
 80073bc:	bd70      	pop	{r4, r5, r6, pc}
 80073be:	6802      	ldr	r2, [r0, #0]
 80073c0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80073c4:	2300      	movs	r3, #0
 80073c6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80073ca:	e7f7      	b.n	80073bc <_Balloc+0x58>

080073cc <_Bfree>:
 80073cc:	b570      	push	{r4, r5, r6, lr}
 80073ce:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80073d0:	4606      	mov	r6, r0
 80073d2:	460d      	mov	r5, r1
 80073d4:	b93c      	cbnz	r4, 80073e6 <_Bfree+0x1a>
 80073d6:	2010      	movs	r0, #16
 80073d8:	f7ff ffaa 	bl	8007330 <malloc>
 80073dc:	6270      	str	r0, [r6, #36]	; 0x24
 80073de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073e2:	6004      	str	r4, [r0, #0]
 80073e4:	60c4      	str	r4, [r0, #12]
 80073e6:	b13d      	cbz	r5, 80073f8 <_Bfree+0x2c>
 80073e8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80073ea:	686a      	ldr	r2, [r5, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80073f2:	6029      	str	r1, [r5, #0]
 80073f4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80073f8:	bd70      	pop	{r4, r5, r6, pc}

080073fa <__multadd>:
 80073fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073fe:	690d      	ldr	r5, [r1, #16]
 8007400:	461f      	mov	r7, r3
 8007402:	4606      	mov	r6, r0
 8007404:	460c      	mov	r4, r1
 8007406:	f101 0c14 	add.w	ip, r1, #20
 800740a:	2300      	movs	r3, #0
 800740c:	f8dc 0000 	ldr.w	r0, [ip]
 8007410:	b281      	uxth	r1, r0
 8007412:	fb02 7101 	mla	r1, r2, r1, r7
 8007416:	0c0f      	lsrs	r7, r1, #16
 8007418:	0c00      	lsrs	r0, r0, #16
 800741a:	fb02 7000 	mla	r0, r2, r0, r7
 800741e:	b289      	uxth	r1, r1
 8007420:	3301      	adds	r3, #1
 8007422:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007426:	429d      	cmp	r5, r3
 8007428:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800742c:	f84c 1b04 	str.w	r1, [ip], #4
 8007430:	dcec      	bgt.n	800740c <__multadd+0x12>
 8007432:	b1d7      	cbz	r7, 800746a <__multadd+0x70>
 8007434:	68a3      	ldr	r3, [r4, #8]
 8007436:	42ab      	cmp	r3, r5
 8007438:	dc12      	bgt.n	8007460 <__multadd+0x66>
 800743a:	6861      	ldr	r1, [r4, #4]
 800743c:	4630      	mov	r0, r6
 800743e:	3101      	adds	r1, #1
 8007440:	f7ff ff90 	bl	8007364 <_Balloc>
 8007444:	6922      	ldr	r2, [r4, #16]
 8007446:	3202      	adds	r2, #2
 8007448:	f104 010c 	add.w	r1, r4, #12
 800744c:	4680      	mov	r8, r0
 800744e:	0092      	lsls	r2, r2, #2
 8007450:	300c      	adds	r0, #12
 8007452:	f7fc fd15 	bl	8003e80 <memcpy>
 8007456:	4621      	mov	r1, r4
 8007458:	4630      	mov	r0, r6
 800745a:	f7ff ffb7 	bl	80073cc <_Bfree>
 800745e:	4644      	mov	r4, r8
 8007460:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007464:	3501      	adds	r5, #1
 8007466:	615f      	str	r7, [r3, #20]
 8007468:	6125      	str	r5, [r4, #16]
 800746a:	4620      	mov	r0, r4
 800746c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007470 <__s2b>:
 8007470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007474:	460c      	mov	r4, r1
 8007476:	4615      	mov	r5, r2
 8007478:	461f      	mov	r7, r3
 800747a:	2209      	movs	r2, #9
 800747c:	3308      	adds	r3, #8
 800747e:	4606      	mov	r6, r0
 8007480:	fb93 f3f2 	sdiv	r3, r3, r2
 8007484:	2100      	movs	r1, #0
 8007486:	2201      	movs	r2, #1
 8007488:	429a      	cmp	r2, r3
 800748a:	db20      	blt.n	80074ce <__s2b+0x5e>
 800748c:	4630      	mov	r0, r6
 800748e:	f7ff ff69 	bl	8007364 <_Balloc>
 8007492:	9b08      	ldr	r3, [sp, #32]
 8007494:	6143      	str	r3, [r0, #20]
 8007496:	2d09      	cmp	r5, #9
 8007498:	f04f 0301 	mov.w	r3, #1
 800749c:	6103      	str	r3, [r0, #16]
 800749e:	dd19      	ble.n	80074d4 <__s2b+0x64>
 80074a0:	f104 0809 	add.w	r8, r4, #9
 80074a4:	46c1      	mov	r9, r8
 80074a6:	442c      	add	r4, r5
 80074a8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80074ac:	4601      	mov	r1, r0
 80074ae:	3b30      	subs	r3, #48	; 0x30
 80074b0:	220a      	movs	r2, #10
 80074b2:	4630      	mov	r0, r6
 80074b4:	f7ff ffa1 	bl	80073fa <__multadd>
 80074b8:	45a1      	cmp	r9, r4
 80074ba:	d1f5      	bne.n	80074a8 <__s2b+0x38>
 80074bc:	eb08 0405 	add.w	r4, r8, r5
 80074c0:	3c08      	subs	r4, #8
 80074c2:	1b2d      	subs	r5, r5, r4
 80074c4:	1963      	adds	r3, r4, r5
 80074c6:	42bb      	cmp	r3, r7
 80074c8:	db07      	blt.n	80074da <__s2b+0x6a>
 80074ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ce:	0052      	lsls	r2, r2, #1
 80074d0:	3101      	adds	r1, #1
 80074d2:	e7d9      	b.n	8007488 <__s2b+0x18>
 80074d4:	340a      	adds	r4, #10
 80074d6:	2509      	movs	r5, #9
 80074d8:	e7f3      	b.n	80074c2 <__s2b+0x52>
 80074da:	f814 3b01 	ldrb.w	r3, [r4], #1
 80074de:	4601      	mov	r1, r0
 80074e0:	3b30      	subs	r3, #48	; 0x30
 80074e2:	220a      	movs	r2, #10
 80074e4:	4630      	mov	r0, r6
 80074e6:	f7ff ff88 	bl	80073fa <__multadd>
 80074ea:	e7eb      	b.n	80074c4 <__s2b+0x54>

080074ec <__hi0bits>:
 80074ec:	0c02      	lsrs	r2, r0, #16
 80074ee:	0412      	lsls	r2, r2, #16
 80074f0:	4603      	mov	r3, r0
 80074f2:	b9b2      	cbnz	r2, 8007522 <__hi0bits+0x36>
 80074f4:	0403      	lsls	r3, r0, #16
 80074f6:	2010      	movs	r0, #16
 80074f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80074fc:	bf04      	itt	eq
 80074fe:	021b      	lsleq	r3, r3, #8
 8007500:	3008      	addeq	r0, #8
 8007502:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007506:	bf04      	itt	eq
 8007508:	011b      	lsleq	r3, r3, #4
 800750a:	3004      	addeq	r0, #4
 800750c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007510:	bf04      	itt	eq
 8007512:	009b      	lsleq	r3, r3, #2
 8007514:	3002      	addeq	r0, #2
 8007516:	2b00      	cmp	r3, #0
 8007518:	db06      	blt.n	8007528 <__hi0bits+0x3c>
 800751a:	005b      	lsls	r3, r3, #1
 800751c:	d503      	bpl.n	8007526 <__hi0bits+0x3a>
 800751e:	3001      	adds	r0, #1
 8007520:	4770      	bx	lr
 8007522:	2000      	movs	r0, #0
 8007524:	e7e8      	b.n	80074f8 <__hi0bits+0xc>
 8007526:	2020      	movs	r0, #32
 8007528:	4770      	bx	lr

0800752a <__lo0bits>:
 800752a:	6803      	ldr	r3, [r0, #0]
 800752c:	f013 0207 	ands.w	r2, r3, #7
 8007530:	4601      	mov	r1, r0
 8007532:	d00b      	beq.n	800754c <__lo0bits+0x22>
 8007534:	07da      	lsls	r2, r3, #31
 8007536:	d423      	bmi.n	8007580 <__lo0bits+0x56>
 8007538:	0798      	lsls	r0, r3, #30
 800753a:	bf49      	itett	mi
 800753c:	085b      	lsrmi	r3, r3, #1
 800753e:	089b      	lsrpl	r3, r3, #2
 8007540:	2001      	movmi	r0, #1
 8007542:	600b      	strmi	r3, [r1, #0]
 8007544:	bf5c      	itt	pl
 8007546:	600b      	strpl	r3, [r1, #0]
 8007548:	2002      	movpl	r0, #2
 800754a:	4770      	bx	lr
 800754c:	b298      	uxth	r0, r3
 800754e:	b9a8      	cbnz	r0, 800757c <__lo0bits+0x52>
 8007550:	0c1b      	lsrs	r3, r3, #16
 8007552:	2010      	movs	r0, #16
 8007554:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007558:	bf04      	itt	eq
 800755a:	0a1b      	lsreq	r3, r3, #8
 800755c:	3008      	addeq	r0, #8
 800755e:	071a      	lsls	r2, r3, #28
 8007560:	bf04      	itt	eq
 8007562:	091b      	lsreq	r3, r3, #4
 8007564:	3004      	addeq	r0, #4
 8007566:	079a      	lsls	r2, r3, #30
 8007568:	bf04      	itt	eq
 800756a:	089b      	lsreq	r3, r3, #2
 800756c:	3002      	addeq	r0, #2
 800756e:	07da      	lsls	r2, r3, #31
 8007570:	d402      	bmi.n	8007578 <__lo0bits+0x4e>
 8007572:	085b      	lsrs	r3, r3, #1
 8007574:	d006      	beq.n	8007584 <__lo0bits+0x5a>
 8007576:	3001      	adds	r0, #1
 8007578:	600b      	str	r3, [r1, #0]
 800757a:	4770      	bx	lr
 800757c:	4610      	mov	r0, r2
 800757e:	e7e9      	b.n	8007554 <__lo0bits+0x2a>
 8007580:	2000      	movs	r0, #0
 8007582:	4770      	bx	lr
 8007584:	2020      	movs	r0, #32
 8007586:	4770      	bx	lr

08007588 <__i2b>:
 8007588:	b510      	push	{r4, lr}
 800758a:	460c      	mov	r4, r1
 800758c:	2101      	movs	r1, #1
 800758e:	f7ff fee9 	bl	8007364 <_Balloc>
 8007592:	2201      	movs	r2, #1
 8007594:	6144      	str	r4, [r0, #20]
 8007596:	6102      	str	r2, [r0, #16]
 8007598:	bd10      	pop	{r4, pc}

0800759a <__multiply>:
 800759a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759e:	4614      	mov	r4, r2
 80075a0:	690a      	ldr	r2, [r1, #16]
 80075a2:	6923      	ldr	r3, [r4, #16]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	bfb8      	it	lt
 80075a8:	460b      	movlt	r3, r1
 80075aa:	4688      	mov	r8, r1
 80075ac:	bfbc      	itt	lt
 80075ae:	46a0      	movlt	r8, r4
 80075b0:	461c      	movlt	r4, r3
 80075b2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80075b6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80075ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80075be:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80075c2:	eb07 0609 	add.w	r6, r7, r9
 80075c6:	42b3      	cmp	r3, r6
 80075c8:	bfb8      	it	lt
 80075ca:	3101      	addlt	r1, #1
 80075cc:	f7ff feca 	bl	8007364 <_Balloc>
 80075d0:	f100 0514 	add.w	r5, r0, #20
 80075d4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80075d8:	462b      	mov	r3, r5
 80075da:	2200      	movs	r2, #0
 80075dc:	4573      	cmp	r3, lr
 80075de:	d316      	bcc.n	800760e <__multiply+0x74>
 80075e0:	f104 0214 	add.w	r2, r4, #20
 80075e4:	f108 0114 	add.w	r1, r8, #20
 80075e8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80075ec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	9b00      	ldr	r3, [sp, #0]
 80075f4:	9201      	str	r2, [sp, #4]
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d80c      	bhi.n	8007614 <__multiply+0x7a>
 80075fa:	2e00      	cmp	r6, #0
 80075fc:	dd03      	ble.n	8007606 <__multiply+0x6c>
 80075fe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007602:	2b00      	cmp	r3, #0
 8007604:	d05d      	beq.n	80076c2 <__multiply+0x128>
 8007606:	6106      	str	r6, [r0, #16]
 8007608:	b003      	add	sp, #12
 800760a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760e:	f843 2b04 	str.w	r2, [r3], #4
 8007612:	e7e3      	b.n	80075dc <__multiply+0x42>
 8007614:	f8b2 b000 	ldrh.w	fp, [r2]
 8007618:	f1bb 0f00 	cmp.w	fp, #0
 800761c:	d023      	beq.n	8007666 <__multiply+0xcc>
 800761e:	4689      	mov	r9, r1
 8007620:	46ac      	mov	ip, r5
 8007622:	f04f 0800 	mov.w	r8, #0
 8007626:	f859 4b04 	ldr.w	r4, [r9], #4
 800762a:	f8dc a000 	ldr.w	sl, [ip]
 800762e:	b2a3      	uxth	r3, r4
 8007630:	fa1f fa8a 	uxth.w	sl, sl
 8007634:	fb0b a303 	mla	r3, fp, r3, sl
 8007638:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800763c:	f8dc 4000 	ldr.w	r4, [ip]
 8007640:	4443      	add	r3, r8
 8007642:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007646:	fb0b 840a 	mla	r4, fp, sl, r8
 800764a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800764e:	46e2      	mov	sl, ip
 8007650:	b29b      	uxth	r3, r3
 8007652:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007656:	454f      	cmp	r7, r9
 8007658:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800765c:	f84a 3b04 	str.w	r3, [sl], #4
 8007660:	d82b      	bhi.n	80076ba <__multiply+0x120>
 8007662:	f8cc 8004 	str.w	r8, [ip, #4]
 8007666:	9b01      	ldr	r3, [sp, #4]
 8007668:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800766c:	3204      	adds	r2, #4
 800766e:	f1ba 0f00 	cmp.w	sl, #0
 8007672:	d020      	beq.n	80076b6 <__multiply+0x11c>
 8007674:	682b      	ldr	r3, [r5, #0]
 8007676:	4689      	mov	r9, r1
 8007678:	46a8      	mov	r8, r5
 800767a:	f04f 0b00 	mov.w	fp, #0
 800767e:	f8b9 c000 	ldrh.w	ip, [r9]
 8007682:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007686:	fb0a 440c 	mla	r4, sl, ip, r4
 800768a:	445c      	add	r4, fp
 800768c:	46c4      	mov	ip, r8
 800768e:	b29b      	uxth	r3, r3
 8007690:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007694:	f84c 3b04 	str.w	r3, [ip], #4
 8007698:	f859 3b04 	ldr.w	r3, [r9], #4
 800769c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80076a0:	0c1b      	lsrs	r3, r3, #16
 80076a2:	fb0a b303 	mla	r3, sl, r3, fp
 80076a6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80076aa:	454f      	cmp	r7, r9
 80076ac:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80076b0:	d805      	bhi.n	80076be <__multiply+0x124>
 80076b2:	f8c8 3004 	str.w	r3, [r8, #4]
 80076b6:	3504      	adds	r5, #4
 80076b8:	e79b      	b.n	80075f2 <__multiply+0x58>
 80076ba:	46d4      	mov	ip, sl
 80076bc:	e7b3      	b.n	8007626 <__multiply+0x8c>
 80076be:	46e0      	mov	r8, ip
 80076c0:	e7dd      	b.n	800767e <__multiply+0xe4>
 80076c2:	3e01      	subs	r6, #1
 80076c4:	e799      	b.n	80075fa <__multiply+0x60>
	...

080076c8 <__pow5mult>:
 80076c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076cc:	4615      	mov	r5, r2
 80076ce:	f012 0203 	ands.w	r2, r2, #3
 80076d2:	4606      	mov	r6, r0
 80076d4:	460f      	mov	r7, r1
 80076d6:	d007      	beq.n	80076e8 <__pow5mult+0x20>
 80076d8:	3a01      	subs	r2, #1
 80076da:	4c21      	ldr	r4, [pc, #132]	; (8007760 <__pow5mult+0x98>)
 80076dc:	2300      	movs	r3, #0
 80076de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80076e2:	f7ff fe8a 	bl	80073fa <__multadd>
 80076e6:	4607      	mov	r7, r0
 80076e8:	10ad      	asrs	r5, r5, #2
 80076ea:	d035      	beq.n	8007758 <__pow5mult+0x90>
 80076ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80076ee:	b93c      	cbnz	r4, 8007700 <__pow5mult+0x38>
 80076f0:	2010      	movs	r0, #16
 80076f2:	f7ff fe1d 	bl	8007330 <malloc>
 80076f6:	6270      	str	r0, [r6, #36]	; 0x24
 80076f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80076fc:	6004      	str	r4, [r0, #0]
 80076fe:	60c4      	str	r4, [r0, #12]
 8007700:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007704:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007708:	b94c      	cbnz	r4, 800771e <__pow5mult+0x56>
 800770a:	f240 2171 	movw	r1, #625	; 0x271
 800770e:	4630      	mov	r0, r6
 8007710:	f7ff ff3a 	bl	8007588 <__i2b>
 8007714:	2300      	movs	r3, #0
 8007716:	f8c8 0008 	str.w	r0, [r8, #8]
 800771a:	4604      	mov	r4, r0
 800771c:	6003      	str	r3, [r0, #0]
 800771e:	f04f 0800 	mov.w	r8, #0
 8007722:	07eb      	lsls	r3, r5, #31
 8007724:	d50a      	bpl.n	800773c <__pow5mult+0x74>
 8007726:	4639      	mov	r1, r7
 8007728:	4622      	mov	r2, r4
 800772a:	4630      	mov	r0, r6
 800772c:	f7ff ff35 	bl	800759a <__multiply>
 8007730:	4639      	mov	r1, r7
 8007732:	4681      	mov	r9, r0
 8007734:	4630      	mov	r0, r6
 8007736:	f7ff fe49 	bl	80073cc <_Bfree>
 800773a:	464f      	mov	r7, r9
 800773c:	106d      	asrs	r5, r5, #1
 800773e:	d00b      	beq.n	8007758 <__pow5mult+0x90>
 8007740:	6820      	ldr	r0, [r4, #0]
 8007742:	b938      	cbnz	r0, 8007754 <__pow5mult+0x8c>
 8007744:	4622      	mov	r2, r4
 8007746:	4621      	mov	r1, r4
 8007748:	4630      	mov	r0, r6
 800774a:	f7ff ff26 	bl	800759a <__multiply>
 800774e:	6020      	str	r0, [r4, #0]
 8007750:	f8c0 8000 	str.w	r8, [r0]
 8007754:	4604      	mov	r4, r0
 8007756:	e7e4      	b.n	8007722 <__pow5mult+0x5a>
 8007758:	4638      	mov	r0, r7
 800775a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800775e:	bf00      	nop
 8007760:	08008500 	.word	0x08008500

08007764 <__lshift>:
 8007764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007768:	460c      	mov	r4, r1
 800776a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800776e:	6923      	ldr	r3, [r4, #16]
 8007770:	6849      	ldr	r1, [r1, #4]
 8007772:	eb0a 0903 	add.w	r9, sl, r3
 8007776:	68a3      	ldr	r3, [r4, #8]
 8007778:	4607      	mov	r7, r0
 800777a:	4616      	mov	r6, r2
 800777c:	f109 0501 	add.w	r5, r9, #1
 8007780:	42ab      	cmp	r3, r5
 8007782:	db32      	blt.n	80077ea <__lshift+0x86>
 8007784:	4638      	mov	r0, r7
 8007786:	f7ff fded 	bl	8007364 <_Balloc>
 800778a:	2300      	movs	r3, #0
 800778c:	4680      	mov	r8, r0
 800778e:	f100 0114 	add.w	r1, r0, #20
 8007792:	461a      	mov	r2, r3
 8007794:	4553      	cmp	r3, sl
 8007796:	db2b      	blt.n	80077f0 <__lshift+0x8c>
 8007798:	6920      	ldr	r0, [r4, #16]
 800779a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800779e:	f104 0314 	add.w	r3, r4, #20
 80077a2:	f016 021f 	ands.w	r2, r6, #31
 80077a6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80077aa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80077ae:	d025      	beq.n	80077fc <__lshift+0x98>
 80077b0:	f1c2 0e20 	rsb	lr, r2, #32
 80077b4:	2000      	movs	r0, #0
 80077b6:	681e      	ldr	r6, [r3, #0]
 80077b8:	468a      	mov	sl, r1
 80077ba:	4096      	lsls	r6, r2
 80077bc:	4330      	orrs	r0, r6
 80077be:	f84a 0b04 	str.w	r0, [sl], #4
 80077c2:	f853 0b04 	ldr.w	r0, [r3], #4
 80077c6:	459c      	cmp	ip, r3
 80077c8:	fa20 f00e 	lsr.w	r0, r0, lr
 80077cc:	d814      	bhi.n	80077f8 <__lshift+0x94>
 80077ce:	6048      	str	r0, [r1, #4]
 80077d0:	b108      	cbz	r0, 80077d6 <__lshift+0x72>
 80077d2:	f109 0502 	add.w	r5, r9, #2
 80077d6:	3d01      	subs	r5, #1
 80077d8:	4638      	mov	r0, r7
 80077da:	f8c8 5010 	str.w	r5, [r8, #16]
 80077de:	4621      	mov	r1, r4
 80077e0:	f7ff fdf4 	bl	80073cc <_Bfree>
 80077e4:	4640      	mov	r0, r8
 80077e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ea:	3101      	adds	r1, #1
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	e7c7      	b.n	8007780 <__lshift+0x1c>
 80077f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80077f4:	3301      	adds	r3, #1
 80077f6:	e7cd      	b.n	8007794 <__lshift+0x30>
 80077f8:	4651      	mov	r1, sl
 80077fa:	e7dc      	b.n	80077b6 <__lshift+0x52>
 80077fc:	3904      	subs	r1, #4
 80077fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007802:	f841 2f04 	str.w	r2, [r1, #4]!
 8007806:	459c      	cmp	ip, r3
 8007808:	d8f9      	bhi.n	80077fe <__lshift+0x9a>
 800780a:	e7e4      	b.n	80077d6 <__lshift+0x72>

0800780c <__mcmp>:
 800780c:	6903      	ldr	r3, [r0, #16]
 800780e:	690a      	ldr	r2, [r1, #16]
 8007810:	1a9b      	subs	r3, r3, r2
 8007812:	b530      	push	{r4, r5, lr}
 8007814:	d10c      	bne.n	8007830 <__mcmp+0x24>
 8007816:	0092      	lsls	r2, r2, #2
 8007818:	3014      	adds	r0, #20
 800781a:	3114      	adds	r1, #20
 800781c:	1884      	adds	r4, r0, r2
 800781e:	4411      	add	r1, r2
 8007820:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007824:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007828:	4295      	cmp	r5, r2
 800782a:	d003      	beq.n	8007834 <__mcmp+0x28>
 800782c:	d305      	bcc.n	800783a <__mcmp+0x2e>
 800782e:	2301      	movs	r3, #1
 8007830:	4618      	mov	r0, r3
 8007832:	bd30      	pop	{r4, r5, pc}
 8007834:	42a0      	cmp	r0, r4
 8007836:	d3f3      	bcc.n	8007820 <__mcmp+0x14>
 8007838:	e7fa      	b.n	8007830 <__mcmp+0x24>
 800783a:	f04f 33ff 	mov.w	r3, #4294967295
 800783e:	e7f7      	b.n	8007830 <__mcmp+0x24>

08007840 <__mdiff>:
 8007840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007844:	460d      	mov	r5, r1
 8007846:	4607      	mov	r7, r0
 8007848:	4611      	mov	r1, r2
 800784a:	4628      	mov	r0, r5
 800784c:	4614      	mov	r4, r2
 800784e:	f7ff ffdd 	bl	800780c <__mcmp>
 8007852:	1e06      	subs	r6, r0, #0
 8007854:	d108      	bne.n	8007868 <__mdiff+0x28>
 8007856:	4631      	mov	r1, r6
 8007858:	4638      	mov	r0, r7
 800785a:	f7ff fd83 	bl	8007364 <_Balloc>
 800785e:	2301      	movs	r3, #1
 8007860:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007868:	bfa4      	itt	ge
 800786a:	4623      	movge	r3, r4
 800786c:	462c      	movge	r4, r5
 800786e:	4638      	mov	r0, r7
 8007870:	6861      	ldr	r1, [r4, #4]
 8007872:	bfa6      	itte	ge
 8007874:	461d      	movge	r5, r3
 8007876:	2600      	movge	r6, #0
 8007878:	2601      	movlt	r6, #1
 800787a:	f7ff fd73 	bl	8007364 <_Balloc>
 800787e:	692b      	ldr	r3, [r5, #16]
 8007880:	60c6      	str	r6, [r0, #12]
 8007882:	6926      	ldr	r6, [r4, #16]
 8007884:	f105 0914 	add.w	r9, r5, #20
 8007888:	f104 0214 	add.w	r2, r4, #20
 800788c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007890:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007894:	f100 0514 	add.w	r5, r0, #20
 8007898:	f04f 0e00 	mov.w	lr, #0
 800789c:	f852 ab04 	ldr.w	sl, [r2], #4
 80078a0:	f859 4b04 	ldr.w	r4, [r9], #4
 80078a4:	fa1e f18a 	uxtah	r1, lr, sl
 80078a8:	b2a3      	uxth	r3, r4
 80078aa:	1ac9      	subs	r1, r1, r3
 80078ac:	0c23      	lsrs	r3, r4, #16
 80078ae:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80078b2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80078b6:	b289      	uxth	r1, r1
 80078b8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80078bc:	45c8      	cmp	r8, r9
 80078be:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80078c2:	4694      	mov	ip, r2
 80078c4:	f845 3b04 	str.w	r3, [r5], #4
 80078c8:	d8e8      	bhi.n	800789c <__mdiff+0x5c>
 80078ca:	45bc      	cmp	ip, r7
 80078cc:	d304      	bcc.n	80078d8 <__mdiff+0x98>
 80078ce:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80078d2:	b183      	cbz	r3, 80078f6 <__mdiff+0xb6>
 80078d4:	6106      	str	r6, [r0, #16]
 80078d6:	e7c5      	b.n	8007864 <__mdiff+0x24>
 80078d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80078dc:	fa1e f381 	uxtah	r3, lr, r1
 80078e0:	141a      	asrs	r2, r3, #16
 80078e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078ec:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80078f0:	f845 3b04 	str.w	r3, [r5], #4
 80078f4:	e7e9      	b.n	80078ca <__mdiff+0x8a>
 80078f6:	3e01      	subs	r6, #1
 80078f8:	e7e9      	b.n	80078ce <__mdiff+0x8e>
	...

080078fc <__ulp>:
 80078fc:	4b12      	ldr	r3, [pc, #72]	; (8007948 <__ulp+0x4c>)
 80078fe:	ee10 2a90 	vmov	r2, s1
 8007902:	401a      	ands	r2, r3
 8007904:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8007908:	2b00      	cmp	r3, #0
 800790a:	dd04      	ble.n	8007916 <__ulp+0x1a>
 800790c:	2000      	movs	r0, #0
 800790e:	4619      	mov	r1, r3
 8007910:	ec41 0b10 	vmov	d0, r0, r1
 8007914:	4770      	bx	lr
 8007916:	425b      	negs	r3, r3
 8007918:	151b      	asrs	r3, r3, #20
 800791a:	2b13      	cmp	r3, #19
 800791c:	f04f 0000 	mov.w	r0, #0
 8007920:	f04f 0100 	mov.w	r1, #0
 8007924:	dc04      	bgt.n	8007930 <__ulp+0x34>
 8007926:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800792a:	fa42 f103 	asr.w	r1, r2, r3
 800792e:	e7ef      	b.n	8007910 <__ulp+0x14>
 8007930:	3b14      	subs	r3, #20
 8007932:	2b1e      	cmp	r3, #30
 8007934:	f04f 0201 	mov.w	r2, #1
 8007938:	bfda      	itte	le
 800793a:	f1c3 031f 	rsble	r3, r3, #31
 800793e:	fa02 f303 	lslle.w	r3, r2, r3
 8007942:	4613      	movgt	r3, r2
 8007944:	4618      	mov	r0, r3
 8007946:	e7e3      	b.n	8007910 <__ulp+0x14>
 8007948:	7ff00000 	.word	0x7ff00000

0800794c <__b2d>:
 800794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794e:	6905      	ldr	r5, [r0, #16]
 8007950:	f100 0714 	add.w	r7, r0, #20
 8007954:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007958:	1f2e      	subs	r6, r5, #4
 800795a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800795e:	4620      	mov	r0, r4
 8007960:	f7ff fdc4 	bl	80074ec <__hi0bits>
 8007964:	f1c0 0320 	rsb	r3, r0, #32
 8007968:	280a      	cmp	r0, #10
 800796a:	600b      	str	r3, [r1, #0]
 800796c:	f8df c074 	ldr.w	ip, [pc, #116]	; 80079e4 <__b2d+0x98>
 8007970:	dc14      	bgt.n	800799c <__b2d+0x50>
 8007972:	f1c0 0e0b 	rsb	lr, r0, #11
 8007976:	fa24 f10e 	lsr.w	r1, r4, lr
 800797a:	42b7      	cmp	r7, r6
 800797c:	ea41 030c 	orr.w	r3, r1, ip
 8007980:	bf34      	ite	cc
 8007982:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007986:	2100      	movcs	r1, #0
 8007988:	3015      	adds	r0, #21
 800798a:	fa04 f000 	lsl.w	r0, r4, r0
 800798e:	fa21 f10e 	lsr.w	r1, r1, lr
 8007992:	ea40 0201 	orr.w	r2, r0, r1
 8007996:	ec43 2b10 	vmov	d0, r2, r3
 800799a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800799c:	42b7      	cmp	r7, r6
 800799e:	bf3a      	itte	cc
 80079a0:	f1a5 0608 	subcc.w	r6, r5, #8
 80079a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80079a8:	2100      	movcs	r1, #0
 80079aa:	380b      	subs	r0, #11
 80079ac:	d015      	beq.n	80079da <__b2d+0x8e>
 80079ae:	4084      	lsls	r4, r0
 80079b0:	f1c0 0520 	rsb	r5, r0, #32
 80079b4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80079b8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80079bc:	42be      	cmp	r6, r7
 80079be:	fa21 fc05 	lsr.w	ip, r1, r5
 80079c2:	ea44 030c 	orr.w	r3, r4, ip
 80079c6:	bf8c      	ite	hi
 80079c8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80079cc:	2400      	movls	r4, #0
 80079ce:	fa01 f000 	lsl.w	r0, r1, r0
 80079d2:	40ec      	lsrs	r4, r5
 80079d4:	ea40 0204 	orr.w	r2, r0, r4
 80079d8:	e7dd      	b.n	8007996 <__b2d+0x4a>
 80079da:	ea44 030c 	orr.w	r3, r4, ip
 80079de:	460a      	mov	r2, r1
 80079e0:	e7d9      	b.n	8007996 <__b2d+0x4a>
 80079e2:	bf00      	nop
 80079e4:	3ff00000 	.word	0x3ff00000

080079e8 <__d2b>:
 80079e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80079ec:	460e      	mov	r6, r1
 80079ee:	2101      	movs	r1, #1
 80079f0:	ec59 8b10 	vmov	r8, r9, d0
 80079f4:	4615      	mov	r5, r2
 80079f6:	f7ff fcb5 	bl	8007364 <_Balloc>
 80079fa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80079fe:	4607      	mov	r7, r0
 8007a00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a04:	bb34      	cbnz	r4, 8007a54 <__d2b+0x6c>
 8007a06:	9301      	str	r3, [sp, #4]
 8007a08:	f1b8 0300 	subs.w	r3, r8, #0
 8007a0c:	d027      	beq.n	8007a5e <__d2b+0x76>
 8007a0e:	a802      	add	r0, sp, #8
 8007a10:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007a14:	f7ff fd89 	bl	800752a <__lo0bits>
 8007a18:	9900      	ldr	r1, [sp, #0]
 8007a1a:	b1f0      	cbz	r0, 8007a5a <__d2b+0x72>
 8007a1c:	9a01      	ldr	r2, [sp, #4]
 8007a1e:	f1c0 0320 	rsb	r3, r0, #32
 8007a22:	fa02 f303 	lsl.w	r3, r2, r3
 8007a26:	430b      	orrs	r3, r1
 8007a28:	40c2      	lsrs	r2, r0
 8007a2a:	617b      	str	r3, [r7, #20]
 8007a2c:	9201      	str	r2, [sp, #4]
 8007a2e:	9b01      	ldr	r3, [sp, #4]
 8007a30:	61bb      	str	r3, [r7, #24]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	bf14      	ite	ne
 8007a36:	2102      	movne	r1, #2
 8007a38:	2101      	moveq	r1, #1
 8007a3a:	6139      	str	r1, [r7, #16]
 8007a3c:	b1c4      	cbz	r4, 8007a70 <__d2b+0x88>
 8007a3e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007a42:	4404      	add	r4, r0
 8007a44:	6034      	str	r4, [r6, #0]
 8007a46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a4a:	6028      	str	r0, [r5, #0]
 8007a4c:	4638      	mov	r0, r7
 8007a4e:	b003      	add	sp, #12
 8007a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a58:	e7d5      	b.n	8007a06 <__d2b+0x1e>
 8007a5a:	6179      	str	r1, [r7, #20]
 8007a5c:	e7e7      	b.n	8007a2e <__d2b+0x46>
 8007a5e:	a801      	add	r0, sp, #4
 8007a60:	f7ff fd63 	bl	800752a <__lo0bits>
 8007a64:	9b01      	ldr	r3, [sp, #4]
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	2101      	movs	r1, #1
 8007a6a:	6139      	str	r1, [r7, #16]
 8007a6c:	3020      	adds	r0, #32
 8007a6e:	e7e5      	b.n	8007a3c <__d2b+0x54>
 8007a70:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007a74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007a78:	6030      	str	r0, [r6, #0]
 8007a7a:	6918      	ldr	r0, [r3, #16]
 8007a7c:	f7ff fd36 	bl	80074ec <__hi0bits>
 8007a80:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007a84:	e7e1      	b.n	8007a4a <__d2b+0x62>

08007a86 <__ratio>:
 8007a86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8a:	4688      	mov	r8, r1
 8007a8c:	4669      	mov	r1, sp
 8007a8e:	4681      	mov	r9, r0
 8007a90:	f7ff ff5c 	bl	800794c <__b2d>
 8007a94:	a901      	add	r1, sp, #4
 8007a96:	4640      	mov	r0, r8
 8007a98:	ec57 6b10 	vmov	r6, r7, d0
 8007a9c:	f7ff ff56 	bl	800794c <__b2d>
 8007aa0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007aa4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007aa8:	eba3 0c02 	sub.w	ip, r3, r2
 8007aac:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007ab0:	1a9b      	subs	r3, r3, r2
 8007ab2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007ab6:	ec5b ab10 	vmov	sl, fp, d0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	bfce      	itee	gt
 8007abe:	463a      	movgt	r2, r7
 8007ac0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007ac4:	465a      	movle	r2, fp
 8007ac6:	4659      	mov	r1, fp
 8007ac8:	463d      	mov	r5, r7
 8007aca:	bfd4      	ite	le
 8007acc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8007ad0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	ee10 2a10 	vmov	r2, s0
 8007ada:	460b      	mov	r3, r1
 8007adc:	4629      	mov	r1, r5
 8007ade:	f7f9 f83d 	bl	8000b5c <__aeabi_ddiv>
 8007ae2:	ec41 0b10 	vmov	d0, r0, r1
 8007ae6:	b003      	add	sp, #12
 8007ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007aec <__copybits>:
 8007aec:	3901      	subs	r1, #1
 8007aee:	b510      	push	{r4, lr}
 8007af0:	1149      	asrs	r1, r1, #5
 8007af2:	6914      	ldr	r4, [r2, #16]
 8007af4:	3101      	adds	r1, #1
 8007af6:	f102 0314 	add.w	r3, r2, #20
 8007afa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007afe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b02:	42a3      	cmp	r3, r4
 8007b04:	4602      	mov	r2, r0
 8007b06:	d303      	bcc.n	8007b10 <__copybits+0x24>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	428a      	cmp	r2, r1
 8007b0c:	d305      	bcc.n	8007b1a <__copybits+0x2e>
 8007b0e:	bd10      	pop	{r4, pc}
 8007b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b14:	f840 2b04 	str.w	r2, [r0], #4
 8007b18:	e7f3      	b.n	8007b02 <__copybits+0x16>
 8007b1a:	f842 3b04 	str.w	r3, [r2], #4
 8007b1e:	e7f4      	b.n	8007b0a <__copybits+0x1e>

08007b20 <__any_on>:
 8007b20:	f100 0214 	add.w	r2, r0, #20
 8007b24:	6900      	ldr	r0, [r0, #16]
 8007b26:	114b      	asrs	r3, r1, #5
 8007b28:	4298      	cmp	r0, r3
 8007b2a:	b510      	push	{r4, lr}
 8007b2c:	db11      	blt.n	8007b52 <__any_on+0x32>
 8007b2e:	dd0a      	ble.n	8007b46 <__any_on+0x26>
 8007b30:	f011 011f 	ands.w	r1, r1, #31
 8007b34:	d007      	beq.n	8007b46 <__any_on+0x26>
 8007b36:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007b3a:	fa24 f001 	lsr.w	r0, r4, r1
 8007b3e:	fa00 f101 	lsl.w	r1, r0, r1
 8007b42:	428c      	cmp	r4, r1
 8007b44:	d10b      	bne.n	8007b5e <__any_on+0x3e>
 8007b46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d803      	bhi.n	8007b56 <__any_on+0x36>
 8007b4e:	2000      	movs	r0, #0
 8007b50:	bd10      	pop	{r4, pc}
 8007b52:	4603      	mov	r3, r0
 8007b54:	e7f7      	b.n	8007b46 <__any_on+0x26>
 8007b56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b5a:	2900      	cmp	r1, #0
 8007b5c:	d0f5      	beq.n	8007b4a <__any_on+0x2a>
 8007b5e:	2001      	movs	r0, #1
 8007b60:	e7f6      	b.n	8007b50 <__any_on+0x30>

08007b62 <_calloc_r>:
 8007b62:	b538      	push	{r3, r4, r5, lr}
 8007b64:	fb02 f401 	mul.w	r4, r2, r1
 8007b68:	4621      	mov	r1, r4
 8007b6a:	f000 f857 	bl	8007c1c <_malloc_r>
 8007b6e:	4605      	mov	r5, r0
 8007b70:	b118      	cbz	r0, 8007b7a <_calloc_r+0x18>
 8007b72:	4622      	mov	r2, r4
 8007b74:	2100      	movs	r1, #0
 8007b76:	f7fc f98e 	bl	8003e96 <memset>
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	bd38      	pop	{r3, r4, r5, pc}
	...

08007b80 <_free_r>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	4605      	mov	r5, r0
 8007b84:	2900      	cmp	r1, #0
 8007b86:	d045      	beq.n	8007c14 <_free_r+0x94>
 8007b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b8c:	1f0c      	subs	r4, r1, #4
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	bfb8      	it	lt
 8007b92:	18e4      	addlt	r4, r4, r3
 8007b94:	f000 facd 	bl	8008132 <__malloc_lock>
 8007b98:	4a1f      	ldr	r2, [pc, #124]	; (8007c18 <_free_r+0x98>)
 8007b9a:	6813      	ldr	r3, [r2, #0]
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	b933      	cbnz	r3, 8007bae <_free_r+0x2e>
 8007ba0:	6063      	str	r3, [r4, #4]
 8007ba2:	6014      	str	r4, [r2, #0]
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007baa:	f000 bac3 	b.w	8008134 <__malloc_unlock>
 8007bae:	42a3      	cmp	r3, r4
 8007bb0:	d90c      	bls.n	8007bcc <_free_r+0x4c>
 8007bb2:	6821      	ldr	r1, [r4, #0]
 8007bb4:	1862      	adds	r2, r4, r1
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	bf04      	itt	eq
 8007bba:	681a      	ldreq	r2, [r3, #0]
 8007bbc:	685b      	ldreq	r3, [r3, #4]
 8007bbe:	6063      	str	r3, [r4, #4]
 8007bc0:	bf04      	itt	eq
 8007bc2:	1852      	addeq	r2, r2, r1
 8007bc4:	6022      	streq	r2, [r4, #0]
 8007bc6:	6004      	str	r4, [r0, #0]
 8007bc8:	e7ec      	b.n	8007ba4 <_free_r+0x24>
 8007bca:	4613      	mov	r3, r2
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	b10a      	cbz	r2, 8007bd4 <_free_r+0x54>
 8007bd0:	42a2      	cmp	r2, r4
 8007bd2:	d9fa      	bls.n	8007bca <_free_r+0x4a>
 8007bd4:	6819      	ldr	r1, [r3, #0]
 8007bd6:	1858      	adds	r0, r3, r1
 8007bd8:	42a0      	cmp	r0, r4
 8007bda:	d10b      	bne.n	8007bf4 <_free_r+0x74>
 8007bdc:	6820      	ldr	r0, [r4, #0]
 8007bde:	4401      	add	r1, r0
 8007be0:	1858      	adds	r0, r3, r1
 8007be2:	4282      	cmp	r2, r0
 8007be4:	6019      	str	r1, [r3, #0]
 8007be6:	d1dd      	bne.n	8007ba4 <_free_r+0x24>
 8007be8:	6810      	ldr	r0, [r2, #0]
 8007bea:	6852      	ldr	r2, [r2, #4]
 8007bec:	605a      	str	r2, [r3, #4]
 8007bee:	4401      	add	r1, r0
 8007bf0:	6019      	str	r1, [r3, #0]
 8007bf2:	e7d7      	b.n	8007ba4 <_free_r+0x24>
 8007bf4:	d902      	bls.n	8007bfc <_free_r+0x7c>
 8007bf6:	230c      	movs	r3, #12
 8007bf8:	602b      	str	r3, [r5, #0]
 8007bfa:	e7d3      	b.n	8007ba4 <_free_r+0x24>
 8007bfc:	6820      	ldr	r0, [r4, #0]
 8007bfe:	1821      	adds	r1, r4, r0
 8007c00:	428a      	cmp	r2, r1
 8007c02:	bf04      	itt	eq
 8007c04:	6811      	ldreq	r1, [r2, #0]
 8007c06:	6852      	ldreq	r2, [r2, #4]
 8007c08:	6062      	str	r2, [r4, #4]
 8007c0a:	bf04      	itt	eq
 8007c0c:	1809      	addeq	r1, r1, r0
 8007c0e:	6021      	streq	r1, [r4, #0]
 8007c10:	605c      	str	r4, [r3, #4]
 8007c12:	e7c7      	b.n	8007ba4 <_free_r+0x24>
 8007c14:	bd38      	pop	{r3, r4, r5, pc}
 8007c16:	bf00      	nop
 8007c18:	20001424 	.word	0x20001424

08007c1c <_malloc_r>:
 8007c1c:	b570      	push	{r4, r5, r6, lr}
 8007c1e:	1ccd      	adds	r5, r1, #3
 8007c20:	f025 0503 	bic.w	r5, r5, #3
 8007c24:	3508      	adds	r5, #8
 8007c26:	2d0c      	cmp	r5, #12
 8007c28:	bf38      	it	cc
 8007c2a:	250c      	movcc	r5, #12
 8007c2c:	2d00      	cmp	r5, #0
 8007c2e:	4606      	mov	r6, r0
 8007c30:	db01      	blt.n	8007c36 <_malloc_r+0x1a>
 8007c32:	42a9      	cmp	r1, r5
 8007c34:	d903      	bls.n	8007c3e <_malloc_r+0x22>
 8007c36:	230c      	movs	r3, #12
 8007c38:	6033      	str	r3, [r6, #0]
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	bd70      	pop	{r4, r5, r6, pc}
 8007c3e:	f000 fa78 	bl	8008132 <__malloc_lock>
 8007c42:	4a21      	ldr	r2, [pc, #132]	; (8007cc8 <_malloc_r+0xac>)
 8007c44:	6814      	ldr	r4, [r2, #0]
 8007c46:	4621      	mov	r1, r4
 8007c48:	b991      	cbnz	r1, 8007c70 <_malloc_r+0x54>
 8007c4a:	4c20      	ldr	r4, [pc, #128]	; (8007ccc <_malloc_r+0xb0>)
 8007c4c:	6823      	ldr	r3, [r4, #0]
 8007c4e:	b91b      	cbnz	r3, 8007c58 <_malloc_r+0x3c>
 8007c50:	4630      	mov	r0, r6
 8007c52:	f000 f98d 	bl	8007f70 <_sbrk_r>
 8007c56:	6020      	str	r0, [r4, #0]
 8007c58:	4629      	mov	r1, r5
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	f000 f988 	bl	8007f70 <_sbrk_r>
 8007c60:	1c43      	adds	r3, r0, #1
 8007c62:	d124      	bne.n	8007cae <_malloc_r+0x92>
 8007c64:	230c      	movs	r3, #12
 8007c66:	6033      	str	r3, [r6, #0]
 8007c68:	4630      	mov	r0, r6
 8007c6a:	f000 fa63 	bl	8008134 <__malloc_unlock>
 8007c6e:	e7e4      	b.n	8007c3a <_malloc_r+0x1e>
 8007c70:	680b      	ldr	r3, [r1, #0]
 8007c72:	1b5b      	subs	r3, r3, r5
 8007c74:	d418      	bmi.n	8007ca8 <_malloc_r+0x8c>
 8007c76:	2b0b      	cmp	r3, #11
 8007c78:	d90f      	bls.n	8007c9a <_malloc_r+0x7e>
 8007c7a:	600b      	str	r3, [r1, #0]
 8007c7c:	50cd      	str	r5, [r1, r3]
 8007c7e:	18cc      	adds	r4, r1, r3
 8007c80:	4630      	mov	r0, r6
 8007c82:	f000 fa57 	bl	8008134 <__malloc_unlock>
 8007c86:	f104 000b 	add.w	r0, r4, #11
 8007c8a:	1d23      	adds	r3, r4, #4
 8007c8c:	f020 0007 	bic.w	r0, r0, #7
 8007c90:	1ac3      	subs	r3, r0, r3
 8007c92:	d0d3      	beq.n	8007c3c <_malloc_r+0x20>
 8007c94:	425a      	negs	r2, r3
 8007c96:	50e2      	str	r2, [r4, r3]
 8007c98:	e7d0      	b.n	8007c3c <_malloc_r+0x20>
 8007c9a:	428c      	cmp	r4, r1
 8007c9c:	684b      	ldr	r3, [r1, #4]
 8007c9e:	bf16      	itet	ne
 8007ca0:	6063      	strne	r3, [r4, #4]
 8007ca2:	6013      	streq	r3, [r2, #0]
 8007ca4:	460c      	movne	r4, r1
 8007ca6:	e7eb      	b.n	8007c80 <_malloc_r+0x64>
 8007ca8:	460c      	mov	r4, r1
 8007caa:	6849      	ldr	r1, [r1, #4]
 8007cac:	e7cc      	b.n	8007c48 <_malloc_r+0x2c>
 8007cae:	1cc4      	adds	r4, r0, #3
 8007cb0:	f024 0403 	bic.w	r4, r4, #3
 8007cb4:	42a0      	cmp	r0, r4
 8007cb6:	d005      	beq.n	8007cc4 <_malloc_r+0xa8>
 8007cb8:	1a21      	subs	r1, r4, r0
 8007cba:	4630      	mov	r0, r6
 8007cbc:	f000 f958 	bl	8007f70 <_sbrk_r>
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	d0cf      	beq.n	8007c64 <_malloc_r+0x48>
 8007cc4:	6025      	str	r5, [r4, #0]
 8007cc6:	e7db      	b.n	8007c80 <_malloc_r+0x64>
 8007cc8:	20001424 	.word	0x20001424
 8007ccc:	20001428 	.word	0x20001428

08007cd0 <__ssputs_r>:
 8007cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd4:	688e      	ldr	r6, [r1, #8]
 8007cd6:	429e      	cmp	r6, r3
 8007cd8:	4682      	mov	sl, r0
 8007cda:	460c      	mov	r4, r1
 8007cdc:	4690      	mov	r8, r2
 8007cde:	4699      	mov	r9, r3
 8007ce0:	d837      	bhi.n	8007d52 <__ssputs_r+0x82>
 8007ce2:	898a      	ldrh	r2, [r1, #12]
 8007ce4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ce8:	d031      	beq.n	8007d4e <__ssputs_r+0x7e>
 8007cea:	6825      	ldr	r5, [r4, #0]
 8007cec:	6909      	ldr	r1, [r1, #16]
 8007cee:	1a6f      	subs	r7, r5, r1
 8007cf0:	6965      	ldr	r5, [r4, #20]
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cf8:	fb95 f5f3 	sdiv	r5, r5, r3
 8007cfc:	f109 0301 	add.w	r3, r9, #1
 8007d00:	443b      	add	r3, r7
 8007d02:	429d      	cmp	r5, r3
 8007d04:	bf38      	it	cc
 8007d06:	461d      	movcc	r5, r3
 8007d08:	0553      	lsls	r3, r2, #21
 8007d0a:	d530      	bpl.n	8007d6e <__ssputs_r+0x9e>
 8007d0c:	4629      	mov	r1, r5
 8007d0e:	f7ff ff85 	bl	8007c1c <_malloc_r>
 8007d12:	4606      	mov	r6, r0
 8007d14:	b950      	cbnz	r0, 8007d2c <__ssputs_r+0x5c>
 8007d16:	230c      	movs	r3, #12
 8007d18:	f8ca 3000 	str.w	r3, [sl]
 8007d1c:	89a3      	ldrh	r3, [r4, #12]
 8007d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d22:	81a3      	strh	r3, [r4, #12]
 8007d24:	f04f 30ff 	mov.w	r0, #4294967295
 8007d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d2c:	463a      	mov	r2, r7
 8007d2e:	6921      	ldr	r1, [r4, #16]
 8007d30:	f7fc f8a6 	bl	8003e80 <memcpy>
 8007d34:	89a3      	ldrh	r3, [r4, #12]
 8007d36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d3e:	81a3      	strh	r3, [r4, #12]
 8007d40:	6126      	str	r6, [r4, #16]
 8007d42:	6165      	str	r5, [r4, #20]
 8007d44:	443e      	add	r6, r7
 8007d46:	1bed      	subs	r5, r5, r7
 8007d48:	6026      	str	r6, [r4, #0]
 8007d4a:	60a5      	str	r5, [r4, #8]
 8007d4c:	464e      	mov	r6, r9
 8007d4e:	454e      	cmp	r6, r9
 8007d50:	d900      	bls.n	8007d54 <__ssputs_r+0x84>
 8007d52:	464e      	mov	r6, r9
 8007d54:	4632      	mov	r2, r6
 8007d56:	4641      	mov	r1, r8
 8007d58:	6820      	ldr	r0, [r4, #0]
 8007d5a:	f000 f9d1 	bl	8008100 <memmove>
 8007d5e:	68a3      	ldr	r3, [r4, #8]
 8007d60:	1b9b      	subs	r3, r3, r6
 8007d62:	60a3      	str	r3, [r4, #8]
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	441e      	add	r6, r3
 8007d68:	6026      	str	r6, [r4, #0]
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	e7dc      	b.n	8007d28 <__ssputs_r+0x58>
 8007d6e:	462a      	mov	r2, r5
 8007d70:	f000 f9e1 	bl	8008136 <_realloc_r>
 8007d74:	4606      	mov	r6, r0
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d1e2      	bne.n	8007d40 <__ssputs_r+0x70>
 8007d7a:	6921      	ldr	r1, [r4, #16]
 8007d7c:	4650      	mov	r0, sl
 8007d7e:	f7ff feff 	bl	8007b80 <_free_r>
 8007d82:	e7c8      	b.n	8007d16 <__ssputs_r+0x46>

08007d84 <_svfiprintf_r>:
 8007d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d88:	b09d      	sub	sp, #116	; 0x74
 8007d8a:	4680      	mov	r8, r0
 8007d8c:	9303      	str	r3, [sp, #12]
 8007d8e:	898b      	ldrh	r3, [r1, #12]
 8007d90:	061d      	lsls	r5, r3, #24
 8007d92:	460c      	mov	r4, r1
 8007d94:	4616      	mov	r6, r2
 8007d96:	d50f      	bpl.n	8007db8 <_svfiprintf_r+0x34>
 8007d98:	690b      	ldr	r3, [r1, #16]
 8007d9a:	b96b      	cbnz	r3, 8007db8 <_svfiprintf_r+0x34>
 8007d9c:	2140      	movs	r1, #64	; 0x40
 8007d9e:	f7ff ff3d 	bl	8007c1c <_malloc_r>
 8007da2:	6020      	str	r0, [r4, #0]
 8007da4:	6120      	str	r0, [r4, #16]
 8007da6:	b928      	cbnz	r0, 8007db4 <_svfiprintf_r+0x30>
 8007da8:	230c      	movs	r3, #12
 8007daa:	f8c8 3000 	str.w	r3, [r8]
 8007dae:	f04f 30ff 	mov.w	r0, #4294967295
 8007db2:	e0c7      	b.n	8007f44 <_svfiprintf_r+0x1c0>
 8007db4:	2340      	movs	r3, #64	; 0x40
 8007db6:	6163      	str	r3, [r4, #20]
 8007db8:	2300      	movs	r3, #0
 8007dba:	9309      	str	r3, [sp, #36]	; 0x24
 8007dbc:	2320      	movs	r3, #32
 8007dbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dc2:	2330      	movs	r3, #48	; 0x30
 8007dc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dc8:	f04f 0b01 	mov.w	fp, #1
 8007dcc:	4637      	mov	r7, r6
 8007dce:	463d      	mov	r5, r7
 8007dd0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007dd4:	b10b      	cbz	r3, 8007dda <_svfiprintf_r+0x56>
 8007dd6:	2b25      	cmp	r3, #37	; 0x25
 8007dd8:	d13e      	bne.n	8007e58 <_svfiprintf_r+0xd4>
 8007dda:	ebb7 0a06 	subs.w	sl, r7, r6
 8007dde:	d00b      	beq.n	8007df8 <_svfiprintf_r+0x74>
 8007de0:	4653      	mov	r3, sl
 8007de2:	4632      	mov	r2, r6
 8007de4:	4621      	mov	r1, r4
 8007de6:	4640      	mov	r0, r8
 8007de8:	f7ff ff72 	bl	8007cd0 <__ssputs_r>
 8007dec:	3001      	adds	r0, #1
 8007dee:	f000 80a4 	beq.w	8007f3a <_svfiprintf_r+0x1b6>
 8007df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007df4:	4453      	add	r3, sl
 8007df6:	9309      	str	r3, [sp, #36]	; 0x24
 8007df8:	783b      	ldrb	r3, [r7, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f000 809d 	beq.w	8007f3a <_svfiprintf_r+0x1b6>
 8007e00:	2300      	movs	r3, #0
 8007e02:	f04f 32ff 	mov.w	r2, #4294967295
 8007e06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e0a:	9304      	str	r3, [sp, #16]
 8007e0c:	9307      	str	r3, [sp, #28]
 8007e0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e12:	931a      	str	r3, [sp, #104]	; 0x68
 8007e14:	462f      	mov	r7, r5
 8007e16:	2205      	movs	r2, #5
 8007e18:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007e1c:	484f      	ldr	r0, [pc, #316]	; (8007f5c <_svfiprintf_r+0x1d8>)
 8007e1e:	f7f8 fb67 	bl	80004f0 <memchr>
 8007e22:	9b04      	ldr	r3, [sp, #16]
 8007e24:	b9d0      	cbnz	r0, 8007e5c <_svfiprintf_r+0xd8>
 8007e26:	06d9      	lsls	r1, r3, #27
 8007e28:	bf44      	itt	mi
 8007e2a:	2220      	movmi	r2, #32
 8007e2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e30:	071a      	lsls	r2, r3, #28
 8007e32:	bf44      	itt	mi
 8007e34:	222b      	movmi	r2, #43	; 0x2b
 8007e36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e3a:	782a      	ldrb	r2, [r5, #0]
 8007e3c:	2a2a      	cmp	r2, #42	; 0x2a
 8007e3e:	d015      	beq.n	8007e6c <_svfiprintf_r+0xe8>
 8007e40:	9a07      	ldr	r2, [sp, #28]
 8007e42:	462f      	mov	r7, r5
 8007e44:	2000      	movs	r0, #0
 8007e46:	250a      	movs	r5, #10
 8007e48:	4639      	mov	r1, r7
 8007e4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e4e:	3b30      	subs	r3, #48	; 0x30
 8007e50:	2b09      	cmp	r3, #9
 8007e52:	d94d      	bls.n	8007ef0 <_svfiprintf_r+0x16c>
 8007e54:	b1b8      	cbz	r0, 8007e86 <_svfiprintf_r+0x102>
 8007e56:	e00f      	b.n	8007e78 <_svfiprintf_r+0xf4>
 8007e58:	462f      	mov	r7, r5
 8007e5a:	e7b8      	b.n	8007dce <_svfiprintf_r+0x4a>
 8007e5c:	4a3f      	ldr	r2, [pc, #252]	; (8007f5c <_svfiprintf_r+0x1d8>)
 8007e5e:	1a80      	subs	r0, r0, r2
 8007e60:	fa0b f000 	lsl.w	r0, fp, r0
 8007e64:	4318      	orrs	r0, r3
 8007e66:	9004      	str	r0, [sp, #16]
 8007e68:	463d      	mov	r5, r7
 8007e6a:	e7d3      	b.n	8007e14 <_svfiprintf_r+0x90>
 8007e6c:	9a03      	ldr	r2, [sp, #12]
 8007e6e:	1d11      	adds	r1, r2, #4
 8007e70:	6812      	ldr	r2, [r2, #0]
 8007e72:	9103      	str	r1, [sp, #12]
 8007e74:	2a00      	cmp	r2, #0
 8007e76:	db01      	blt.n	8007e7c <_svfiprintf_r+0xf8>
 8007e78:	9207      	str	r2, [sp, #28]
 8007e7a:	e004      	b.n	8007e86 <_svfiprintf_r+0x102>
 8007e7c:	4252      	negs	r2, r2
 8007e7e:	f043 0302 	orr.w	r3, r3, #2
 8007e82:	9207      	str	r2, [sp, #28]
 8007e84:	9304      	str	r3, [sp, #16]
 8007e86:	783b      	ldrb	r3, [r7, #0]
 8007e88:	2b2e      	cmp	r3, #46	; 0x2e
 8007e8a:	d10c      	bne.n	8007ea6 <_svfiprintf_r+0x122>
 8007e8c:	787b      	ldrb	r3, [r7, #1]
 8007e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8007e90:	d133      	bne.n	8007efa <_svfiprintf_r+0x176>
 8007e92:	9b03      	ldr	r3, [sp, #12]
 8007e94:	1d1a      	adds	r2, r3, #4
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	9203      	str	r2, [sp, #12]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	bfb8      	it	lt
 8007e9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ea2:	3702      	adds	r7, #2
 8007ea4:	9305      	str	r3, [sp, #20]
 8007ea6:	4d2e      	ldr	r5, [pc, #184]	; (8007f60 <_svfiprintf_r+0x1dc>)
 8007ea8:	7839      	ldrb	r1, [r7, #0]
 8007eaa:	2203      	movs	r2, #3
 8007eac:	4628      	mov	r0, r5
 8007eae:	f7f8 fb1f 	bl	80004f0 <memchr>
 8007eb2:	b138      	cbz	r0, 8007ec4 <_svfiprintf_r+0x140>
 8007eb4:	2340      	movs	r3, #64	; 0x40
 8007eb6:	1b40      	subs	r0, r0, r5
 8007eb8:	fa03 f000 	lsl.w	r0, r3, r0
 8007ebc:	9b04      	ldr	r3, [sp, #16]
 8007ebe:	4303      	orrs	r3, r0
 8007ec0:	3701      	adds	r7, #1
 8007ec2:	9304      	str	r3, [sp, #16]
 8007ec4:	7839      	ldrb	r1, [r7, #0]
 8007ec6:	4827      	ldr	r0, [pc, #156]	; (8007f64 <_svfiprintf_r+0x1e0>)
 8007ec8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ecc:	2206      	movs	r2, #6
 8007ece:	1c7e      	adds	r6, r7, #1
 8007ed0:	f7f8 fb0e 	bl	80004f0 <memchr>
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	d038      	beq.n	8007f4a <_svfiprintf_r+0x1c6>
 8007ed8:	4b23      	ldr	r3, [pc, #140]	; (8007f68 <_svfiprintf_r+0x1e4>)
 8007eda:	bb13      	cbnz	r3, 8007f22 <_svfiprintf_r+0x19e>
 8007edc:	9b03      	ldr	r3, [sp, #12]
 8007ede:	3307      	adds	r3, #7
 8007ee0:	f023 0307 	bic.w	r3, r3, #7
 8007ee4:	3308      	adds	r3, #8
 8007ee6:	9303      	str	r3, [sp, #12]
 8007ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eea:	444b      	add	r3, r9
 8007eec:	9309      	str	r3, [sp, #36]	; 0x24
 8007eee:	e76d      	b.n	8007dcc <_svfiprintf_r+0x48>
 8007ef0:	fb05 3202 	mla	r2, r5, r2, r3
 8007ef4:	2001      	movs	r0, #1
 8007ef6:	460f      	mov	r7, r1
 8007ef8:	e7a6      	b.n	8007e48 <_svfiprintf_r+0xc4>
 8007efa:	2300      	movs	r3, #0
 8007efc:	3701      	adds	r7, #1
 8007efe:	9305      	str	r3, [sp, #20]
 8007f00:	4619      	mov	r1, r3
 8007f02:	250a      	movs	r5, #10
 8007f04:	4638      	mov	r0, r7
 8007f06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f0a:	3a30      	subs	r2, #48	; 0x30
 8007f0c:	2a09      	cmp	r2, #9
 8007f0e:	d903      	bls.n	8007f18 <_svfiprintf_r+0x194>
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d0c8      	beq.n	8007ea6 <_svfiprintf_r+0x122>
 8007f14:	9105      	str	r1, [sp, #20]
 8007f16:	e7c6      	b.n	8007ea6 <_svfiprintf_r+0x122>
 8007f18:	fb05 2101 	mla	r1, r5, r1, r2
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	4607      	mov	r7, r0
 8007f20:	e7f0      	b.n	8007f04 <_svfiprintf_r+0x180>
 8007f22:	ab03      	add	r3, sp, #12
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	4622      	mov	r2, r4
 8007f28:	4b10      	ldr	r3, [pc, #64]	; (8007f6c <_svfiprintf_r+0x1e8>)
 8007f2a:	a904      	add	r1, sp, #16
 8007f2c:	4640      	mov	r0, r8
 8007f2e:	f7fc f84f 	bl	8003fd0 <_printf_float>
 8007f32:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007f36:	4681      	mov	r9, r0
 8007f38:	d1d6      	bne.n	8007ee8 <_svfiprintf_r+0x164>
 8007f3a:	89a3      	ldrh	r3, [r4, #12]
 8007f3c:	065b      	lsls	r3, r3, #25
 8007f3e:	f53f af36 	bmi.w	8007dae <_svfiprintf_r+0x2a>
 8007f42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f44:	b01d      	add	sp, #116	; 0x74
 8007f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f4a:	ab03      	add	r3, sp, #12
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	4622      	mov	r2, r4
 8007f50:	4b06      	ldr	r3, [pc, #24]	; (8007f6c <_svfiprintf_r+0x1e8>)
 8007f52:	a904      	add	r1, sp, #16
 8007f54:	4640      	mov	r0, r8
 8007f56:	f7fc faf1 	bl	800453c <_printf_i>
 8007f5a:	e7ea      	b.n	8007f32 <_svfiprintf_r+0x1ae>
 8007f5c:	0800850c 	.word	0x0800850c
 8007f60:	08008512 	.word	0x08008512
 8007f64:	08008516 	.word	0x08008516
 8007f68:	08003fd1 	.word	0x08003fd1
 8007f6c:	08007cd1 	.word	0x08007cd1

08007f70 <_sbrk_r>:
 8007f70:	b538      	push	{r3, r4, r5, lr}
 8007f72:	4c06      	ldr	r4, [pc, #24]	; (8007f8c <_sbrk_r+0x1c>)
 8007f74:	2300      	movs	r3, #0
 8007f76:	4605      	mov	r5, r0
 8007f78:	4608      	mov	r0, r1
 8007f7a:	6023      	str	r3, [r4, #0]
 8007f7c:	f7fb fe42 	bl	8003c04 <_sbrk>
 8007f80:	1c43      	adds	r3, r0, #1
 8007f82:	d102      	bne.n	8007f8a <_sbrk_r+0x1a>
 8007f84:	6823      	ldr	r3, [r4, #0]
 8007f86:	b103      	cbz	r3, 8007f8a <_sbrk_r+0x1a>
 8007f88:	602b      	str	r3, [r5, #0]
 8007f8a:	bd38      	pop	{r3, r4, r5, pc}
 8007f8c:	2000142c 	.word	0x2000142c

08007f90 <__sread>:
 8007f90:	b510      	push	{r4, lr}
 8007f92:	460c      	mov	r4, r1
 8007f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f98:	f000 f8f4 	bl	8008184 <_read_r>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	bfab      	itete	ge
 8007fa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fa2:	89a3      	ldrhlt	r3, [r4, #12]
 8007fa4:	181b      	addge	r3, r3, r0
 8007fa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007faa:	bfac      	ite	ge
 8007fac:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fae:	81a3      	strhlt	r3, [r4, #12]
 8007fb0:	bd10      	pop	{r4, pc}

08007fb2 <__swrite>:
 8007fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fb6:	461f      	mov	r7, r3
 8007fb8:	898b      	ldrh	r3, [r1, #12]
 8007fba:	05db      	lsls	r3, r3, #23
 8007fbc:	4605      	mov	r5, r0
 8007fbe:	460c      	mov	r4, r1
 8007fc0:	4616      	mov	r6, r2
 8007fc2:	d505      	bpl.n	8007fd0 <__swrite+0x1e>
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fcc:	f000 f886 	bl	80080dc <_lseek_r>
 8007fd0:	89a3      	ldrh	r3, [r4, #12]
 8007fd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fda:	81a3      	strh	r3, [r4, #12]
 8007fdc:	4632      	mov	r2, r6
 8007fde:	463b      	mov	r3, r7
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe6:	f000 b835 	b.w	8008054 <_write_r>

08007fea <__sseek>:
 8007fea:	b510      	push	{r4, lr}
 8007fec:	460c      	mov	r4, r1
 8007fee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff2:	f000 f873 	bl	80080dc <_lseek_r>
 8007ff6:	1c43      	adds	r3, r0, #1
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	bf15      	itete	ne
 8007ffc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ffe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008002:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008006:	81a3      	strheq	r3, [r4, #12]
 8008008:	bf18      	it	ne
 800800a:	81a3      	strhne	r3, [r4, #12]
 800800c:	bd10      	pop	{r4, pc}

0800800e <__sclose>:
 800800e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008012:	f000 b831 	b.w	8008078 <_close_r>

08008016 <strncmp>:
 8008016:	b510      	push	{r4, lr}
 8008018:	b16a      	cbz	r2, 8008036 <strncmp+0x20>
 800801a:	3901      	subs	r1, #1
 800801c:	1884      	adds	r4, r0, r2
 800801e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008022:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008026:	4293      	cmp	r3, r2
 8008028:	d103      	bne.n	8008032 <strncmp+0x1c>
 800802a:	42a0      	cmp	r0, r4
 800802c:	d001      	beq.n	8008032 <strncmp+0x1c>
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1f5      	bne.n	800801e <strncmp+0x8>
 8008032:	1a98      	subs	r0, r3, r2
 8008034:	bd10      	pop	{r4, pc}
 8008036:	4610      	mov	r0, r2
 8008038:	e7fc      	b.n	8008034 <strncmp+0x1e>

0800803a <__ascii_wctomb>:
 800803a:	b149      	cbz	r1, 8008050 <__ascii_wctomb+0x16>
 800803c:	2aff      	cmp	r2, #255	; 0xff
 800803e:	bf85      	ittet	hi
 8008040:	238a      	movhi	r3, #138	; 0x8a
 8008042:	6003      	strhi	r3, [r0, #0]
 8008044:	700a      	strbls	r2, [r1, #0]
 8008046:	f04f 30ff 	movhi.w	r0, #4294967295
 800804a:	bf98      	it	ls
 800804c:	2001      	movls	r0, #1
 800804e:	4770      	bx	lr
 8008050:	4608      	mov	r0, r1
 8008052:	4770      	bx	lr

08008054 <_write_r>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	4c07      	ldr	r4, [pc, #28]	; (8008074 <_write_r+0x20>)
 8008058:	4605      	mov	r5, r0
 800805a:	4608      	mov	r0, r1
 800805c:	4611      	mov	r1, r2
 800805e:	2200      	movs	r2, #0
 8008060:	6022      	str	r2, [r4, #0]
 8008062:	461a      	mov	r2, r3
 8008064:	f7fb fdee 	bl	8003c44 <_write>
 8008068:	1c43      	adds	r3, r0, #1
 800806a:	d102      	bne.n	8008072 <_write_r+0x1e>
 800806c:	6823      	ldr	r3, [r4, #0]
 800806e:	b103      	cbz	r3, 8008072 <_write_r+0x1e>
 8008070:	602b      	str	r3, [r5, #0]
 8008072:	bd38      	pop	{r3, r4, r5, pc}
 8008074:	2000142c 	.word	0x2000142c

08008078 <_close_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	4c06      	ldr	r4, [pc, #24]	; (8008094 <_close_r+0x1c>)
 800807c:	2300      	movs	r3, #0
 800807e:	4605      	mov	r5, r0
 8008080:	4608      	mov	r0, r1
 8008082:	6023      	str	r3, [r4, #0]
 8008084:	f7fb fdec 	bl	8003c60 <_close>
 8008088:	1c43      	adds	r3, r0, #1
 800808a:	d102      	bne.n	8008092 <_close_r+0x1a>
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	b103      	cbz	r3, 8008092 <_close_r+0x1a>
 8008090:	602b      	str	r3, [r5, #0]
 8008092:	bd38      	pop	{r3, r4, r5, pc}
 8008094:	2000142c 	.word	0x2000142c

08008098 <_fstat_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	4c07      	ldr	r4, [pc, #28]	; (80080b8 <_fstat_r+0x20>)
 800809c:	2300      	movs	r3, #0
 800809e:	4605      	mov	r5, r0
 80080a0:	4608      	mov	r0, r1
 80080a2:	4611      	mov	r1, r2
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	f7fb fdde 	bl	8003c66 <_fstat>
 80080aa:	1c43      	adds	r3, r0, #1
 80080ac:	d102      	bne.n	80080b4 <_fstat_r+0x1c>
 80080ae:	6823      	ldr	r3, [r4, #0]
 80080b0:	b103      	cbz	r3, 80080b4 <_fstat_r+0x1c>
 80080b2:	602b      	str	r3, [r5, #0]
 80080b4:	bd38      	pop	{r3, r4, r5, pc}
 80080b6:	bf00      	nop
 80080b8:	2000142c 	.word	0x2000142c

080080bc <_isatty_r>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	4c06      	ldr	r4, [pc, #24]	; (80080d8 <_isatty_r+0x1c>)
 80080c0:	2300      	movs	r3, #0
 80080c2:	4605      	mov	r5, r0
 80080c4:	4608      	mov	r0, r1
 80080c6:	6023      	str	r3, [r4, #0]
 80080c8:	f7fb fdd2 	bl	8003c70 <_isatty>
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	d102      	bne.n	80080d6 <_isatty_r+0x1a>
 80080d0:	6823      	ldr	r3, [r4, #0]
 80080d2:	b103      	cbz	r3, 80080d6 <_isatty_r+0x1a>
 80080d4:	602b      	str	r3, [r5, #0]
 80080d6:	bd38      	pop	{r3, r4, r5, pc}
 80080d8:	2000142c 	.word	0x2000142c

080080dc <_lseek_r>:
 80080dc:	b538      	push	{r3, r4, r5, lr}
 80080de:	4c07      	ldr	r4, [pc, #28]	; (80080fc <_lseek_r+0x20>)
 80080e0:	4605      	mov	r5, r0
 80080e2:	4608      	mov	r0, r1
 80080e4:	4611      	mov	r1, r2
 80080e6:	2200      	movs	r2, #0
 80080e8:	6022      	str	r2, [r4, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	f7fb fdc2 	bl	8003c74 <_lseek>
 80080f0:	1c43      	adds	r3, r0, #1
 80080f2:	d102      	bne.n	80080fa <_lseek_r+0x1e>
 80080f4:	6823      	ldr	r3, [r4, #0]
 80080f6:	b103      	cbz	r3, 80080fa <_lseek_r+0x1e>
 80080f8:	602b      	str	r3, [r5, #0]
 80080fa:	bd38      	pop	{r3, r4, r5, pc}
 80080fc:	2000142c 	.word	0x2000142c

08008100 <memmove>:
 8008100:	4288      	cmp	r0, r1
 8008102:	b510      	push	{r4, lr}
 8008104:	eb01 0302 	add.w	r3, r1, r2
 8008108:	d807      	bhi.n	800811a <memmove+0x1a>
 800810a:	1e42      	subs	r2, r0, #1
 800810c:	4299      	cmp	r1, r3
 800810e:	d00a      	beq.n	8008126 <memmove+0x26>
 8008110:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008114:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008118:	e7f8      	b.n	800810c <memmove+0xc>
 800811a:	4283      	cmp	r3, r0
 800811c:	d9f5      	bls.n	800810a <memmove+0xa>
 800811e:	1881      	adds	r1, r0, r2
 8008120:	1ad2      	subs	r2, r2, r3
 8008122:	42d3      	cmn	r3, r2
 8008124:	d100      	bne.n	8008128 <memmove+0x28>
 8008126:	bd10      	pop	{r4, pc}
 8008128:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800812c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008130:	e7f7      	b.n	8008122 <memmove+0x22>

08008132 <__malloc_lock>:
 8008132:	4770      	bx	lr

08008134 <__malloc_unlock>:
 8008134:	4770      	bx	lr

08008136 <_realloc_r>:
 8008136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008138:	4607      	mov	r7, r0
 800813a:	4614      	mov	r4, r2
 800813c:	460e      	mov	r6, r1
 800813e:	b921      	cbnz	r1, 800814a <_realloc_r+0x14>
 8008140:	4611      	mov	r1, r2
 8008142:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008146:	f7ff bd69 	b.w	8007c1c <_malloc_r>
 800814a:	b922      	cbnz	r2, 8008156 <_realloc_r+0x20>
 800814c:	f7ff fd18 	bl	8007b80 <_free_r>
 8008150:	4625      	mov	r5, r4
 8008152:	4628      	mov	r0, r5
 8008154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008156:	f000 f827 	bl	80081a8 <_malloc_usable_size_r>
 800815a:	42a0      	cmp	r0, r4
 800815c:	d20f      	bcs.n	800817e <_realloc_r+0x48>
 800815e:	4621      	mov	r1, r4
 8008160:	4638      	mov	r0, r7
 8008162:	f7ff fd5b 	bl	8007c1c <_malloc_r>
 8008166:	4605      	mov	r5, r0
 8008168:	2800      	cmp	r0, #0
 800816a:	d0f2      	beq.n	8008152 <_realloc_r+0x1c>
 800816c:	4631      	mov	r1, r6
 800816e:	4622      	mov	r2, r4
 8008170:	f7fb fe86 	bl	8003e80 <memcpy>
 8008174:	4631      	mov	r1, r6
 8008176:	4638      	mov	r0, r7
 8008178:	f7ff fd02 	bl	8007b80 <_free_r>
 800817c:	e7e9      	b.n	8008152 <_realloc_r+0x1c>
 800817e:	4635      	mov	r5, r6
 8008180:	e7e7      	b.n	8008152 <_realloc_r+0x1c>
	...

08008184 <_read_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4c07      	ldr	r4, [pc, #28]	; (80081a4 <_read_r+0x20>)
 8008188:	4605      	mov	r5, r0
 800818a:	4608      	mov	r0, r1
 800818c:	4611      	mov	r1, r2
 800818e:	2200      	movs	r2, #0
 8008190:	6022      	str	r2, [r4, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	f7fb fd70 	bl	8003c78 <_read>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d102      	bne.n	80081a2 <_read_r+0x1e>
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	b103      	cbz	r3, 80081a2 <_read_r+0x1e>
 80081a0:	602b      	str	r3, [r5, #0]
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	2000142c 	.word	0x2000142c

080081a8 <_malloc_usable_size_r>:
 80081a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ac:	1f18      	subs	r0, r3, #4
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	bfbc      	itt	lt
 80081b2:	580b      	ldrlt	r3, [r1, r0]
 80081b4:	18c0      	addlt	r0, r0, r3
 80081b6:	4770      	bx	lr

080081b8 <_init>:
 80081b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ba:	bf00      	nop
 80081bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081be:	bc08      	pop	{r3}
 80081c0:	469e      	mov	lr, r3
 80081c2:	4770      	bx	lr

080081c4 <_fini>:
 80081c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c6:	bf00      	nop
 80081c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ca:	bc08      	pop	{r3}
 80081cc:	469e      	mov	lr, r3
 80081ce:	4770      	bx	lr
